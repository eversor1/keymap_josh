
gh60_lufa.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800100  00005bea  00005c7e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005bea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ae  00800138  00800138  00005cb6  2**0
                  ALLOC
  3 .noinit       00000004  008001e6  008001e6  00005cb6  2**0
                  ALLOC
  4 .stab         000023dc  00000000  00000000  00005cb8  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000003fc  00000000  00000000  00008094  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  00008490  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000a70  00000000  00000000  000084a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00010bca  00000000  00000000  00008f11  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003f8f  00000000  00000000  00019adb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000051da  00000000  00000000  0001da6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001d44  00000000  00000000  00022c44  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000045e7  00000000  00000000  00024988  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00008f09  00000000  00000000  00028f6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000cc8  00000000  00000000  00031e78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
       0:	0c 94 33 08 	jmp	0x1066	; 0x1066 <__ctors_end>
       4:	0c 94 77 08 	jmp	0x10ee	; 0x10ee <__bad_interrupt>
       8:	0c 94 77 08 	jmp	0x10ee	; 0x10ee <__bad_interrupt>
       c:	0c 94 77 08 	jmp	0x10ee	; 0x10ee <__bad_interrupt>
      10:	0c 94 77 08 	jmp	0x10ee	; 0x10ee <__bad_interrupt>
      14:	0c 94 77 08 	jmp	0x10ee	; 0x10ee <__bad_interrupt>
      18:	0c 94 77 08 	jmp	0x10ee	; 0x10ee <__bad_interrupt>
	uint8_t ErrorCode;

	while (*BytesRem)
      1c:	0c 94 77 08 	jmp	0x10ee	; 0x10ee <__bad_interrupt>
      20:	0c 94 77 08 	jmp	0x10ee	; 0x10ee <__bad_interrupt>
      24:	0c 94 77 08 	jmp	0x10ee	; 0x10ee <__bad_interrupt>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
      28:	0c 94 42 0f 	jmp	0x1e84	; 0x1e84 <__vector_10>
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
      2c:	0c 94 12 10 	jmp	0x2024	; 0x2024 <__vector_11>
      30:	0c 94 be 20 	jmp	0x417c	; 0x417c <__vector_12>

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
      34:	0c 94 77 08 	jmp	0x10ee	; 0x10ee <__bad_interrupt>
      38:	0c 94 77 08 	jmp	0x10ee	; 0x10ee <__bad_interrupt>
      3c:	0c 94 77 08 	jmp	0x10ee	; 0x10ee <__bad_interrupt>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
      40:	0c 94 77 08 	jmp	0x10ee	; 0x10ee <__bad_interrupt>
			{
				*CurrConfigLoc = PrevDescLoc;
      44:	0c 94 77 08 	jmp	0x10ee	; 0x10ee <__bad_interrupt>
				*BytesRem      = PrevBytesRem;
      48:	0c 94 77 08 	jmp	0x10ee	; 0x10ee <__bad_interrupt>
      4c:	0c 94 77 08 	jmp	0x10ee	; 0x10ee <__bad_interrupt>
			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
}
      50:	0c 94 77 08 	jmp	0x10ee	; 0x10ee <__bad_interrupt>
      54:	0c 94 25 21 	jmp	0x424a	; 0x424a <__vector_21>
      58:	0c 94 77 08 	jmp	0x10ee	; 0x10ee <__bad_interrupt>
      5c:	0c 94 77 08 	jmp	0x10ee	; 0x10ee <__bad_interrupt>
      60:	0c 94 77 08 	jmp	0x10ee	; 0x10ee <__bad_interrupt>
      64:	0c 94 77 08 	jmp	0x10ee	; 0x10ee <__bad_interrupt>
	uint8_t               UsageListSize           = 0;
	HID_MinMax_t          UsageMinMax             = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
      68:	0c 94 77 08 	jmp	0x10ee	; 0x10ee <__bad_interrupt>

	ParserData->TotalDeviceReports = 1;
      6c:	0c 94 77 08 	jmp	0x10ee	; 0x10ee <__bad_interrupt>
      70:	0c 94 77 08 	jmp	0x10ee	; 0x10ee <__bad_interrupt>
      74:	0c 94 77 08 	jmp	0x10ee	; 0x10ee <__bad_interrupt>
      78:	0c 94 77 08 	jmp	0x10ee	; 0x10ee <__bad_interrupt>
      7c:	0c 94 77 08 	jmp	0x10ee	; 0x10ee <__bad_interrupt>
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
	HID_MinMax_t          UsageMinMax             = {0, 0};
      80:	0c 94 77 08 	jmp	0x10ee	; 0x10ee <__bad_interrupt>
      84:	0c 94 77 08 	jmp	0x10ee	; 0x10ee <__bad_interrupt>
      88:	0c 94 77 08 	jmp	0x10ee	; 0x10ee <__bad_interrupt>
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
      8c:	0c 94 77 08 	jmp	0x10ee	; 0x10ee <__bad_interrupt>
      90:	0c 94 77 08 	jmp	0x10ee	; 0x10ee <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
      94:	0c 94 77 08 	jmp	0x10ee	; 0x10ee <__bad_interrupt>
      98:	0c 94 77 08 	jmp	0x10ee	; 0x10ee <__bad_interrupt>

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
      9c:	0c 94 77 08 	jmp	0x10ee	; 0x10ee <__bad_interrupt>
      a0:	0c 94 77 08 	jmp	0x10ee	; 0x10ee <__bad_interrupt>
      a4:	0c 94 77 08 	jmp	0x10ee	; 0x10ee <__bad_interrupt>
      a8:	0c 94 77 08 	jmp	0x10ee	; 0x10ee <__bad_interrupt>

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
      ac:	7a 11       	cpse	r23, r10
      ae:	9c 11       	cpse	r25, r12
      b0:	88 12       	cpse	r8, r24
      b2:	9c 11       	cpse	r25, r12
      b4:	88 12       	cpse	r8, r24
      b6:	de 11       	cpse	r29, r14
      b8:	02 12       	cpse	r0, r18
      ba:	88 12       	cpse	r8, r24
				CurrStateTable->ReportCount                 = ReportItemData;
				break;
			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
      bc:	57 12       	cpse	r5, r23
      be:	6a 12       	cpse	r6, r26
      c0:	b4 15       	cp	r27, r4
      c2:	b4 15       	cp	r27, r4
      c4:	e2 15       	cp	r30, r2
      c6:	e2 15       	cp	r30, r2
      c8:	37 16       	cp	r3, r23
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
      ca:	73 16       	cp	r7, r19
      cc:	64 18       	sub	r6, r4
      ce:	64 18       	sub	r6, r4
      d0:	8b 16       	cp	r8, r27
      d2:	64 18       	sub	r6, r4
      d4:	82 17       	cp	r24, r18
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
      d6:	82 17       	cp	r24, r18
      d8:	3e 18       	sub	r3, r14
      da:	64 18       	sub	r6, r4
      dc:	64 18       	sub	r6, r4
	{
		uint8_t  HIDReportItem  = *ReportData;
      de:	52 18       	sub	r5, r2
      e0:	e5 29       	or	r30, r5
      e2:	0d 2a       	or	r0, r29
      e4:	4c 28       	or	r4, r12
      e6:	f6 2a       	or	r15, r22
		uint32_t ReportItemData = 0;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
      e8:	f6 2a       	or	r15, r22
      ea:	9a 29       	or	r25, r10
      ec:	f6 2a       	or	r15, r22
      ee:	f6 2a       	or	r15, r22
      f0:	39 2a       	or	r3, r25
      f2:	f6 2a       	or	r15, r22
      f4:	4c 2a       	or	r4, r28
      f6:	c1 2a       	or	r12, r17
	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData = 0;

		ReportData++;
      f8:	f6 2a       	or	r15, r22
      fa:	f6 2a       	or	r15, r22
      fc:	f6 2a       	or	r15, r22
		ReportSize--;
      fe:	f6 2a       	or	r15, r22
     100:	96 2a       	or	r9, r22
	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData = 0;
     102:	7d 2a       	or	r7, r29
     104:	f6 2a       	or	r15, r22
     106:	66 2a       	or	r6, r22
     108:	f6 2a       	or	r15, r22
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     10a:	26 2a       	or	r2, r22
     10c:	f6 2a       	or	r15, r22
     10e:	f6 2a       	or	r15, r22
     110:	f0 2a       	or	r15, r16
     112:	f0 2a       	or	r15, r16
     114:	f0 2a       	or	r15, r16
     116:	f0 2a       	or	r15, r16
     118:	f0 2a       	or	r15, r16
     11a:	f0 2a       	or	r15, r16
     11c:	f0 2a       	or	r15, r16
     11e:	f0 2a       	or	r15, r16
     120:	f0 2a       	or	r15, r16
     122:	ee 2a       	or	r14, r30
     124:	f6 2a       	or	r15, r22
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     126:	ee 2a       	or	r14, r30
     128:	f6 2a       	or	r15, r22
     12a:	f6 2a       	or	r15, r22
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     12c:	f6 2a       	or	r15, r22
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     12e:	f6 2a       	or	r15, r22
     130:	f6 2a       	or	r15, r22
     132:	f6 2a       	or	r15, r22
     134:	f6 2a       	or	r15, r22
     136:	f6 2a       	or	r15, r22
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     138:	f6 2a       	or	r15, r22
     13a:	f6 2a       	or	r15, r22
     13c:	f6 2a       	or	r15, r22
     13e:	ee 2a       	or	r14, r30
     140:	f6 2a       	or	r15, r22
     142:	f6 2a       	or	r15, r22
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
     144:	9a 29       	or	r25, r10
     146:	7b 29       	or	r23, r11
				ReportData     += 4;
     148:	f2 2a       	or	r15, r18
     14a:	f2 2a       	or	r15, r18
     14c:	f2 2a       	or	r15, r18
				break;
     14e:	f2 2a       	or	r15, r18
			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     150:	f2 2a       	or	r15, r18
     152:	f2 2a       	or	r15, r18
     154:	f2 2a       	or	r15, r18
     156:	f2 2a       	or	r15, r18
     158:	f2 2a       	or	r15, r18
     15a:	f2 2a       	or	r15, r18
     15c:	f2 2a       	or	r15, r18
     15e:	f2 2a       	or	r15, r18
     160:	d3 2a       	or	r13, r19
				ReportSize     -= 2;
     162:	f6 2a       	or	r15, r22
     164:	f9 29       	or	r31, r9

00000166 <fn_actions>:
				ReportData     += 2;
     166:	f1 a1                                               ..

00000168 <keymaps>:
     168:	29 00 1e 00 1f 00 20 00 21 00 22 00 23 00 24 00     )..... .!.".#.$.
				break;
			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     178:	25 00 26 00 27 00 2d 00 2e 00 00 00 2a 00 2b 00     %.&.'.-.....*.+.
				ReportSize     -= 1;
				ReportData     += 1;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     188:	14 00 1a 00 08 00 15 00 17 00 1c 00 18 00 0c 00     ................
     198:	12 00 13 00 2f 00 30 00 4a 00 4d 00 c0 00 04 00     ..../.0.J.M.....
     1a8:	16 00 07 00 09 00 0a 00 0b 00 0d 00 0e 00 0f 00     ................
     1b8:	33 00 34 00 00 00 28 00 4b 00 e1 00 1d 00 1b 00     3.4...(.K.......
     1c8:	06 00 19 00 05 00 11 00 10 00 36 00 37 00 38 00     ..........6.7.8.
			case HID_RI_USAGE_MINIMUM(0):
				UsageMinMax.Minimum = ReportItemData;
				break;
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     1d8:	00 00 e5 00 52 00 4e 00 e0 00 e3 00 e2 00 00 00     ....R.N.........
				break;
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
				break;
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
     1e8:	00 00 00 00 2c 00 00 00 00 00 00 00 35 00 4c 00     ....,.......5.L.
				ReportSize     -= 1;
				ReportData     += 1;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1f8:	50 00 51 00 4f 00 29 00 3a 00 3b 00 3c 00 3d 00     P.Q.O.).:.;.<.=.
     208:	3e 00 3f 00 40 00 41 00 42 00 43 00 44 00 45 00     >.?.@.A.B.C.D.E.
     218:	00 00 2a 00 2b 00 01 00 01 00 01 00 01 00 01 00     ..*.+...........
     228:	01 00 24 00 25 00 26 00 01 00 01 00 49 00 ad 00     ..$.%.&.....I...
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     238:	ae 00 01 00 01 00 01 00 01 00 01 00 01 00 01 00     ................
     248:	21 00 22 00 23 00 01 00 01 00 00 00 01 00 af 00     !.".#...........
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     258:	e1 00 01 00 01 00 01 00 01 00 01 00 01 00 1e 00     ................
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     268:	1f 00 20 00 01 00 00 00 e5 00 a9 00 48 00 e4 00     .. .........H...
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
				break;
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     278:	65 00 e6 00 00 00 00 00 00 00 2c 00 00 00 00 00     e.........,.....
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;
			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     288:	00 00 31 00 a8 00 ac 00 aa 00 ab 00                 ..1.........

00000294 <__c.2400>:
				break;
			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     294:	0a 00                                               ..

00000296 <__c.2398>:
     296:	25 30 31 36 62 00                                   %016b.

0000029c <__c.2396>:
     29c:	3a 20 00                                            : .

0000029f <__c.2394>:
     29f:	25 30 32 58 00                                      %02X.

000002a4 <__c.2391>:
				break;
			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     2a4:	0a 72 2f 63 20 30 31 32 33 34 35 36 37 38 39 41     .r/c 0123456789A
				break;
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     2b4:	42 43 44 45 46 0a 00                                BCDEF..

000002bb <__c.2364>:
     2bb:	0a 00                                               ..

000002bd <__c.2362>:
				break;
     2bd:	25 30 32 58 00                                      %02X.

000002c2 <__c.2360>:
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     2c2:	62 6f 75 6e 63 65 21 3a 20 00                       bounce!: .

000002cc <__c.4711>:
				break;
     2cc:	5b 73 5d 00                                         [s].

000002d0 <__c.4709>:
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;
			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     2d0:	4b 65 79 62 6f 61 72 64 20 73 74 61 72 74 2e 0a     Keyboard start..
				break;
			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
     2e0:	00                                                  .

000002e1 <__c.4707>:
     2e1:	55 53 42 20 63 6f 6e 66 69 67 75 72 65 64 2e 0a     USB configured..
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     2f1:	00                                                  .

000002f2 <__c.4615>:
     2f2:	5b 57 5d 00                                         [W].

000002f6 <__c.4611>:
     2f6:	5b 53 5d 00                                         [S].

000002fa <__c.4607>:
     2fa:	5b 52 5d 00                                         [R].

000002fe <__c.4602>:
     2fe:	5b 44 5d 00                                         [D].

00000302 <__c.4597>:
     302:	5b 43 5d 00                                         [C].

00000306 <ProductString>:
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     306:	0a 03 47 00 48 00 36 00 30 00 00 00                 ..G.H.6.0...

00000312 <ManufacturerString>:
     312:	12 03 67 00 65 00 65 00 6b 00 68 00 61 00 63 00     ..g.e.e.k.h.a.c.
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     322:	6b 00 00 00                                         k...

00000326 <LanguageString>:
     326:	04 03 09 04                                         ....

0000032a <ConfigurationDescriptor>:
     32a:	09 02 8d 00 05 01 00 a0 32 09 04 00 00 01 03 01     ........2.......
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     33a:	01 00 09 21 11 01 00 01 22 3f 00 07 05 81 03 08     ...!...."?......
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     34a:	00 0a 09 04 01 00 01 03 01 02 00 09 21 11 01 00     ............!...
     35a:	01 22 4d 00 07 05 82 03 08 00 0a 09 04 02 00 01     ."M.............
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     36a:	03 00 00 00 09 21 11 01 00 01 22 36 00 07 05 83     .....!...."6....
					}
				}

				ParserData->UsingReportIDs = true;

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     37a:	03 08 00 0a 09 04 03 00 02 03 00 00 00 09 21 11     ..............!.
				break;
			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     38a:	01 00 01 22 20 00 07 05 84 03 20 00 01 07 05 04     ..." ..... .....
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     39a:	03 20 00 01 09 04 04 00 01 03 00 00 00 09 21 11     . ............!.
     3aa:	01 00 01 22 39 00 07 05 85 03 10 00 01              ..."9........

000003b7 <DeviceDescriptor>:
				break;
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     3b7:	12 01 10 01 00 00 00 08 ed fe 60 60 01 00 01 02     ..........``....
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     3c7:	00 01                                               ..

000003c9 <NKROReport>:
     3c9:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
     3d9:	95 08 75 01 81 02 05 08 19 01 29 05 95 05 75 01     ..u.......)...u.
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     3e9:	91 02 95 01 75 03 91 01 05 07 19 00 29 77 15 00     ....u.......)w..
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     3f9:	25 01 95 78 75 01 81 02 c0                          %..xu....

00000402 <ConsoleReport>:
     402:	06 31 ff 09 74 a1 01 09 75 15 00 25 ff 95 20 75     .1..t...u..%.. u
				}

				CurrCollectionPath->Type       = ReportItemData;
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     412:	08 81 02 09 76 15 00 25 ff 95 20 75 08 91 02 c0     ....v..%.. u....

00000422 <ExtrakeyReport>:

				if (UsageListSize)
     422:	05 01 09 80 a1 01 85 02 16 01 00 26 b7 00 1a 01     ...........&....
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     432:	00 2a b7 00 75 10 95 01 81 00 c0 05 0c 09 01 a1     .*..u...........

					for (uint8_t i = 0; i < UsageListSize; i++)
					  UsageList[i] = UsageList[i + 1];
     442:	01 85 03 16 01 00 26 9c 02 1a 01 00 2a 9c 02 75     ......&.....*..u

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 0; i < UsageListSize; i++)
     452:	10 95 01 81 00 c0                                   ......

00000458 <MouseReport>:
					  UsageList[i] = UsageList[i + 1];

					UsageListSize--;
     458:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 05     ..............).
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     468:	15 00 25 01 95 05 75 01 81 02 95 01 75 03 81 01     ..%...u.....u...
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     478:	05 01 09 30 09 31 15 81 25 7f 95 02 75 08 81 06     ...0.1..%...u...
				}

				break;
			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     488:	09 38 15 81 25 7f 95 01 75 08 81 06 05 0c 0a 38     .8..%...u......8
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     498:	02 15 81 25 7f 95 01 75 08 81 06 c0 c0              ...%...u.....

000004a5 <KeyboardReport>:
     4a5:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     4b5:	95 08 75 01 81 02 95 01 75 08 81 01 05 08 19 01     ..u.....u.......
     4c5:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 05 07     )...u.....u.....
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     4d5:	19 00 29 ff 15 00 25 ff 95 06 75 08 81 00 c0        ..)...%...u....

000004e4 <__c.4368>:
				CurrCollectionPath = CurrCollectionPath->Parent;
				break;
			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     4e4:	0a 00                                               ..

000004e6 <__c.4363>:
     4e6:	25 30 32 58 20 00                                   %02X .

000004ec <__c.4360>:
     4ec:	6b 65 79 62 6f 61 72 64 5f 72 65 70 6f 72 74 3a     keyboard_report:
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     4fc:	20 00                                                .

000004fe <__c.4701>:
     4fe:	0a 00                                               ..

00000500 <__c.4699>:
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     500:	25 30 32 58 00                                      %02X.

00000505 <__c.4697>:
					NewReportItem.CollectionPath = CurrCollectionPath;
     505:	6b 65 79 62 6f 61 72 64 5f 73 65 74 5f 6c 65 64     keyboard_set_led
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     515:	3a 20 00                                            : .

00000518 <__c.4508>:
     518:	64 65 6c 5f 6b 65 79 5f 62 69 74 3a 20 63 61 6e     del_key_bit: can

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     528:	27 74 20 64 65 6c 3a 20 25 30 32 58 0a 00           't del: %02X..

00000536 <__c.4503>:
     536:	61 64 64 5f 6b 65 79 5f 62 69 74 3a 20 63 61 6e     add_key_bit: can

						for (uint8_t i = 0; i < UsageListSize; i++)
     546:	27 74 20 61 64 64 3a 20 25 30 32 58 0a 00           't add: %02X..

00000554 <__c.4647>:
						  UsageList[i] = UsageList[i + 1];

						UsageListSize--;
     554:	64 6f 6e 65 2e 0a 00                                done...

0000055b <__c.4641>:
     55b:	62 6f 6f 67 6d 61 67 69 63 20 73 63 61 6e 3a 20     boogmagic scan: 
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     56b:	2e 2e 2e 20 00                                      ... .

00000570 <__c.4440>:
     570:	29 0a 00                                            )..

00000573 <__c.4438>:
     573:	25 75 00                                            %u.

00000576 <__c.4436>:
     576:	2f 00                                               /.

00000578 <__c.4434>:
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     578:	25 75 00                                            %u.

0000057b <__c.4432>:
     57b:	5d 28 00                                            ](.

0000057e <__c.4430>:
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     57e:	25 64 00                                            %d.

00000581 <__c.4428>:
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     581:	20 00                                                .

00000583 <__c.4426>:
     583:	25 64 00                                            %d.

00000586 <__c.4424>:
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     586:	20 00                                                .

00000588 <__c.4422>:
     588:	25 64 00                                            %d.

0000058b <__c.4420>:
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     58b:	20 00                                                .

0000058d <__c.4418>:
     58d:	25 64 00                                            %d.

00000590 <__c.4416>:

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     590:	7c 00                                               |.

00000592 <__c.4414>:
     592:	25 30 32 58 00                                      %02X.

00000597 <__c.4412>:
     597:	6d 6f 75 73 65 6b 65 79 20 5b 62 74 6e 7c 78 20     mousekey [btn|x 
     5a7:	79 20 76 20 68 5d 28 72 65 70 2f 61 63 6c 29 3a     y v h](rep/acl):

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     5b7:	20 5b 00                                             [.

000005ba <__c.5140>:

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     5ba:	0a 00                                               ..

000005bc <__c.5138>:
     5bc:	25 75 00                                            %u.

000005bf <__c.5136>:
     5bf:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
     5cf:	5f 6d 61 78 20 3d 20 00                             _max = .

000005d7 <__c.5133>:
     5d7:	0a 00                                               ..

000005d9 <__c.5131>:
     5d9:	25 75 00                                            %u.

000005dc <__c.5129>:
     5dc:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
     5ec:	65 64 20 3d 20 00                                   ed = .

000005f2 <__c.5126>:

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     5f2:	0a 00                                               ..

000005f4 <__c.5124>:
     5f4:	25 75 00                                            %u.

000005f7 <__c.5122>:
     5f7:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     607:	20 00                                                .

00000609 <__c.5119>:
     609:	0a 00                                               ..

0000060b <__c.5117>:
     60b:	25 75 00                                            %u.

0000060e <__c.5115>:
     60e:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 00     mk_max_speed = .

0000061e <__c.5112>:
     61e:	0a 00                                               ..

00000620 <__c.5110>:
     620:	25 75 00                                            %u.

00000623 <__c.5108>:
     623:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 00        mk_interval = .

00000632 <__c.5104>:
     632:	0a 00                                               ..

00000634 <__c.5102>:
     634:	25 75 00                                            %u.

00000637 <__c.5100>:
     637:	6d 6b 5f 64 65 6c 61 79 20 3d 20 00                 mk_delay = .

00000643 <__c.5093>:
     643:	0a 00                                               ..

00000645 <__c.5091>:
     645:	25 75 00                                            %u.

00000648 <__c.5089>:
     648:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
     658:	5f 6d 61 78 20 3d 20 00                             _max = .

00000660 <__c.5086>:
     660:	0a 00                                               ..

00000662 <__c.5084>:
     662:	25 75 00                                            %u.

00000665 <__c.5082>:
     665:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
     675:	65 64 20 3d 20 00                                   ed = .

0000067b <__c.5079>:
     67b:	0a 00                                               ..

0000067d <__c.5077>:
     67d:	25 75 00                                            %u.

00000680 <__c.5075>:
     680:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
				}

				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     690:	20 00                                                .

00000692 <__c.5072>:
     692:	0a 00                                               ..

00000694 <__c.5070>:
     694:	25 75 00                                            %u.

00000697 <__c.5068>:
     697:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 00     mk_max_speed = .

000006a7 <__c.5065>:
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     6a7:	0a 00                                               ..

000006a9 <__c.5063>:
     6a9:	25 75 00                                            %u.

000006ac <__c.5061>:
     6ac:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 00        mk_interval = .

000006bb <__c.5057>:

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     6bb:	0a 00                                               ..

000006bd <__c.5055>:
     6bd:	25 75 00                                            %u.

000006c0 <__c.5053>:

				CurrStateTable++;
				break;
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     6c0:	6d 6b 5f 64 65 6c 61 79 20 3d 20 00                 mk_delay = .

000006cc <__c.5046>:
				}

				break;
			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     6cc:	0a 00                                               ..

000006ce <__c.5044>:
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     6ce:	25 75 00                                            %u.

000006d1 <__c.5042>:
     6d1:	36 3a 20 6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65     6: mk_wheel_time
}
     6e1:	5f 74 6f 5f 6d 61 78 3a 20 00                       _to_max: .

000006eb <__c.5040>:
     6eb:	0a 00                                               ..

000006ed <__c.5038>:
     6ed:	25 75 00                                            %u.

000006f0 <__c.5036>:
     6f0:	35 3a 20 6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f     5: mk_wheel_max_
     700:	73 70 65 65 64 3a 20 00                             speed: .

00000708 <__c.5034>:
     708:	0a 00                                               ..

0000070a <__c.5032>:
     70a:	25 75 00                                            %u.

0000070d <__c.5030>:
     70d:	34 3a 20 6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61     4: mk_time_to_ma
     71d:	78 3a 20 00                                         x: .

00000721 <__c.5028>:
     721:	0a 00                                               ..

00000723 <__c.5026>:
     723:	25 75 00                                            %u.

00000726 <__c.5024>:
     726:	33 3a 20 6d 6b 5f 6d 61 78 5f 73 70 65 65 64 3a     3: mk_max_speed:
     736:	20 00                                                .

00000738 <__c.5022>:
     738:	0a 00                                               ..

0000073a <__c.5020>:
     73a:	25 75 00                                            %u.

0000073d <__c.5018>:
     73d:	32 3a 20 6d 6b 5f 69 6e 74 65 72 76 61 6c 28 6d     2: mk_interval(m
     74d:	73 29 3a 20 00                                      s): .

00000752 <__c.5016>:
     752:	0a 00                                               ..

00000754 <__c.5014>:
     754:	25 75 00                                            %u.

00000757 <__c.5012>:
     757:	31 3a 20 6d 6b 5f 64 65 6c 61 79 28 2a 31 30 6d     1: mk_delay(*10m
     767:	73 29 3a 20 00                                      s): .

0000076c <__c.5010>:
     76c:	0a 0a 2d 2d 2d 2d 2d 20 4d 6f 75 73 65 6b 65 79     ..----- Mousekey
     77c:	20 50 61 72 61 6d 65 74 65 72 73 20 2d 2d 2d 2d      Parameters ----
     78c:	2d 0a 00                                            -..

0000078f <__c.5230>:
     78f:	3e 20 00                                            > .

00000792 <__c.5228>:
     792:	25 75 00                                            %u.

00000795 <__c.5226>:
     795:	4d 00                                               M.

00000797 <__c.5224>:
     797:	3f 00                                               ?.

00000799 <__c.5221>:
     799:	73 65 74 20 64 65 66 61 75 6c 74 20 76 61 6c 75     set default valu
     7a9:	65 73 2e 0a 00                                      es...

000007ae <__c.5214>:
     7ae:	0a 00                                               ..

000007b0 <__c.5212>:
     7b0:	25 75 00                                            %u.

000007b3 <__c.5210>:
     7b3:	73 65 6c 65 63 74 65 64 20 70 61 72 61 6d 65 74     selected paramet
     7c3:	65 72 3a 20 00                                      er: .

000007c8 <__c.5197>:
     7c8:	43 3e 20 00                                         C> .

000007cc <__c.5195>:
     7cc:	0a 51 75 69 74 20 4d 6f 75 73 65 6b 65 79 20 43     .Quit Mousekey C
     7dc:	6f 6e 73 6f 6c 65 0a 00                             onsole..

000007e4 <__c.5185>:
     7e4:	53 65 65 20 68 74 74 70 3a 2f 2f 65 6e 2e 77 69     See http://en.wi
     7f4:	6b 69 70 65 64 69 61 2e 6f 72 67 2f 77 69 6b 69     kipedia.org/wiki
     804:	2f 4d 6f 75 73 65 5f 6b 65 79 73 0a 00              /Mouse_keys..

00000811 <__c.5183>:
     811:	0a 00                                               ..

00000813 <__c.5181>:
     813:	25 75 00                                            %u.

00000816 <__c.5179>:
     816:	2c 20 77 68 65 65 6c 3d 00                          , wheel=.

0000081f <__c.5177>:
     81f:	25 75 00                                            %u.

00000822 <__c.5175>:
     822:	77 68 65 72 65 20 64 65 6c 74 61 3a 20 63 75 72     where delta: cur
     832:	73 6f 72 3d 00                                      sor=.

00000837 <__c.5173>:
     837:	0a 73 70 65 65 64 20 3d 20 64 65 6c 74 61 20 2a     .speed = delta *
     847:	20 6d 61 78 5f 73 70 65 65 64 20 2a 20 28 72 65      max_speed * (re
     857:	70 65 61 74 20 2f 20 74 69 6d 65 5f 74 6f 5f 6d     peat / time_to_m
     867:	61 78 29 0a 00                                      ax)..

0000086c <__c.5171>:
     86c:	70 67 64 6f 77 6e 3a 09 64 65 63 72 65 61 73 65     pgdown:.decrease
     87c:	20 70 61 72 61 6d 65 74 65 72 73 28 2d 31 30 29      parameters(-10)
     88c:	0a 00                                               ..

0000088e <__c.5169>:
     88e:	70 67 75 70 3a 09 69 6e 63 72 65 61 73 65 20 70     pgup:.increase p
     89e:	61 72 61 6d 65 74 65 72 73 28 2b 31 30 29 0a 00     arameters(+10)..

000008ae <__c.5167>:
     8ae:	64 6f 77 6e 3a 09 64 65 63 72 65 61 73 65 20 70     down:.decrease p
     8be:	61 72 61 6d 65 74 65 72 73 28 2d 31 29 0a 00        arameters(-1)..

000008cd <__c.5165>:
     8cd:	75 70 3a 09 69 6e 63 72 65 61 73 65 20 70 61 72     up:.increase par
     8dd:	61 6d 65 74 65 72 73 28 2b 31 29 0a 00              ameters(+1)..

000008ea <__c.5163>:
     8ea:	64 3a 09 73 65 74 20 64 65 66 61 75 6c 74 20 76     d:.set default v
     8fa:	61 6c 75 65 73 0a 00                                alues..

00000901 <__c.5161>:
     901:	70 3a 09 70 72 69 6e 74 20 70 61 72 61 6d 65 74     p:.print paramet
     911:	65 72 73 0a 00                                      ers..

00000916 <__c.5159>:
     916:	36 3a 09 73 65 6c 65 63 74 20 6d 6b 5f 77 68 65     6:.select mk_whe
     926:	65 6c 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 0a 00     el_time_to_max..

00000936 <__c.5157>:
     936:	35 3a 09 73 65 6c 65 63 74 20 6d 6b 5f 77 68 65     5:.select mk_whe
     946:	65 6c 5f 6d 61 78 5f 73 70 65 65 64 0a 00           el_max_speed..

00000954 <__c.5155>:
     954:	34 3a 09 73 65 6c 65 63 74 20 6d 6b 5f 74 69 6d     4:.select mk_tim
     964:	65 5f 74 6f 5f 6d 61 78 0a 00                       e_to_max..

0000096e <__c.5153>:
     96e:	33 3a 09 73 65 6c 65 63 74 20 6d 6b 5f 6d 61 78     3:.select mk_max
     97e:	5f 73 70 65 65 64 0a 00                             _speed..

00000986 <__c.5151>:
     986:	32 3a 09 73 65 6c 65 63 74 20 6d 6b 5f 69 6e 74     2:.select mk_int
     996:	65 72 76 61 6c 28 6d 73 29 0a 00                    erval(ms)..

000009a1 <__c.5149>:
     9a1:	31 3a 09 73 65 6c 65 63 74 20 6d 6b 5f 64 65 6c     1:.select mk_del
     9b1:	61 79 28 2a 31 30 6d 73 29 0a 00                    ay(*10ms)..

000009bc <__c.5147>:
     9bc:	45 53 43 2f 71 3a 09 71 75 69 74 0a 00              ESC/q:.quit..

000009c9 <__c.5145>:
     9c9:	0a 0a 2d 2d 2d 2d 2d 20 4d 6f 75 73 65 6b 65 79     ..----- Mousekey
     9d9:	20 50 61 72 61 6d 65 74 65 72 73 20 48 65 6c 70      Parameters Help
     9e9:	20 2d 2d 2d 2d 2d 0a 00                              -----..

000009f1 <__c.5002>:
     9f1:	3f 00                                               ?.

000009f3 <__c.4999>:
     9f3:	4d 30 3e 00                                         M0>.

000009f7 <__c.4997>:
     9f7:	0a 45 6e 74 65 72 20 4d 6f 75 73 65 6b 65 79 20     .Enter Mousekey 
     a07:	43 6f 6e 73 6f 6c 65 0a 00                          Console..

00000a10 <__c.4994>:
     a10:	0a 51 75 69 74 20 43 6f 6e 73 6f 6c 65 20 4d 6f     .Quit Console Mo
     a20:	64 65 0a 00                                         de..

00000a24 <__c.5004>:
     a24:	43 3e 20 00                                         C> .

00000a28 <__c.5256>:
     a28:	0a 00                                               ..

00000a2a <__c.5254>:
     a2a:	25 75 00                                            %u.

00000a2d <__c.5252>:
     a2d:	20 74 6f 20 00                                       to .

00000a32 <__c.5250>:
     a32:	25 75 00                                            %u.

00000a35 <__c.5248>:
     a35:	73 77 69 74 63 68 5f 64 65 66 61 75 6c 74 5f 6c     switch_default_l
     a45:	61 79 65 72 3a 20 00                                ayer: .

00000a4c <__c.4984>:
     a4c:	6d 3a 09 6d 6f 75 73 65 6b 65 79 0a 00              m:.mousekey..

00000a59 <__c.4982>:
     a59:	45 53 43 2f 71 3a 09 71 75 69 74 0a 00              ESC/q:.quit..

00000a66 <__c.4980>:
     a66:	0a 0a 2d 2d 2d 2d 2d 20 43 6f 6e 73 6f 6c 65 20     ..----- Console 
     a76:	48 65 6c 70 20 2d 2d 2d 2d 2d 0a 00                 Help -----..

00000a82 <__c.4796>:
     a82:	50 61 75 73 3a 09 6a 75 6d 70 20 74 6f 20 62 6f     Paus:.jump to bo
     a92:	6f 74 6c 6f 61 64 65 72 0a 00                       otloader..

00000a9c <__c.4794>:
     a9c:	43 61 70 73 3a 09 4c 6f 63 6b 20 4b 65 79 62 6f     Caps:.Lock Keybo
     aac:	61 72 64 28 43 68 69 6c 64 20 50 72 6f 6f 66 29     ard(Child Proof)
     abc:	0a 00                                               ..

00000abe <__c.4792>:
     abe:	50 53 63 72 3a 09 70 6f 77 65 72 20 64 6f 77 6e     PScr:.power down
     ace:	2f 72 65 6d 6f 74 65 20 77 61 6b 65 2d 75 70 0a     /remote wake-up.
     ade:	00                                                  .

00000adf <__c.4790>:
     adf:	34 2f 46 34 3a 09 73 77 69 74 63 68 20 74 6f 20     4/F4:.switch to 
     aef:	4c 61 79 65 72 34 20 0a 00                          Layer4 ..

00000af8 <__c.4788>:
     af8:	33 2f 46 33 3a 09 73 77 69 74 63 68 20 74 6f 20     3/F3:.switch to 
     b08:	4c 61 79 65 72 33 20 0a 00                          Layer3 ..

00000b11 <__c.4786>:
     b11:	32 2f 46 32 3a 09 73 77 69 74 63 68 20 74 6f 20     2/F2:.switch to 
     b21:	4c 61 79 65 72 32 20 0a 00                          Layer2 ..

00000b2a <__c.4784>:
     b2a:	31 2f 46 31 3a 09 73 77 69 74 63 68 20 74 6f 20     1/F1:.switch to 
     b3a:	4c 61 79 65 72 31 20 0a 00                          Layer1 ..

00000b43 <__c.4782>:
     b43:	30 2f 46 31 30 3a 09 73 77 69 74 63 68 20 74 6f     0/F10:.switch to
     b53:	20 4c 61 79 65 72 30 20 0a 00                        Layer0 ..

00000b5d <__c.4780>:
     b5d:	6e 3a 09 74 6f 67 67 6c 65 20 4e 4b 52 4f 0a 00     n:.toggle NKRO..

00000b6d <__c.4778>:
     b6d:	65 3a 09 70 72 69 6e 74 20 65 65 70 72 6f 6d 20     e:.print eeprom 
     b7d:	63 6f 6e 66 69 67 0a 00                             config..

00000b85 <__c.4776>:
     b85:	73 3a 09 70 72 69 6e 74 20 73 74 61 74 75 73 0a     s:.print status.
     b95:	00                                                  .

00000b96 <__c.4774>:
     b96:	74 3a 09 70 72 69 6e 74 20 74 69 6d 65 72 20 63     t:.print timer c
     ba6:	6f 75 6e 74 0a 00                                   ount..

00000bac <__c.4772>:
     bac:	76 3a 09 70 72 69 6e 74 20 64 65 76 69 63 65 20     v:.print device 
     bbc:	76 65 72 73 69 6f 6e 20 26 20 69 6e 66 6f 0a 00     version & info..

00000bcc <__c.4770>:
     bcc:	6d 3a 09 74 6f 67 67 6c 65 20 6d 6f 75 73 65 20     m:.toggle mouse 
     bdc:	64 65 62 75 67 0a 00                                debug..

00000be3 <__c.4768>:
     be3:	6b 3a 09 74 6f 67 67 6c 65 20 6b 65 79 62 6f 61     k:.toggle keyboa
     bf3:	72 64 20 64 65 62 75 67 0a 00                       rd debug..

00000bfd <__c.4766>:
     bfd:	78 3a 09 74 6f 67 67 6c 65 20 6d 61 74 72 69 78     x:.toggle matrix
     c0d:	20 64 65 62 75 67 0a 00                              debug..

00000c15 <__c.4764>:
     c15:	64 3a 09 74 6f 67 67 6c 65 20 64 65 62 75 67 20     d:.toggle debug 
     c25:	65 6e 61 62 6c 65 0a 00                             enable..

00000c2d <__c.4762>:
     c2d:	63 3a 09 65 6e 74 65 72 20 63 6f 6e 73 6f 6c 65     c:.enter console
     c3d:	20 6d 6f 64 65 0a 00                                 mode..

00000c44 <__c.4760>:
     c44:	0a 0a 2d 2d 2d 2d 2d 20 43 6f 6d 6d 61 6e 64 20     ..----- Command 
     c54:	48 65 6c 70 20 2d 2d 2d 2d 2d 0a 00                 Help -----..

00000c60 <__c.4891>:
     c60:	0a 00                                               ..

00000c62 <__c.4889>:
     c62:	25 75 00                                            %u.

00000c65 <__c.4887>:
     c65:	2e 6e 6b 72 6f 3a 20 00                             .nkro: .

00000c6d <__c.4885>:
     c6d:	0a 00                                               ..

00000c6f <__c.4883>:
     c6f:	25 75 00                                            %u.

00000c72 <__c.4881>:
     c72:	2e 73 77 61 70 5f 62 61 63 6b 73 6c 61 73 68 5f     .swap_backslash_
     c82:	62 61 63 6b 73 70 61 63 65 3a 20 00                 backspace: .

00000c8e <__c.4879>:
     c8e:	0a 00                                               ..

00000c90 <__c.4877>:
     c90:	25 75 00                                            %u.

00000c93 <__c.4875>:
     c93:	2e 73 77 61 70 5f 67 72 61 76 65 5f 65 73 63 3a     .swap_grave_esc:
     ca3:	20 00                                                .

00000ca5 <__c.4873>:
     ca5:	0a 00                                               ..

00000ca7 <__c.4871>:
     ca7:	25 75 00                                            %u.

00000caa <__c.4869>:
     caa:	2e 6e 6f 5f 67 75 69 3a 20 00                       .no_gui: .

00000cb4 <__c.4867>:
     cb4:	0a 00                                               ..

00000cb6 <__c.4865>:
     cb6:	25 75 00                                            %u.

00000cb9 <__c.4863>:
     cb9:	2e 73 77 61 70 5f 72 61 6c 74 5f 72 67 75 69 3a     .swap_ralt_rgui:
     cc9:	20 00                                                .

00000ccb <__c.4861>:
     ccb:	0a 00                                               ..

00000ccd <__c.4859>:
     ccd:	25 75 00                                            %u.

00000cd0 <__c.4857>:
     cd0:	2e 73 77 61 70 5f 6c 61 6c 74 5f 6c 67 75 69 3a     .swap_lalt_lgui:
     ce0:	20 00                                                .

00000ce2 <__c.4855>:
     ce2:	0a 00                                               ..

00000ce4 <__c.4853>:
     ce4:	25 75 00                                            %u.

00000ce7 <__c.4851>:
     ce7:	2e 63 61 70 73 6c 6f 63 6b 5f 74 6f 5f 63 6f 6e     .capslock_to_con
     cf7:	74 72 6f 6c 3a 20 00                                trol: .

00000cfe <__c.4849>:
     cfe:	0a 00                                               ..

00000d00 <__c.4847>:
     d00:	25 75 00                                            %u.

00000d03 <__c.4845>:
     d03:	2e 73 77 61 70 5f 63 6f 6e 74 72 6f 6c 5f 63 61     .swap_control_ca
     d13:	70 73 6c 6f 63 6b 3a 20 00                          pslock: .

00000d1c <__c.4843>:
     d1c:	0a 00                                               ..

00000d1e <__c.4841>:
     d1e:	25 30 32 58 00                                      %02X.

00000d23 <__c.4839>:
     d23:	6b 65 79 6d 61 70 5f 63 6f 6e 66 69 67 2e 72 61     keymap_config.ra
     d33:	77 3a 20 00                                         w: .

00000d37 <__c.4836>:
     d37:	0a 00                                               ..

00000d39 <__c.4834>:
     d39:	25 75 00                                            %u.

00000d3c <__c.4832>:
     d3c:	2e 6d 6f 75 73 65 3a 20 00                          .mouse: .

00000d45 <__c.4830>:
     d45:	0a 00                                               ..

00000d47 <__c.4828>:
     d47:	25 75 00                                            %u.

00000d4a <__c.4826>:
     d4a:	2e 6b 65 79 62 6f 61 72 64 3a 20 00                 .keyboard: .

00000d56 <__c.4824>:
     d56:	0a 00                                               ..

00000d58 <__c.4822>:
     d58:	25 75 00                                            %u.

00000d5b <__c.4820>:
     d5b:	2e 6d 61 74 72 69 78 3a 20 00                       .matrix: .

00000d65 <__c.4818>:
     d65:	0a 00                                               ..

00000d67 <__c.4816>:
     d67:	25 75 00                                            %u.

00000d6a <__c.4814>:
     d6a:	2e 65 6e 61 62 6c 65 3a 20 00                       .enable: .

00000d74 <__c.4812>:
     d74:	0a 00                                               ..

00000d76 <__c.4810>:
     d76:	25 30 32 58 00                                      %02X.

00000d7b <__c.4808>:
     d7b:	64 65 62 75 67 5f 63 6f 6e 66 69 67 2e 72 61 77     debug_config.raw
     d8b:	3a 20 00                                            : .

00000d8e <__c.4805>:
     d8e:	0a 00                                               ..

00000d90 <__c.4803>:
     d90:	25 75 00                                            %u.

00000d93 <__c.4801>:
     d93:	64 65 66 61 75 6c 74 5f 6c 61 79 65 72 3a 20 00     default_layer: .

00000da3 <__c.4975>:
     da3:	3f 00                                               ?.

00000da5 <__c.4966>:
     da5:	4e 4b 52 4f 3a 20 64 69 73 61 62 6c 65 64 0a 00     NKRO: disabled..

00000db5 <__c.4964>:
     db5:	4e 4b 52 4f 3a 20 65 6e 61 62 6c 65 64 0a 00        NKRO: enabled..

00000dc4 <__c.4961>:
     dc4:	6b 65 79 62 6f 61 72 64 5f 69 64 6c 65 3a 20 25     keyboard_idle: %
     dd4:	58 0a 00                                            X..

00000dd7 <__c.4959>:
     dd7:	6b 65 79 62 6f 61 72 64 5f 70 72 6f 74 6f 63 6f     keyboard_protoco
     de7:	6c 3a 20 25 58 0a 00                                l: %X..

00000dee <__c.4957>:
     dee:	68 6f 73 74 5f 6b 65 79 62 6f 61 72 64 5f 6c 65     host_keyboard_le
     dfe:	64 73 28 29 3a 20 25 58 0a 00                       ds(): %X..

00000e08 <__c.4955>:
     e08:	0a 0a 2d 2d 2d 2d 2d 20 53 74 61 74 75 73 20 2d     ..----- Status -
     e18:	2d 2d 2d 2d 0a 00                                   ----..

00000e1e <__c.4952>:
     e1e:	74 69 6d 65 72 5f 63 6f 75 6e 74 3a 20 25 30 34     timer_count: %04
     e2e:	6c 58 0a 00                                         lX..

00000e32 <__c.4949>:
     e32:	47 43 43 3a 20 34 2e 38 2e 32 20 41 56 52 2d 4c     GCC: 4.8.2 AVR-L
     e42:	49 42 43 3a 20 31 2e 38 2e 30 20 41 56 52 5f 41     IBC: 1.8.0 AVR_A
     e52:	52 43 48 3a 20 61 76 72 35 0a 00                    RCH: avr5..

00000e5d <__c.4947>:
     e5d:	4f 50 54 49 4f 4e 53 3a 20 4c 55 46 41 20 42 4f     OPTIONS: LUFA BO
     e6d:	4f 54 4d 41 47 49 43 20 4d 4f 55 53 45 4b 45 59     OTMAGIC MOUSEKEY
     e7d:	20 45 58 54 52 41 4b 45 59 20 43 4f 4e 53 4f 4c      EXTRAKEY CONSOL
     e8d:	45 20 43 4f 4d 4d 41 4e 44 20 4e 4b 52 4f 20 34     E COMMAND NKRO 4
     e9d:	30 39 36 0a 00                                      096..

00000ea2 <__c.4945>:
     ea2:	42 55 49 4c 44 3a 20 37 31 66 37 37 31 33 2d 64     BUILD: 71f7713-d
     eb2:	69 72 74 79 20 28 31 34 3a 31 36 3a 35 32 20 41     irty (14:16:52 A
     ec2:	70 72 20 31 32 20 32 30 31 35 29 0a 00              pr 12 2015)..

00000ecf <__c.4943>:
     ecf:	56 49 44 3a 20 30 78 46 45 45 44 28 67 65 65 6b     VID: 0xFEED(geek
     edf:	68 61 63 6b 29 20 50 49 44 3a 20 30 78 36 30 36     hack) PID: 0x606
     eef:	30 28 47 48 36 30 29 20 56 45 52 3a 20 30 78 30     0(GH60) VER: 0x0
     eff:	30 30 31 0a 00                                      001..

00000f04 <__c.4941>:
     f04:	44 45 53 43 3a 20 74 2e 6d 2e 6b 2e 20 6b 65 79     DESC: t.m.k. key
     f14:	62 6f 61 72 64 20 66 69 72 6d 77 61 72 65 20 66     board firmware f
     f24:	6f 72 20 47 48 36 30 0a 00                          or GH60..

00000f2d <__c.4939>:
     f2d:	0a 0a 2d 2d 2d 2d 2d 20 56 65 72 73 69 6f 6e 20     ..----- Version 
     f3d:	2d 2d 2d 2d 2d 0a 00                                -----..

00000f44 <__c.4936>:
     f44:	0a 44 45 42 55 47 3a 20 6d 6f 75 73 65 20 64 69     .DEBUG: mouse di
     f54:	73 61 62 6c 65 64 2e 0a 00                          sabled...

00000f5d <__c.4934>:
     f5d:	0a 44 45 42 55 47 3a 20 6d 6f 75 73 65 20 65 6e     .DEBUG: mouse en
     f6d:	61 62 6c 65 64 2e 0a 00                             abled...

00000f75 <__c.4931>:
     f75:	0a 44 45 42 55 47 3a 20 6b 65 79 62 6f 61 72 64     .DEBUG: keyboard
     f85:	20 64 69 73 61 62 6c 65 64 2e 0a 00                  disabled...

00000f91 <__c.4929>:
     f91:	0a 44 45 42 55 47 3a 20 6b 65 79 62 6f 61 72 64     .DEBUG: keyboard
     fa1:	20 65 6e 61 62 6c 65 64 2e 0a 00                     enabled...

00000fac <__c.4926>:
     fac:	0a 44 45 42 55 47 3a 20 6d 61 74 72 69 78 20 64     .DEBUG: matrix d
     fbc:	69 73 61 62 6c 65 64 2e 0a 00                       isabled...

00000fc6 <__c.4924>:
     fc6:	0a 44 45 42 55 47 3a 20 6d 61 74 72 69 78 20 65     .DEBUG: matrix e
     fd6:	6e 61 62 6c 65 64 2e 0a 00                          nabled...

00000fdf <__c.4921>:
     fdf:	0a 44 45 42 55 47 3a 20 65 6e 61 62 6c 65 64 2e     .DEBUG: enabled.
     fef:	0a 00                                               ..

00000ff1 <__c.4919>:
     ff1:	0a 44 45 42 55 47 3a 20 64 69 73 61 62 6c 65 64     .DEBUG: disabled
    1001:	2e 0a 00                                            ...

00001004 <__c.4916>:
    1004:	6e 6f 74 20 73 75 70 70 6f 72 74 65 64 2e 0a 00     not supported...

00001014 <__c.4914>:
    1014:	0a 0a 4a 75 6d 70 20 74 6f 20 62 6f 6f 74 6c 6f     ..Jump to bootlo
    1024:	61 64 65 72 2e 2e 2e 20 00                          ader... .

0000102d <__c.4911>:
    102d:	43 3e 20 00                                         C> .

00001031 <__c.4909>:
    1031:	0a 45 6e 74 65 72 20 43 6f 6e 73 6f 6c 65 20 4d     .Enter Console M
    1041:	6f 64 65 0a 00                                      ode..

00001046 <__c.4904>:
    1046:	55 6e 6c 6f 63 6b 65 64 2e 0a 00                    Unlocked...

00001051 <__c.4902>:
    1051:	4c 6f 63 6b 65 64 2e 0a 00                          Locked...

0000105a <__c.4898>:
    105a:	65 65 63 6f 6e 66 69 67 3a 0a 00 00                 eeconfig:...

00001066 <__ctors_end>:
    1066:	11 24       	eor	r1, r1
    1068:	1f be       	out	0x3f, r1	; 63
    106a:	cf ef       	ldi	r28, 0xFF	; 255
    106c:	da e0       	ldi	r29, 0x0A	; 10
    106e:	de bf       	out	0x3e, r29	; 62
    1070:	cd bf       	out	0x3d, r28	; 61

00001072 <bootloader_jump_after_watchdog_reset>:

/* this runs before main() */
void bootloader_jump_after_watchdog_reset(void) __attribute__ ((used, naked, section (".init3")));
void bootloader_jump_after_watchdog_reset(void)
{
    if ((MCUSR & (1<<WDRF)) && reset_key == BOOTLOADER_RESET_KEY) {
    1072:	04 b6       	in	r0, 0x34	; 52
    1074:	03 fe       	sbrs	r0, 3
    1076:	24 c0       	rjmp	.+72     	; 0x10c0 <__do_copy_data>
    1078:	80 91 e6 01 	lds	r24, 0x01E6
    107c:	90 91 e7 01 	lds	r25, 0x01E7
    1080:	a0 91 e8 01 	lds	r26, 0x01E8
    1084:	b0 91 e9 01 	lds	r27, 0x01E9
    1088:	87 30       	cpi	r24, 0x07	; 7
    108a:	90 4b       	sbci	r25, 0xB0	; 176
    108c:	a7 40       	sbci	r26, 0x07	; 7
    108e:	b0 4b       	sbci	r27, 0xB0	; 176
    1090:	b9 f4       	brne	.+46     	; 0x10c0 <__do_copy_data>
        reset_key = 0;
    1092:	10 92 e6 01 	sts	0x01E6, r1
    1096:	10 92 e7 01 	sts	0x01E7, r1
    109a:	10 92 e8 01 	sts	0x01E8, r1
    109e:	10 92 e9 01 	sts	0x01E9, r1

        // My custom USBasploader requires this to come up.
        MCUSR = 0;
    10a2:	14 be       	out	0x34, r1	; 52

        // Seems like Teensy halfkay loader requires clearing WDRF and disabling watchdog.
        MCUSR &= ~(1<<WDRF);
    10a4:	84 b7       	in	r24, 0x34	; 52
    10a6:	87 7f       	andi	r24, 0xF7	; 247
    10a8:	84 bf       	out	0x34, r24	; 52
        wdt_disable();
    10aa:	88 e1       	ldi	r24, 0x18	; 24
    10ac:	0f b6       	in	r0, 0x3f	; 63
    10ae:	f8 94       	cli
    10b0:	80 93 60 00 	sts	0x0060, r24
    10b4:	10 92 60 00 	sts	0x0060, r1
    10b8:	0f be       	out	0x3f, r0	; 63

        // This is compled into 'icall', address should be in word unit, not byte.
        ((void (*)(void))(BOOTLOADER_START/2))();
    10ba:	e0 e0       	ldi	r30, 0x00	; 0
    10bc:	f8 e3       	ldi	r31, 0x38	; 56
    10be:	09 95       	icall

000010c0 <__do_copy_data>:
    10c0:	11 e0       	ldi	r17, 0x01	; 1
    10c2:	a0 e0       	ldi	r26, 0x00	; 0
    10c4:	b1 e0       	ldi	r27, 0x01	; 1
    10c6:	ea ee       	ldi	r30, 0xEA	; 234
    10c8:	fb e5       	ldi	r31, 0x5B	; 91
    10ca:	02 c0       	rjmp	.+4      	; 0x10d0 <__do_copy_data+0x10>
    10cc:	05 90       	lpm	r0, Z+
    10ce:	0d 92       	st	X+, r0
    10d0:	a8 33       	cpi	r26, 0x38	; 56
    10d2:	b1 07       	cpc	r27, r17
    10d4:	d9 f7       	brne	.-10     	; 0x10cc <__do_copy_data+0xc>

000010d6 <__do_clear_bss>:
    10d6:	11 e0       	ldi	r17, 0x01	; 1
    10d8:	a8 e3       	ldi	r26, 0x38	; 56
    10da:	b1 e0       	ldi	r27, 0x01	; 1
    10dc:	01 c0       	rjmp	.+2      	; 0x10e0 <.do_clear_bss_start>

000010de <.do_clear_bss_loop>:
    10de:	1d 92       	st	X+, r1

000010e0 <.do_clear_bss_start>:
    10e0:	a6 3e       	cpi	r26, 0xE6	; 230
    10e2:	b1 07       	cpc	r27, r17
    10e4:	e1 f7       	brne	.-8      	; 0x10de <.do_clear_bss_loop>
    10e6:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <main>
    10ea:	0c 94 f3 2d 	jmp	0x5be6	; 0x5be6 <_exit>

000010ee <__bad_interrupt>:
    10ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000010f2 <xputc>:
	ldi	r24, 13		;
	rcall	1f		;
	ldi	r24, 10		;/
1:
#endif
	push	ZH
    10f2:	ff 93       	push	r31
	push	ZL
    10f4:	ef 93       	push	r30
	lds	ZL, xfunc_out+0	;Pointer to the registered output function.
    10f6:	e0 91 c5 01 	lds	r30, 0x01C5
	lds	ZH, xfunc_out+1	;/
    10fa:	f0 91 c6 01 	lds	r31, 0x01C6
	sbiw	ZL, 0		;Skip if null
    10fe:	30 97       	sbiw	r30, 0x00	; 0
	breq	2f		;/
    1100:	09 f0       	breq	.+2      	; 0x1104 <xputc+0x12>
	icall
    1102:	09 95       	icall
2:	pop	ZL
    1104:	ef 91       	pop	r30
	pop	ZH
    1106:	ff 91       	pop	r31
	ret
    1108:	08 95       	ret

0000110a <xputs>:
;			);

.func xputs
.global xputs
xputs:
	_MOVW	ZH,ZL, r25,r24	; Z = pointer to rom string
    110a:	fc 01       	movw	r30, r24
1:	_LPMI	r24
    110c:	85 91       	lpm	r24, Z+
	cpi	r24, 0
    110e:	80 30       	cpi	r24, 0x00	; 0
	breq	2f
    1110:	11 f0       	breq	.+4      	; 0x1116 <xputs+0xc>
	rcall	xputc
    1112:	ef df       	rcall	.-34     	; 0x10f2 <xputc>
	rjmp	1b
    1114:	fb cf       	rjmp	.-10     	; 0x110c <xputs+0x2>
2:	ret
    1116:	08 95       	ret

00001118 <xitoa>:

.func xitoa
.global xitoa
xitoa:
				;r25:r22 = value, r20 = base, r18 = digits
	clr	r31		;r31 = stack level
    1118:	ff 27       	eor	r31, r31
	ldi	r30, ' '	;r30 = sign
    111a:	e0 e2       	ldi	r30, 0x20	; 32
	ldi	r19, ' '	;r19 = filler
    111c:	30 e2       	ldi	r19, 0x20	; 32
	sbrs	r20, 7		;When base indicates signd format and the value
    111e:	47 ff       	sbrs	r20, 7
	rjmp	0f		;is minus, add a '-'.
    1120:	0c c0       	rjmp	.+24     	; 0x113a <xitoa+0x22>
	neg	r20		;
    1122:	41 95       	neg	r20
	sbrs	r25, 7		;
    1124:	97 ff       	sbrs	r25, 7
	rjmp	0f		;
    1126:	09 c0       	rjmp	.+18     	; 0x113a <xitoa+0x22>
	ldi	r30, '-'	;
    1128:	ed e2       	ldi	r30, 0x2D	; 45
	com	r22		;
    112a:	60 95       	com	r22
	com	r23		;
    112c:	70 95       	com	r23
	com	r24		;
    112e:	80 95       	com	r24
	com	r25		;
    1130:	90 95       	com	r25
	adc	r22, r1		;
    1132:	61 1d       	adc	r22, r1
	adc	r23, r1		;
    1134:	71 1d       	adc	r23, r1
	adc	r24, r1		;
    1136:	81 1d       	adc	r24, r1
	adc	r25, r1		;/
    1138:	91 1d       	adc	r25, r1
0:	sbrs	r18, 7		;When digits indicates zero filled,
    113a:	27 ff       	sbrs	r18, 7
	rjmp	1f		;filler is '0'.
    113c:	02 c0       	rjmp	.+4      	; 0x1142 <xitoa+0x2a>
	neg	r18		;
    113e:	21 95       	neg	r18
	ldi	r19, '0'	;/
    1140:	30 e3       	ldi	r19, 0x30	; 48
				;----- string conversion loop
1:	ldi	r21, 32		;r26 = r25:r22 % r20
    1142:	50 e2       	ldi	r21, 0x20	; 32
	clr	r26		;r25:r22 /= r20
    1144:	aa 27       	eor	r26, r26
2:	lsl	r22		;
    1146:	66 0f       	add	r22, r22
	rol	r23		;
    1148:	77 1f       	adc	r23, r23
	rol	r24		;
    114a:	88 1f       	adc	r24, r24
	rol	r25		;
    114c:	99 1f       	adc	r25, r25
	rol	r26		;
    114e:	aa 1f       	adc	r26, r26
	cp	r26, r20	;
    1150:	a4 17       	cp	r26, r20
	brcs	3f		;
    1152:	10 f0       	brcs	.+4      	; 0x1158 <xitoa+0x40>
	sub	r26, r20	;
    1154:	a4 1b       	sub	r26, r20
	inc	r22		;
    1156:	63 95       	inc	r22
3:	dec	r21		;
    1158:	5a 95       	dec	r21
	brne	2b		;/
    115a:	a9 f7       	brne	.-22     	; 0x1146 <xitoa+0x2e>
	cpi	r26, 10		;r26 is a numeral digit '0'-'F'
    115c:	aa 30       	cpi	r26, 0x0A	; 10
	brcs	4f		;
    115e:	08 f0       	brcs	.+2      	; 0x1162 <xitoa+0x4a>
	subi	r26, -7		;
    1160:	a9 5f       	subi	r26, 0xF9	; 249
4:	subi	r26, -'0'	;/
    1162:	a0 5d       	subi	r26, 0xD0	; 208
	push	r26		;Stack it
    1164:	af 93       	push	r26
	inc	r31		;/
    1166:	f3 95       	inc	r31
	cp	r22, r1		;Repeat until r25:r22 gets zero
    1168:	61 15       	cp	r22, r1
	cpc	r23, r1		;
    116a:	71 05       	cpc	r23, r1
	cpc	r24, r1		;
    116c:	81 05       	cpc	r24, r1
	cpc	r25, r1		;
    116e:	91 05       	cpc	r25, r1
	brne	1b		;/
    1170:	41 f7       	brne	.-48     	; 0x1142 <xitoa+0x2a>

	cpi	r30, '-'	;Minus sign if needed
    1172:	ed 32       	cpi	r30, 0x2D	; 45
	brne	5f		;
    1174:	11 f4       	brne	.+4      	; 0x117a <xitoa+0x62>
	push	r30		;
    1176:	ef 93       	push	r30
	inc	r31		;/
    1178:	f3 95       	inc	r31
5:	cp	r31, r18	;Filler
    117a:	f2 17       	cp	r31, r18
	brcc	6f		;
    117c:	18 f4       	brcc	.+6      	; 0x1184 <xitoa+0x6c>
	push	r19		;
    117e:	3f 93       	push	r19
	inc	r31		;
    1180:	f3 95       	inc	r31
	rjmp	5b		;/
    1182:	fb cf       	rjmp	.-10     	; 0x117a <xitoa+0x62>

6:	pop	r24		;Flush stacked digits and exit
    1184:	8f 91       	pop	r24
	rcall	xputc		;
    1186:	b5 df       	rcall	.-150    	; 0x10f2 <xputc>
	dec	r31		;
    1188:	fa 95       	dec	r31
	brne	6b		;/
    118a:	e1 f7       	brne	.-8      	; 0x1184 <xitoa+0x6c>

	ret
    118c:	08 95       	ret

0000118e <xvprintf>:

#if USE_XPRINTF

.func xvprintf
xvprintf:
	ld	ZL, Y+		;Z = pointer to format string
    118e:	e9 91       	ld	r30, Y+
	ld	ZH, Y+		;/
    1190:	f9 91       	ld	r31, Y+

0:	_LPMI	r24		;Get a format char
    1192:	85 91       	lpm	r24, Z+
	cpi	r24, 0		;End of format string?
    1194:	80 30       	cpi	r24, 0x00	; 0
	breq	90f		;/
    1196:	21 f0       	breq	.+8      	; 0x11a0 <xvprintf+0x12>
	cpi	r24, '%'	;Is format?
    1198:	85 32       	cpi	r24, 0x25	; 37
	breq	20f		;/
    119a:	19 f0       	breq	.+6      	; 0x11a2 <xvprintf+0x14>
1:	rcall	xputc		;Put a normal character
    119c:	aa df       	rcall	.-172    	; 0x10f2 <xputc>
	rjmp	0b		;/
    119e:	f9 cf       	rjmp	.-14     	; 0x1192 <xvprintf+0x4>
90:	ret
    11a0:	08 95       	ret

20:	ldi	r18, 0		;r18: digits
    11a2:	20 e0       	ldi	r18, 0x00	; 0
	clt			;T: filler
    11a4:	e8 94       	clt
	_LPMI	r21		;Get flags
    11a6:	55 91       	lpm	r21, Z+
	cpi	r21, '%'	;Is a %?
    11a8:	55 32       	cpi	r21, 0x25	; 37
	breq	1b		;/
    11aa:	c1 f3       	breq	.-16     	; 0x119c <xvprintf+0xe>
	cpi	r21, '0'	;Zero filled?
    11ac:	50 33       	cpi	r21, 0x30	; 48
	brne	23f		;
    11ae:	11 f4       	brne	.+4      	; 0x11b4 <xvprintf+0x26>
	set			;/
    11b0:	68 94       	set
22:	_LPMI	r21		;Get width
    11b2:	55 91       	lpm	r21, Z+
23:	cpi	r21, '9'+1	;
    11b4:	5a 33       	cpi	r21, 0x3A	; 58
	brcc	24f		;
    11b6:	48 f4       	brcc	.+18     	; 0x11ca <xvprintf+0x3c>
	subi	r21, '0'	;
    11b8:	50 53       	subi	r21, 0x30	; 48
	brcs	90b		;
    11ba:	90 f3       	brcs	.-28     	; 0x11a0 <xvprintf+0x12>
	lsl	r18		;
    11bc:	22 0f       	add	r18, r18
	mov	r0, r18		;
    11be:	02 2e       	mov	r0, r18
	lsl	r18		;
    11c0:	22 0f       	add	r18, r18
	lsl	r18		;
    11c2:	22 0f       	add	r18, r18
	add	r18, r0		;
    11c4:	20 0d       	add	r18, r0
	add	r18, r21	;
    11c6:	25 0f       	add	r18, r21
	rjmp	22b		;/
    11c8:	f4 cf       	rjmp	.-24     	; 0x11b2 <xvprintf+0x24>

24:	brtc	25f		;get value (low word)
    11ca:	0e f4       	brtc	.+2      	; 0x11ce <xvprintf+0x40>
	neg	r18		;
    11cc:	21 95       	neg	r18
25:	ld	r24, Y+		;
    11ce:	89 91       	ld	r24, Y+
	ld	r25, Y+		;/
    11d0:	99 91       	ld	r25, Y+
	cpi	r21, 'c'	;Is type character?
    11d2:	53 36       	cpi	r21, 0x63	; 99
	breq	1b		;/
    11d4:	19 f3       	breq	.-58     	; 0x119c <xvprintf+0xe>
	cpi	r21, 's'	;Is type RAM string?
    11d6:	53 37       	cpi	r21, 0x73	; 115
	breq	50f		;/
    11d8:	29 f1       	breq	.+74     	; 0x1224 <xvprintf+0x96>
	cpi	r21, 'S'	;Is type ROM string?
    11da:	53 35       	cpi	r21, 0x53	; 83
	breq	60f		;/
    11dc:	59 f1       	breq	.+86     	; 0x1234 <xvprintf+0xa6>
	_MOVW	r23,r22,r25,r24	;r25:r22 = value
    11de:	bc 01       	movw	r22, r24
	clr	r24		;
    11e0:	88 27       	eor	r24, r24
	clr	r25		;
    11e2:	99 27       	eor	r25, r25
	clt			;/
    11e4:	e8 94       	clt
	cpi	r21, 'l'	;Is long int?
    11e6:	5c 36       	cpi	r21, 0x6C	; 108
	brne	26f		;
    11e8:	21 f4       	brne	.+8      	; 0x11f2 <xvprintf+0x64>
	ld	r24, Y+		;get value (high word)
    11ea:	89 91       	ld	r24, Y+
	ld	r25, Y+		;
    11ec:	99 91       	ld	r25, Y+
	set			;
    11ee:	68 94       	set
	_LPMI	r21		;/
    11f0:	55 91       	lpm	r21, Z+
26:	cpi	r21, 'd'	;Is type signed decimal?
    11f2:	54 36       	cpi	r21, 0x64	; 100
	brne	27f		;/
    11f4:	39 f4       	brne	.+14     	; 0x1204 <xvprintf+0x76>
	ldi	r20, -10	;
    11f6:	46 ef       	ldi	r20, 0xF6	; 246
	brts	40f		;
    11f8:	7e f0       	brts	.+30     	; 0x1218 <xvprintf+0x8a>
	sbrs	r23, 7		;
    11fa:	77 ff       	sbrs	r23, 7
	rjmp	40f		;
    11fc:	0d c0       	rjmp	.+26     	; 0x1218 <xvprintf+0x8a>
	ldi	r24, -1		;
    11fe:	8f ef       	ldi	r24, 0xFF	; 255
	ldi	r25, -1		;
    1200:	9f ef       	ldi	r25, 0xFF	; 255
	rjmp	40f		;/
    1202:	0a c0       	rjmp	.+20     	; 0x1218 <xvprintf+0x8a>
27:	cpi	r21, 'u'	;Is type unsigned decimal?
    1204:	55 37       	cpi	r21, 0x75	; 117
	ldi	r20, 10		;
    1206:	4a e0       	ldi	r20, 0x0A	; 10
	breq	40f		;/
    1208:	39 f0       	breq	.+14     	; 0x1218 <xvprintf+0x8a>
	cpi	r21, 'X'	;Is type hexdecimal?
    120a:	58 35       	cpi	r21, 0x58	; 88
	ldi	r20, 16		;
    120c:	40 e1       	ldi	r20, 0x10	; 16
	breq	40f		;/
    120e:	21 f0       	breq	.+8      	; 0x1218 <xvprintf+0x8a>
	cpi	r21, 'b'	;Is type binary?
    1210:	52 36       	cpi	r21, 0x62	; 98
	ldi	r20, 2		;
    1212:	42 e0       	ldi	r20, 0x02	; 2
	breq	40f		;/
    1214:	09 f0       	breq	.+2      	; 0x1218 <xvprintf+0x8a>
	ret			;abort
    1216:	08 95       	ret
40:	push	ZH		;Output the value
    1218:	ff 93       	push	r31
	push	ZL		;
    121a:	ef 93       	push	r30
	rcall	xitoa		;
    121c:	7d df       	rcall	.-262    	; 0x1118 <xitoa>
42:	pop	ZL		;
    121e:	ef 91       	pop	r30
	pop	ZH		;
    1220:	ff 91       	pop	r31
	rjmp	0b		;/
    1222:	b7 cf       	rjmp	.-146    	; 0x1192 <xvprintf+0x4>

50:	push	ZH		;Put a string on the RAM
    1224:	ff 93       	push	r31
	push	ZL
    1226:	ef 93       	push	r30
	_MOVW	ZH,ZL, r25,r24
    1228:	fc 01       	movw	r30, r24
51:	ld	r24, Z+
    122a:	81 91       	ld	r24, Z+
	cpi	r24, 0
    122c:	80 30       	cpi	r24, 0x00	; 0
	breq	42b
    122e:	b9 f3       	breq	.-18     	; 0x121e <xvprintf+0x90>
	rcall	xputc
    1230:	60 df       	rcall	.-320    	; 0x10f2 <xputc>
	rjmp	51b
    1232:	fb cf       	rjmp	.-10     	; 0x122a <xvprintf+0x9c>

60:	push	ZH		;Put a string on the ROM
    1234:	ff 93       	push	r31
	push	ZL
    1236:	ef 93       	push	r30
	rcall	xputs
    1238:	68 df       	rcall	.-304    	; 0x110a <xputs>
	rjmp	42b
    123a:	f1 cf       	rjmp	.-30     	; 0x121e <xvprintf+0x90>

0000123c <__xprintf>:


.func __xprintf
.global __xprintf
__xprintf:
	push	YH
    123c:	df 93       	push	r29
	push	YL
    123e:	cf 93       	push	r28
	in	YL, _SFR_IO_ADDR(SPL)
    1240:	cd b7       	in	r28, 0x3d	; 61
#ifdef SPH
	in	YH, _SFR_IO_ADDR(SPH)
    1242:	de b7       	in	r29, 0x3e	; 62
#else
	clr	YH
#endif
	adiw	YL, 5		;Y = pointer to arguments
    1244:	25 96       	adiw	r28, 0x05	; 5
	rcall	xvprintf
    1246:	a3 df       	rcall	.-186    	; 0x118e <xvprintf>
	pop	YL
    1248:	cf 91       	pop	r28
	pop	YH
    124a:	df 91       	pop	r29
	ret
    124c:	08 95       	ret

0000124e <matrix_power_up>:

void keyboard_init(void);
void keyboard_task(void);
void keyboard_set_leds(uint8_t leds);

__attribute__ ((weak)) void matrix_power_up(void) {}
    124e:	08 95       	ret

00001250 <matrix_power_down>:
__attribute__ ((weak)) void matrix_power_down(void) {}
    1250:	08 95       	ret

00001252 <keymap_key_to_keycode>:


/* translates key to keycode */
uint8_t keymap_key_to_keycode(uint8_t layer, keypos_t key)
{
    return pgm_read_byte(&keymaps[(layer)][(key.row)][(key.col)]);
    1252:	9f e0       	ldi	r25, 0x0F	; 15
    1254:	79 9f       	mul	r23, r25
    1256:	f0 01       	movw	r30, r0
    1258:	11 24       	eor	r1, r1
    125a:	9b e4       	ldi	r25, 0x4B	; 75
    125c:	89 9f       	mul	r24, r25
    125e:	e0 0d       	add	r30, r0
    1260:	f1 1d       	adc	r31, r1
    1262:	11 24       	eor	r1, r1
    1264:	e6 0f       	add	r30, r22
    1266:	f1 1d       	adc	r31, r1
    1268:	ee 0f       	add	r30, r30
    126a:	ff 1f       	adc	r31, r31
    126c:	e8 59       	subi	r30, 0x98	; 152
    126e:	fe 4f       	sbci	r31, 0xFE	; 254
    1270:	84 91       	lpm	r24, Z
}
    1272:	08 95       	ret

00001274 <keymap_fn_to_action>:

/* translates Fn keycode to action */
action_t keymap_fn_to_action(uint8_t keycode)
{
    return (action_t){ .code = pgm_read_word(&fn_actions[FN_INDEX(keycode)]) };
    1274:	e8 2f       	mov	r30, r24
    1276:	f0 e0       	ldi	r31, 0x00	; 0
    1278:	ee 0f       	add	r30, r30
    127a:	ff 1f       	adc	r31, r31
    127c:	ea 51       	subi	r30, 0x1A	; 26
    127e:	f0 40       	sbci	r31, 0x00	; 0
}
    1280:	85 91       	lpm	r24, Z+
    1282:	94 91       	lpm	r25, Z
    1284:	08 95       	ret

00001286 <unselect_rows>:
    // Hi-Z(DDR:0, PORT:0) to unselect
    //DDRB  &= ~0b01110000;
    //PORTB &= ~0b01110000;
    //DDRD  &= ~0b10000000;
    //PORTD &= ~0b10000000;
    DDRF &= ~(1<<6 | 1<<5 | 1<<4 | 1<<1 | 1<<0);
    1286:	80 b3       	in	r24, 0x10	; 16
    1288:	8c 78       	andi	r24, 0x8C	; 140
    128a:	80 bb       	out	0x10, r24	; 16
    PORTF |= (1<<6 | 1<<5 | 1<<4 | 1<<1 | 1<<0);
    128c:	81 b3       	in	r24, 0x11	; 17
    128e:	83 67       	ori	r24, 0x73	; 115
    1290:	81 bb       	out	0x11, r24	; 17
    1292:	08 95       	ret

00001294 <matrix_init>:
}

void matrix_init(void)
{
    // initialize row and col
    unselect_rows();
    1294:	0e 94 43 09 	call	0x1286	; 0x1286 <unselect_rows>
 */

static void init_cols(void)
{
  // Input with pull-up(DDR:0, PORT:1)
    DDRF  &= ~(1<<7);
    1298:	87 98       	cbi	0x10, 7	; 16
    PORTF |=  (1<<7);
    129a:	8f 9a       	sbi	0x11, 7	; 17
    DDRB  &= ~(1<<0 | 1<<7 | 1<<6 | 1<<5 | 1<<4 | 1<<3 | 1<<1);
    129c:	84 b1       	in	r24, 0x04	; 4
    129e:	84 70       	andi	r24, 0x04	; 4
    12a0:	84 b9       	out	0x04, r24	; 4
    PORTB |=  (1<<0 | 1<<7 | 1<<6 | 1<<5 | 1<<4 | 1<<3 | 1<<1);
    12a2:	85 b1       	in	r24, 0x05	; 5
    12a4:	8b 6f       	ori	r24, 0xFB	; 251
    12a6:	85 b9       	out	0x05, r24	; 5
    DDRD  &= ~(1<<7 | 1<<3 | 1<<2 | 1<<1 | 1<<0 );
    12a8:	8a b1       	in	r24, 0x0a	; 10
    12aa:	80 77       	andi	r24, 0x70	; 112
    12ac:	8a b9       	out	0x0a, r24	; 10
    PORTD |=  (1<<7 | 1<<4 | 1<<3 | 1<<2 | 1<<1 | 1<<0 );
    12ae:	8b b1       	in	r24, 0x0b	; 11
    12b0:	8f 69       	ori	r24, 0x9F	; 159
    12b2:	8b b9       	out	0x0b, r24	; 11
    DDRC  &= ~(1<<6);
    12b4:	3e 98       	cbi	0x07, 6	; 7
    PORTC |=  (1<<6);
    12b6:	46 9a       	sbi	0x08, 6	; 8
    12b8:	e2 e4       	ldi	r30, 0x42	; 66
    12ba:	f1 e0       	ldi	r31, 0x01	; 1
    12bc:	a8 e3       	ldi	r26, 0x38	; 56
    12be:	b1 e0       	ldi	r27, 0x01	; 1
    unselect_rows();
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
        matrix[i] = 0;
    12c0:	11 92       	st	Z+, r1
    12c2:	11 92       	st	Z+, r1
        matrix_debouncing[i] = 0;
    12c4:	1d 92       	st	X+, r1
    12c6:	1d 92       	st	X+, r1
    // initialize row and col
    unselect_rows();
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	ec 34       	cpi	r30, 0x4C	; 76
    12cc:	f8 07       	cpc	r31, r24
    12ce:	c1 f7       	brne	.-16     	; 0x12c0 <matrix_init+0x2c>
        matrix[i] = 0;
        matrix_debouncing[i] = 0;
    }
}
    12d0:	08 95       	ret

000012d2 <matrix_scan>:

uint8_t matrix_scan(void)
{
    12d2:	2f 92       	push	r2
    12d4:	3f 92       	push	r3
    12d6:	4f 92       	push	r4
    12d8:	5f 92       	push	r5
    12da:	6f 92       	push	r6
    12dc:	7f 92       	push	r7
    12de:	8f 92       	push	r8
    12e0:	9f 92       	push	r9
    12e2:	af 92       	push	r10
    12e4:	bf 92       	push	r11
    12e6:	cf 92       	push	r12
    12e8:	df 92       	push	r13
    12ea:	ef 92       	push	r14
    12ec:	ff 92       	push	r15
    12ee:	0f 93       	push	r16
    12f0:	1f 93       	push	r17
    12f2:	cf 93       	push	r28
    12f4:	df 93       	push	r29
    12f6:	cd b7       	in	r28, 0x3d	; 61
    12f8:	de b7       	in	r29, 0x3e	; 62
    12fa:	2a 97       	sbiw	r28, 0x0a	; 10
    12fc:	0f b6       	in	r0, 0x3f	; 63
    12fe:	f8 94       	cli
    1300:	de bf       	out	0x3e, r29	; 62
    1302:	0f be       	out	0x3f, r0	; 63
    1304:	cd bf       	out	0x3d, r28	; 61
    1306:	08 e3       	ldi	r16, 0x38	; 56
    1308:	11 e0       	ldi	r17, 0x01	; 1
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
    130a:	91 2c       	mov	r9, r1

}

static void select_row(uint8_t row)
{
    switch (row) {
    130c:	22 e0       	ldi	r18, 0x02	; 2
    130e:	92 16       	cp	r9, r18
    1310:	91 f0       	breq	.+36     	; 0x1336 <matrix_scan+0x64>
    1312:	29 15       	cp	r18, r9
    1314:	20 f0       	brcs	.+8      	; 0x131e <matrix_scan+0x4c>
    1316:	31 e0       	ldi	r19, 0x01	; 1
    1318:	93 16       	cp	r9, r19
    131a:	51 f0       	breq	.+20     	; 0x1330 <matrix_scan+0x5e>
    131c:	06 c0       	rjmp	.+12     	; 0x132a <matrix_scan+0x58>
    131e:	43 e0       	ldi	r20, 0x03	; 3
    1320:	94 16       	cp	r9, r20
    1322:	61 f0       	breq	.+24     	; 0x133c <matrix_scan+0x6a>
    1324:	54 e0       	ldi	r21, 0x04	; 4
    1326:	95 16       	cp	r9, r21
    1328:	61 f0       	breq	.+24     	; 0x1342 <matrix_scan+0x70>
        case 0:
            DDRF  |= (1<<0);
    132a:	80 9a       	sbi	0x10, 0	; 16
            PORTF &= ~(1<<0);
    132c:	88 98       	cbi	0x11, 0	; 17
    132e:	0b c0       	rjmp	.+22     	; 0x1346 <matrix_scan+0x74>
            break;
        case 1:
            DDRF  |= (1<<1);
    1330:	81 9a       	sbi	0x10, 1	; 16
            PORTF &= ~(1<<1);
    1332:	89 98       	cbi	0x11, 1	; 17
    1334:	08 c0       	rjmp	.+16     	; 0x1346 <matrix_scan+0x74>
            break;
        case 2:
            DDRF  |= (1<<4);
    1336:	84 9a       	sbi	0x10, 4	; 16
            PORTF &= ~(1<<4);
    1338:	8c 98       	cbi	0x11, 4	; 17
    133a:	05 c0       	rjmp	.+10     	; 0x1346 <matrix_scan+0x74>
            break;
        case 3:
            DDRF  |= (1<<5);
    133c:	85 9a       	sbi	0x10, 5	; 16
            PORTF &= ~(1<<5);
    133e:	8d 98       	cbi	0x11, 5	; 17
    1340:	02 c0       	rjmp	.+4      	; 0x1346 <matrix_scan+0x74>
            break;
	case 4:
	    DDRF  |= (1<<6);
    1342:	86 9a       	sbi	0x10, 6	; 16
	    PORTF &= ~(1<<6);
    1344:	8e 98       	cbi	0x11, 6	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1346:	80 ea       	ldi	r24, 0xA0	; 160
    1348:	8a 95       	dec	r24
    134a:	f1 f7       	brne	.-4      	; 0x1348 <matrix_scan+0x76>

}

static matrix_row_t read_cols(void)
{
    return (PINF&(1<<7) ? 0 : (1<<14)) |
    134c:	4f b1       	in	r20, 0x0f	; 15
    134e:	55 27       	eor	r21, r21
    1350:	47 fd       	sbrc	r20, 7
    1352:	50 95       	com	r21
    1354:	40 95       	com	r20
    1356:	50 95       	com	r21
    1358:	44 27       	eor	r20, r20
    135a:	55 0f       	add	r21, r21
    135c:	44 1f       	adc	r20, r20
    135e:	55 27       	eor	r21, r21
    1360:	50 e4       	ldi	r21, 0x40	; 64
    1362:	45 9f       	mul	r20, r21
    1364:	50 2d       	mov	r21, r0
    1366:	44 27       	eor	r20, r20
    1368:	11 24       	eor	r1, r1
           (PINB&(1<<6) ? 0 : (1<<13)) |
    136a:	1e 9b       	sbis	0x03, 6	; 3
    136c:	03 c0       	rjmp	.+6      	; 0x1374 <matrix_scan+0xa2>
    136e:	c1 2c       	mov	r12, r1
    1370:	d1 2c       	mov	r13, r1
    1372:	03 c0       	rjmp	.+6      	; 0x137a <matrix_scan+0xa8>
    1374:	c1 2c       	mov	r12, r1
    1376:	20 e2       	ldi	r18, 0x20	; 32
    1378:	d2 2e       	mov	r13, r18
           (PINB&(1<<5) ? 0 : (1<<12)) |
    137a:	1d 9b       	sbis	0x03, 5	; 3
    137c:	03 c0       	rjmp	.+6      	; 0x1384 <matrix_scan+0xb2>
    137e:	18 86       	std	Y+8, r1	; 0x08
    1380:	1f 82       	std	Y+7, r1	; 0x07
    1382:	04 c0       	rjmp	.+8      	; 0x138c <matrix_scan+0xba>
    1384:	a0 e0       	ldi	r26, 0x00	; 0
    1386:	b0 e1       	ldi	r27, 0x10	; 16
    1388:	b8 87       	std	Y+8, r27	; 0x08
    138a:	af 83       	std	Y+7, r26	; 0x07
           (PINB&(1<<4) ? 0 : (1<<11)) |
    138c:	1c 9b       	sbis	0x03, 4	; 3
    138e:	03 c0       	rjmp	.+6      	; 0x1396 <matrix_scan+0xc4>
    1390:	a1 2c       	mov	r10, r1
    1392:	b1 2c       	mov	r11, r1
    1394:	03 c0       	rjmp	.+6      	; 0x139c <matrix_scan+0xca>
    1396:	a1 2c       	mov	r10, r1
    1398:	98 e0       	ldi	r25, 0x08	; 8
    139a:	b9 2e       	mov	r11, r25
           (PIND&(1<<7) ? 0 : (1<<10)) |
    139c:	29 b1       	in	r18, 0x09	; 9
    139e:	33 27       	eor	r19, r19
    13a0:	27 fd       	sbrc	r18, 7
    13a2:	30 95       	com	r19
    13a4:	20 95       	com	r18
    13a6:	30 95       	com	r19
    13a8:	22 27       	eor	r18, r18
    13aa:	33 0f       	add	r19, r19
    13ac:	22 1f       	adc	r18, r18
    13ae:	33 27       	eor	r19, r19
    13b0:	32 2f       	mov	r19, r18
    13b2:	22 27       	eor	r18, r18
    13b4:	33 0f       	add	r19, r19
    13b6:	33 0f       	add	r19, r19
           (PIND&(1<<4) ? 0 : (1<<9)) |
    13b8:	4c 9b       	sbis	0x09, 4	; 9
    13ba:	03 c0       	rjmp	.+6      	; 0x13c2 <matrix_scan+0xf0>
    13bc:	61 2c       	mov	r6, r1
    13be:	71 2c       	mov	r7, r1
    13c0:	03 c0       	rjmp	.+6      	; 0x13c8 <matrix_scan+0xf6>
    13c2:	61 2c       	mov	r6, r1
    13c4:	a2 e0       	ldi	r26, 0x02	; 2
    13c6:	7a 2e       	mov	r7, r26
           (PINC&(1<<6) ? 0 : (1<<8)) |
    13c8:	36 9b       	sbis	0x06, 6	; 6
    13ca:	03 c0       	rjmp	.+6      	; 0x13d2 <matrix_scan+0x100>
    13cc:	41 2c       	mov	r4, r1
    13ce:	51 2c       	mov	r5, r1
    13d0:	03 c0       	rjmp	.+6      	; 0x13d8 <matrix_scan+0x106>
    13d2:	41 2c       	mov	r4, r1
    13d4:	55 24       	eor	r5, r5
    13d6:	53 94       	inc	r5
           (PIND&(1<<3) ? 0 : (1<<7)) |
    13d8:	4b 9b       	sbis	0x09, 3	; 9
    13da:	03 c0       	rjmp	.+6      	; 0x13e2 <matrix_scan+0x110>
    13dc:	21 2c       	mov	r2, r1
    13de:	31 2c       	mov	r3, r1
    13e0:	03 c0       	rjmp	.+6      	; 0x13e8 <matrix_scan+0x116>
    13e2:	e0 e8       	ldi	r30, 0x80	; 128
    13e4:	2e 2e       	mov	r2, r30
    13e6:	31 2c       	mov	r3, r1
           (PIND&(1<<2) ? 0 : (1<<6)) |
    13e8:	4a 9b       	sbis	0x09, 2	; 9
    13ea:	03 c0       	rjmp	.+6      	; 0x13f2 <matrix_scan+0x120>
    13ec:	1a 82       	std	Y+2, r1	; 0x02
    13ee:	19 82       	std	Y+1, r1	; 0x01
    13f0:	04 c0       	rjmp	.+8      	; 0x13fa <matrix_scan+0x128>
    13f2:	e0 e4       	ldi	r30, 0x40	; 64
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	fa 83       	std	Y+2, r31	; 0x02
    13f8:	e9 83       	std	Y+1, r30	; 0x01
           (PIND&(1<<1) ? 0 : (1<<5)) |
    13fa:	49 9b       	sbis	0x09, 1	; 9
    13fc:	03 c0       	rjmp	.+6      	; 0x1404 <matrix_scan+0x132>
    13fe:	1c 82       	std	Y+4, r1	; 0x04
    1400:	1b 82       	std	Y+3, r1	; 0x03
    1402:	04 c0       	rjmp	.+8      	; 0x140c <matrix_scan+0x13a>
    1404:	80 e2       	ldi	r24, 0x20	; 32
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	9c 83       	std	Y+4, r25	; 0x04
    140a:	8b 83       	std	Y+3, r24	; 0x03
           (PIND&(1<<0) ? 0 : (1<<4)) |
    140c:	48 9b       	sbis	0x09, 0	; 9
    140e:	03 c0       	rjmp	.+6      	; 0x1416 <matrix_scan+0x144>
    1410:	1a 86       	std	Y+10, r1	; 0x0a
    1412:	19 86       	std	Y+9, r1	; 0x09
    1414:	04 c0       	rjmp	.+8      	; 0x141e <matrix_scan+0x14c>
    1416:	a0 e1       	ldi	r26, 0x10	; 16
    1418:	b0 e0       	ldi	r27, 0x00	; 0
    141a:	ba 87       	std	Y+10, r27	; 0x0a
    141c:	a9 87       	std	Y+9, r26	; 0x09
           (PINB&(1<<7) ? 0 : (1<<3)) |
    141e:	83 b1       	in	r24, 0x03	; 3
    1420:	99 27       	eor	r25, r25
    1422:	87 fd       	sbrc	r24, 7
    1424:	90 95       	com	r25
    1426:	80 95       	com	r24
    1428:	90 95       	com	r25
    142a:	88 27       	eor	r24, r24
    142c:	99 0f       	add	r25, r25
    142e:	88 1f       	adc	r24, r24
    1430:	99 27       	eor	r25, r25
    1432:	73 e0       	ldi	r23, 0x03	; 3
    1434:	88 0f       	add	r24, r24
    1436:	99 1f       	adc	r25, r25
    1438:	7a 95       	dec	r23
    143a:	e1 f7       	brne	.-8      	; 0x1434 <matrix_scan+0x162>
           (PINB&(1<<3) ? 0 : (1<<2)) |
    143c:	1b 9b       	sbis	0x03, 3	; 3
    143e:	03 c0       	rjmp	.+6      	; 0x1446 <matrix_scan+0x174>
    1440:	e0 e0       	ldi	r30, 0x00	; 0
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	02 c0       	rjmp	.+4      	; 0x144a <matrix_scan+0x178>
    1446:	e4 e0       	ldi	r30, 0x04	; 4
    1448:	f0 e0       	ldi	r31, 0x00	; 0
           (PINB&(1<<0) ? 0 : (1<<1)) |
    144a:	18 9b       	sbis	0x03, 0	; 3
    144c:	03 c0       	rjmp	.+6      	; 0x1454 <matrix_scan+0x182>
    144e:	60 e0       	ldi	r22, 0x00	; 0
    1450:	70 e0       	ldi	r23, 0x00	; 0
    1452:	02 c0       	rjmp	.+4      	; 0x1458 <matrix_scan+0x186>
    1454:	62 e0       	ldi	r22, 0x02	; 2
    1456:	70 e0       	ldi	r23, 0x00	; 0
           (PINB&(1<<1) ? 0 : (1<<0));
    1458:	83 b0       	in	r8, 0x03	; 3
    145a:	86 94       	lsr	r8
    145c:	b1 e0       	ldi	r27, 0x01	; 1
    145e:	8b 26       	eor	r8, r27
    1460:	80 fa       	bst	r8, 0
    1462:	ee 24       	eor	r14, r14
    1464:	e0 f8       	bld	r14, 0
    1466:	f1 2c       	mov	r15, r1

}

static matrix_row_t read_cols(void)
{
    return (PINF&(1<<7) ? 0 : (1<<14)) |
    1468:	e4 2a       	or	r14, r20
    146a:	f5 2a       	or	r15, r21
           (PINB&(1<<6) ? 0 : (1<<13)) |
    146c:	ec 28       	or	r14, r12
    146e:	fd 28       	or	r15, r13
           (PINB&(1<<5) ? 0 : (1<<12)) |
    1470:	4f 81       	ldd	r20, Y+7	; 0x07
    1472:	58 85       	ldd	r21, Y+8	; 0x08
    1474:	e4 2a       	or	r14, r20
    1476:	f5 2a       	or	r15, r21
           (PINB&(1<<4) ? 0 : (1<<11)) |
    1478:	ea 28       	or	r14, r10
    147a:	fb 28       	or	r15, r11
           (PIND&(1<<7) ? 0 : (1<<10)) |
    147c:	e2 2a       	or	r14, r18
    147e:	f3 2a       	or	r15, r19
           (PIND&(1<<4) ? 0 : (1<<9)) |
    1480:	e6 28       	or	r14, r6
    1482:	f7 28       	or	r15, r7
           (PINC&(1<<6) ? 0 : (1<<8)) |
    1484:	e4 28       	or	r14, r4
    1486:	f5 28       	or	r15, r5
           (PIND&(1<<3) ? 0 : (1<<7)) |
    1488:	e2 28       	or	r14, r2
    148a:	f3 28       	or	r15, r3
           (PIND&(1<<2) ? 0 : (1<<6)) |
    148c:	a9 81       	ldd	r26, Y+1	; 0x01
    148e:	ba 81       	ldd	r27, Y+2	; 0x02
    1490:	ea 2a       	or	r14, r26
    1492:	fb 2a       	or	r15, r27
           (PIND&(1<<1) ? 0 : (1<<5)) |
    1494:	2b 81       	ldd	r18, Y+3	; 0x03
    1496:	3c 81       	ldd	r19, Y+4	; 0x04
    1498:	e2 2a       	or	r14, r18
    149a:	f3 2a       	or	r15, r19
           (PIND&(1<<0) ? 0 : (1<<4)) |
    149c:	49 85       	ldd	r20, Y+9	; 0x09
    149e:	5a 85       	ldd	r21, Y+10	; 0x0a
    14a0:	e4 2a       	or	r14, r20
    14a2:	f5 2a       	or	r15, r21
           (PINB&(1<<7) ? 0 : (1<<3)) |
    14a4:	e8 2a       	or	r14, r24
    14a6:	f9 2a       	or	r15, r25
           (PINB&(1<<3) ? 0 : (1<<2)) |
    14a8:	ee 2a       	or	r14, r30
    14aa:	ff 2a       	or	r15, r31
           (PINB&(1<<0) ? 0 : (1<<1)) |
    14ac:	e6 2a       	or	r14, r22
    14ae:	f7 2a       	or	r15, r23
{
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
        select_row(i);
        _delay_us(30);  // without this wait read unstable value.
        matrix_row_t cols = read_cols();
        if (matrix_debouncing[i] != cols) {
    14b0:	d8 01       	movw	r26, r16
    14b2:	8d 91       	ld	r24, X+
    14b4:	9c 91       	ld	r25, X
    14b6:	11 97       	sbiw	r26, 0x01	; 1
    14b8:	8e 15       	cp	r24, r14
    14ba:	9f 05       	cpc	r25, r15
    14bc:	59 f1       	breq	.+86     	; 0x1514 <matrix_scan+0x242>
            matrix_debouncing[i] = cols;
    14be:	ed 92       	st	X+, r14
    14c0:	fc 92       	st	X, r15
            if (debouncing) {
    14c2:	80 91 00 01 	lds	r24, 0x0100
    14c6:	88 23       	and	r24, r24
    14c8:	11 f1       	breq	.+68     	; 0x150e <matrix_scan+0x23c>
                debug("bounce!: "); debug_hex(debouncing); debug("\n");
    14ca:	80 91 c3 01 	lds	r24, 0x01C3
    14ce:	80 ff       	sbrs	r24, 0
    14d0:	04 c0       	rjmp	.+8      	; 0x14da <matrix_scan+0x208>
    14d2:	82 ec       	ldi	r24, 0xC2	; 194
    14d4:	92 e0       	ldi	r25, 0x02	; 2
    14d6:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    14da:	80 91 c3 01 	lds	r24, 0x01C3
    14de:	80 ff       	sbrs	r24, 0
    14e0:	0e c0       	rjmp	.+28     	; 0x14fe <matrix_scan+0x22c>
    14e2:	80 91 00 01 	lds	r24, 0x0100
    14e6:	1f 92       	push	r1
    14e8:	8f 93       	push	r24
    14ea:	ad eb       	ldi	r26, 0xBD	; 189
    14ec:	b2 e0       	ldi	r27, 0x02	; 2
    14ee:	bf 93       	push	r27
    14f0:	af 93       	push	r26
    14f2:	0e 94 1e 09 	call	0x123c	; 0x123c <__xprintf>
    14f6:	0f 90       	pop	r0
    14f8:	0f 90       	pop	r0
    14fa:	0f 90       	pop	r0
    14fc:	0f 90       	pop	r0
    14fe:	80 91 c3 01 	lds	r24, 0x01C3
    1502:	80 ff       	sbrs	r24, 0
    1504:	04 c0       	rjmp	.+8      	; 0x150e <matrix_scan+0x23c>
    1506:	8b eb       	ldi	r24, 0xBB	; 187
    1508:	92 e0       	ldi	r25, 0x02	; 2
    150a:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
            }
            debouncing = DEBOUNCE;
    150e:	f5 e0       	ldi	r31, 0x05	; 5
    1510:	f0 93 00 01 	sts	0x0100, r31
        }
        unselect_rows();
    1514:	0e 94 43 09 	call	0x1286	; 0x1286 <unselect_rows>
    }
}

uint8_t matrix_scan(void)
{
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
    1518:	93 94       	inc	r9
    151a:	0e 5f       	subi	r16, 0xFE	; 254
    151c:	1f 4f       	sbci	r17, 0xFF	; 255
    151e:	25 e0       	ldi	r18, 0x05	; 5
    1520:	92 12       	cpse	r9, r18
    1522:	f4 ce       	rjmp	.-536    	; 0x130c <matrix_scan+0x3a>
            debouncing = DEBOUNCE;
        }
        unselect_rows();
    }

    if (debouncing) {
    1524:	80 91 00 01 	lds	r24, 0x0100
    1528:	88 23       	and	r24, r24
    152a:	c1 f0       	breq	.+48     	; 0x155c <matrix_scan+0x28a>
        if (--debouncing) {
    152c:	81 50       	subi	r24, 0x01	; 1
    152e:	80 93 00 01 	sts	0x0100, r24
    1532:	88 23       	and	r24, r24
    1534:	39 f0       	breq	.+14     	; 0x1544 <matrix_scan+0x272>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1536:	8f e9       	ldi	r24, 0x9F	; 159
    1538:	9f e0       	ldi	r25, 0x0F	; 15
    153a:	01 97       	sbiw	r24, 0x01	; 1
    153c:	f1 f7       	brne	.-4      	; 0x153a <matrix_scan+0x268>
    153e:	00 c0       	rjmp	.+0      	; 0x1540 <matrix_scan+0x26e>
    1540:	00 00       	nop
    1542:	0c c0       	rjmp	.+24     	; 0x155c <matrix_scan+0x28a>
    1544:	a2 e4       	ldi	r26, 0x42	; 66
    1546:	b1 e0       	ldi	r27, 0x01	; 1
    1548:	e8 e3       	ldi	r30, 0x38	; 56
    154a:	f1 e0       	ldi	r31, 0x01	; 1
            _delay_ms(1);
        } else {
            for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
                matrix[i] = matrix_debouncing[i];
    154c:	81 91       	ld	r24, Z+
    154e:	91 91       	ld	r25, Z+
    1550:	8d 93       	st	X+, r24
    1552:	9d 93       	st	X+, r25

    if (debouncing) {
        if (--debouncing) {
            _delay_ms(1);
        } else {
            for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
    1554:	91 e0       	ldi	r25, 0x01	; 1
    1556:	e2 34       	cpi	r30, 0x42	; 66
    1558:	f9 07       	cpc	r31, r25
    155a:	c1 f7       	brne	.-16     	; 0x154c <matrix_scan+0x27a>
                matrix[i] = matrix_debouncing[i];
            }
        }
    }

    uint8_t layer = biton32(layer_state);
    155c:	60 91 a8 01 	lds	r22, 0x01A8
    1560:	70 91 a9 01 	lds	r23, 0x01A9
    1564:	80 91 aa 01 	lds	r24, 0x01AA
    1568:	90 91 ab 01 	lds	r25, 0x01AB
    156c:	0e 94 02 20 	call	0x4004	; 0x4004 <biton32>
    switch (layer) {
    1570:	88 23       	and	r24, r24
    1572:	29 f0       	breq	.+10     	; 0x157e <matrix_scan+0x2ac>
    1574:	83 30       	cpi	r24, 0x03	; 3
    1576:	28 f4       	brcc	.+10     	; 0x1582 <matrix_scan+0x2b0>
        case 1:
        case 2:
            DDRC |= (1<<7);
    1578:	3f 9a       	sbi	0x07, 7	; 7
            PORTC |= (1<<7);
    157a:	47 9a       	sbi	0x08, 7	; 8
            break;
    157c:	02 c0       	rjmp	.+4      	; 0x1582 <matrix_scan+0x2b0>
        case 0:
            DDRC &= ~(1<<7);
    157e:	3f 98       	cbi	0x07, 7	; 7
            PORTC &= ~(1<<7);
    1580:	47 98       	cbi	0x08, 7	; 8
            break;
    }

    return 1;
}
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	2a 96       	adiw	r28, 0x0a	; 10
    1586:	0f b6       	in	r0, 0x3f	; 63
    1588:	f8 94       	cli
    158a:	de bf       	out	0x3e, r29	; 62
    158c:	0f be       	out	0x3f, r0	; 63
    158e:	cd bf       	out	0x3d, r28	; 61
    1590:	df 91       	pop	r29
    1592:	cf 91       	pop	r28
    1594:	1f 91       	pop	r17
    1596:	0f 91       	pop	r16
    1598:	ff 90       	pop	r15
    159a:	ef 90       	pop	r14
    159c:	df 90       	pop	r13
    159e:	cf 90       	pop	r12
    15a0:	bf 90       	pop	r11
    15a2:	af 90       	pop	r10
    15a4:	9f 90       	pop	r9
    15a6:	8f 90       	pop	r8
    15a8:	7f 90       	pop	r7
    15aa:	6f 90       	pop	r6
    15ac:	5f 90       	pop	r5
    15ae:	4f 90       	pop	r4
    15b0:	3f 90       	pop	r3
    15b2:	2f 90       	pop	r2
    15b4:	08 95       	ret

000015b6 <matrix_get_row>:
}

inline
matrix_row_t matrix_get_row(uint8_t row)
{
    return matrix[row];
    15b6:	e8 2f       	mov	r30, r24
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	ee 0f       	add	r30, r30
    15bc:	ff 1f       	adc	r31, r31
    15be:	ee 5b       	subi	r30, 0xBE	; 190
    15c0:	fe 4f       	sbci	r31, 0xFE	; 254
}
    15c2:	80 81       	ld	r24, Z
    15c4:	91 81       	ldd	r25, Z+1	; 0x01
    15c6:	08 95       	ret

000015c8 <matrix_print>:

void matrix_print(void)
{
    15c8:	cf 92       	push	r12
    15ca:	df 92       	push	r13
    15cc:	ef 92       	push	r14
    15ce:	ff 92       	push	r15
    15d0:	0f 93       	push	r16
    15d2:	1f 93       	push	r17
    15d4:	cf 93       	push	r28
    15d6:	df 93       	push	r29
    print("\nr/c 0123456789ABCDEF\n");
    15d8:	84 ea       	ldi	r24, 0xA4	; 164
    15da:	92 e0       	ldi	r25, 0x02	; 2
    15dc:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    15e0:	b2 e4       	ldi	r27, 0x42	; 66
    15e2:	eb 2e       	mov	r14, r27
    15e4:	b1 e0       	ldi	r27, 0x01	; 1
    15e6:	fb 2e       	mov	r15, r27
    15e8:	c0 e0       	ldi	r28, 0x00	; 0
    15ea:	d0 e0       	ldi	r29, 0x00	; 0
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        phex(row); print(": ");
    15ec:	1f e9       	ldi	r17, 0x9F	; 159
    15ee:	c1 2e       	mov	r12, r17
    15f0:	12 e0       	ldi	r17, 0x02	; 2
    15f2:	d1 2e       	mov	r13, r17
        pbin_reverse16(matrix_get_row(row));
    15f4:	06 e9       	ldi	r16, 0x96	; 150
    15f6:	12 e0       	ldi	r17, 0x02	; 2

void matrix_print(void)
{
    print("\nr/c 0123456789ABCDEF\n");
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        phex(row); print(": ");
    15f8:	df 93       	push	r29
    15fa:	cf 93       	push	r28
    15fc:	df 92       	push	r13
    15fe:	cf 92       	push	r12
    1600:	0e 94 1e 09 	call	0x123c	; 0x123c <__xprintf>
    1604:	8c e9       	ldi	r24, 0x9C	; 156
    1606:	92 e0       	ldi	r25, 0x02	; 2
    1608:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
        pbin_reverse16(matrix_get_row(row));
    160c:	f7 01       	movw	r30, r14
    160e:	81 91       	ld	r24, Z+
    1610:	91 91       	ld	r25, Z+
    1612:	7f 01       	movw	r14, r30
    1614:	0e 94 67 20 	call	0x40ce	; 0x40ce <bitrev16>
    1618:	9f 93       	push	r25
    161a:	8f 93       	push	r24
    161c:	1f 93       	push	r17
    161e:	0f 93       	push	r16
    1620:	0e 94 1e 09 	call	0x123c	; 0x123c <__xprintf>
        print("\n");
    1624:	84 e9       	ldi	r24, 0x94	; 148
    1626:	92 e0       	ldi	r25, 0x02	; 2
    1628:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    162c:	21 96       	adiw	r28, 0x01	; 1
}

void matrix_print(void)
{
    print("\nr/c 0123456789ABCDEF\n");
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
    162e:	8d b7       	in	r24, 0x3d	; 61
    1630:	9e b7       	in	r25, 0x3e	; 62
    1632:	08 96       	adiw	r24, 0x08	; 8
    1634:	0f b6       	in	r0, 0x3f	; 63
    1636:	f8 94       	cli
    1638:	9e bf       	out	0x3e, r25	; 62
    163a:	0f be       	out	0x3f, r0	; 63
    163c:	8d bf       	out	0x3d, r24	; 61
    163e:	c5 30       	cpi	r28, 0x05	; 5
    1640:	d1 05       	cpc	r29, r1
    1642:	d1 f6       	brne	.-76     	; 0x15f8 <matrix_print+0x30>
        phex(row); print(": ");
        pbin_reverse16(matrix_get_row(row));
        print("\n");
    }
}
    1644:	df 91       	pop	r29
    1646:	cf 91       	pop	r28
    1648:	1f 91       	pop	r17
    164a:	0f 91       	pop	r16
    164c:	ff 90       	pop	r15
    164e:	ef 90       	pop	r14
    1650:	df 90       	pop	r13
    1652:	cf 90       	pop	r12
    1654:	08 95       	ret

00001656 <led_set>:
#include "led.h"


void led_set(uint8_t usb_led)
{
    if (usb_led & (1<<USB_LED_FUNCTION)) {
    1656:	85 ff       	sbrs	r24, 5
    1658:	03 c0       	rjmp	.+6      	; 0x1660 <led_set+0xa>
        // Output high.
        DDRF |= (1<<0);
    165a:	80 9a       	sbi	0x10, 0	; 16
        PORTF |= (1<<0);
    165c:	88 9a       	sbi	0x11, 0	; 17
    165e:	08 95       	ret
    } else {
        // Output low.
        DDRF &= ~(1<<0);
    1660:	80 98       	cbi	0x10, 0	; 16
        PORTF &= ~(1<<0);
    1662:	88 98       	cbi	0x11, 0	; 17
    1664:	08 95       	ret

00001666 <keyboard_leds>:
 * Host driver 
 ******************************************************************************/
static uint8_t keyboard_leds(void)
{
    return keyboard_led_stats;
}
    1666:	80 91 5e 01 	lds	r24, 0x015E
    166a:	08 95       	ret

0000166c <sendchar>:
{
    // Not wait once timeouted.
    // Because sendchar() is called so many times, waiting each call causes big lag.
    static bool timeouted = false;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    166c:	90 91 dd 01 	lds	r25, 0x01DD
    1670:	94 30       	cpi	r25, 0x04	; 4
    1672:	09 f0       	breq	.+2      	; 0x1676 <sendchar+0xa>
    1674:	4d c0       	rjmp	.+154    	; 0x1710 <sendchar+0xa4>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1676:	90 91 e9 00 	lds	r25, 0x00E9
    167a:	9f 70       	andi	r25, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    167c:	20 91 ec 00 	lds	r18, 0x00EC
    1680:	20 ff       	sbrs	r18, 0
    1682:	02 c0       	rjmp	.+4      	; 0x1688 <sendchar+0x1c>
    1684:	20 e8       	ldi	r18, 0x80	; 128
    1686:	01 c0       	rjmp	.+2      	; 0x168a <sendchar+0x1e>
    1688:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    168a:	29 2b       	or	r18, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    168c:	94 e0       	ldi	r25, 0x04	; 4
    168e:	90 93 e9 00 	sts	0x00E9, r25
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1692:	90 91 eb 00 	lds	r25, 0x00EB
        return -1;

    uint8_t ep = Endpoint_GetCurrentEndpoint();
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    1696:	90 ff       	sbrs	r25, 0
    1698:	38 c0       	rjmp	.+112    	; 0x170a <sendchar+0x9e>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    169a:	90 91 ee 00 	lds	r25, 0x00EE
    169e:	97 ff       	sbrs	r25, 7
    16a0:	34 c0       	rjmp	.+104    	; 0x170a <sendchar+0x9e>
        goto ERROR_EXIT;
    }

    if (timeouted && !Endpoint_IsReadWriteAllowed()) {
    16a2:	90 91 4d 01 	lds	r25, 0x014D
    16a6:	99 23       	and	r25, r25
    16a8:	21 f0       	breq	.+8      	; 0x16b2 <sendchar+0x46>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    16aa:	90 91 e8 00 	lds	r25, 0x00E8
    16ae:	95 ff       	sbrs	r25, 5
    16b0:	2c c0       	rjmp	.+88     	; 0x170a <sendchar+0x9e>
        goto ERROR_EXIT;
    }

    timeouted = false;
    16b2:	10 92 4d 01 	sts	0x014D, r1

    uint8_t timeout = SEND_TIMEOUT;
    while (!Endpoint_IsReadWriteAllowed()) {
    16b6:	96 e0       	ldi	r25, 0x06	; 6
    16b8:	30 91 e8 00 	lds	r19, 0x00E8
    16bc:	35 fd       	sbrc	r19, 5
    16be:	15 c0       	rjmp	.+42     	; 0x16ea <sendchar+0x7e>
        if (USB_DeviceState != DEVICE_STATE_Configured) {
    16c0:	30 91 dd 01 	lds	r19, 0x01DD
    16c4:	34 30       	cpi	r19, 0x04	; 4
    16c6:	09 f5       	brne	.+66     	; 0x170a <sendchar+0x9e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    16c8:	30 91 eb 00 	lds	r19, 0x00EB
            goto ERROR_EXIT;
        }
        if (Endpoint_IsStalled()) {
    16cc:	35 fd       	sbrc	r19, 5
    16ce:	1d c0       	rjmp	.+58     	; 0x170a <sendchar+0x9e>
    16d0:	91 50       	subi	r25, 0x01	; 1
            goto ERROR_EXIT;
        }
        if (!(timeout--)) {
    16d2:	21 f4       	brne	.+8      	; 0x16dc <sendchar+0x70>
            timeouted = true;
    16d4:	81 e0       	ldi	r24, 0x01	; 1
    16d6:	80 93 4d 01 	sts	0x014D, r24
            goto ERROR_EXIT;
    16da:	17 c0       	rjmp	.+46     	; 0x170a <sendchar+0x9e>
    16dc:	ef e9       	ldi	r30, 0x9F	; 159
    16de:	ff e0       	ldi	r31, 0x0F	; 15
    16e0:	31 97       	sbiw	r30, 0x01	; 1
    16e2:	f1 f7       	brne	.-4      	; 0x16e0 <sendchar+0x74>
    16e4:	00 c0       	rjmp	.+0      	; 0x16e6 <sendchar+0x7a>
    16e6:	00 00       	nop
    16e8:	e7 cf       	rjmp	.-50     	; 0x16b8 <sendchar+0x4c>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    16ea:	80 93 f1 00 	sts	0x00F1, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    16ee:	80 91 e8 00 	lds	r24, 0x00E8
    }

    Endpoint_Write_8(c);

    // send when bank is full
    if (!Endpoint_IsReadWriteAllowed())
    16f2:	85 fd       	sbrc	r24, 5
    16f4:	05 c0       	rjmp	.+10     	; 0x1700 <sendchar+0x94>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    16f6:	80 91 e8 00 	lds	r24, 0x00E8
    16fa:	8e 77       	andi	r24, 0x7E	; 126
    16fc:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1700:	2f 70       	andi	r18, 0x0F	; 15
    1702:	20 93 e9 00 	sts	0x00E9, r18
        Endpoint_ClearIN();

    Endpoint_SelectEndpoint(ep);
    return 0;
    1706:	80 e0       	ldi	r24, 0x00	; 0
    1708:	08 95       	ret
    170a:	2f 70       	andi	r18, 0x0F	; 15
    170c:	20 93 e9 00 	sts	0x00E9, r18
    // Not wait once timeouted.
    // Because sendchar() is called so many times, waiting each call causes big lag.
    static bool timeouted = false;

    if (USB_DeviceState != DEVICE_STATE_Configured)
        return -1;
    1710:	8f ef       	ldi	r24, 0xFF	; 255
    Endpoint_SelectEndpoint(ep);
    return 0;
ERROR_EXIT:
    Endpoint_SelectEndpoint(ep);
    return -1;
}
    1712:	08 95       	ret

00001714 <send_consumer>:
    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    Endpoint_ClearIN();
}

static void send_consumer(uint16_t data)
{
    1714:	cf 93       	push	r28
    1716:	df 93       	push	r29
    1718:	00 d0       	rcall	.+0      	; 0x171a <send_consumer+0x6>
    171a:	1f 92       	push	r1
    171c:	cd b7       	in	r28, 0x3d	; 61
    171e:	de b7       	in	r29, 0x3e	; 62
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    1720:	20 91 dd 01 	lds	r18, 0x01DD
    1724:	24 30       	cpi	r18, 0x04	; 4
    1726:	19 f5       	brne	.+70     	; 0x176e <send_consumer+0x5a>
        return;

    report_extra_t r = {
    1728:	23 e0       	ldi	r18, 0x03	; 3
    172a:	29 83       	std	Y+1, r18	; 0x01
    172c:	9b 83       	std	Y+3, r25	; 0x03
    172e:	8a 83       	std	Y+2, r24	; 0x02
    1730:	20 93 e9 00 	sts	0x00E9, r18
    1734:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1736:	90 91 e8 00 	lds	r25, 0x00E8
    173a:	81 50       	subi	r24, 0x01	; 1
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    173c:	95 fd       	sbrc	r25, 5
    173e:	06 c0       	rjmp	.+12     	; 0x174c <send_consumer+0x38>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1740:	95 ed       	ldi	r25, 0xD5	; 213
    1742:	9a 95       	dec	r25
    1744:	f1 f7       	brne	.-4      	; 0x1742 <send_consumer+0x2e>
    1746:	00 00       	nop
    1748:	81 11       	cpse	r24, r1
    174a:	f5 cf       	rjmp	.-22     	; 0x1736 <send_consumer+0x22>
    174c:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    1750:	85 ff       	sbrs	r24, 5
    1752:	0d c0       	rjmp	.+26     	; 0x176e <send_consumer+0x5a>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    1754:	40 e0       	ldi	r20, 0x00	; 0
    1756:	50 e0       	ldi	r21, 0x00	; 0
    1758:	63 e0       	ldi	r22, 0x03	; 3
    175a:	70 e0       	ldi	r23, 0x00	; 0
    175c:	ce 01       	movw	r24, r28
    175e:	01 96       	adiw	r24, 0x01	; 1
    1760:	0e 94 4e 10 	call	0x209c	; 0x209c <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1764:	80 91 e8 00 	lds	r24, 0x00E8
    1768:	8e 77       	andi	r24, 0x7E	; 126
    176a:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
    176e:	0f 90       	pop	r0
    1770:	0f 90       	pop	r0
    1772:	0f 90       	pop	r0
    1774:	df 91       	pop	r29
    1776:	cf 91       	pop	r28
    1778:	08 95       	ret

0000177a <send_system>:
    Endpoint_ClearIN();
#endif
}

static void send_system(uint16_t data)
{
    177a:	cf 93       	push	r28
    177c:	df 93       	push	r29
    177e:	00 d0       	rcall	.+0      	; 0x1780 <send_system+0x6>
    1780:	1f 92       	push	r1
    1782:	cd b7       	in	r28, 0x3d	; 61
    1784:	de b7       	in	r29, 0x3e	; 62
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    1786:	20 91 dd 01 	lds	r18, 0x01DD
    178a:	24 30       	cpi	r18, 0x04	; 4
    178c:	21 f5       	brne	.+72     	; 0x17d6 <send_system+0x5c>
        return;

    report_extra_t r = {
    178e:	22 e0       	ldi	r18, 0x02	; 2
    1790:	29 83       	std	Y+1, r18	; 0x01
    1792:	9b 83       	std	Y+3, r25	; 0x03
    1794:	8a 83       	std	Y+2, r24	; 0x02
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1796:	83 e0       	ldi	r24, 0x03	; 3
    1798:	80 93 e9 00 	sts	0x00E9, r24
    179c:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    179e:	90 91 e8 00 	lds	r25, 0x00E8
    17a2:	81 50       	subi	r24, 0x01	; 1
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    17a4:	95 fd       	sbrc	r25, 5
    17a6:	06 c0       	rjmp	.+12     	; 0x17b4 <send_system+0x3a>
    17a8:	95 ed       	ldi	r25, 0xD5	; 213
    17aa:	9a 95       	dec	r25
    17ac:	f1 f7       	brne	.-4      	; 0x17aa <send_system+0x30>
    17ae:	00 00       	nop
    17b0:	81 11       	cpse	r24, r1
    17b2:	f5 cf       	rjmp	.-22     	; 0x179e <send_system+0x24>
    17b4:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    17b8:	85 ff       	sbrs	r24, 5
    17ba:	0d c0       	rjmp	.+26     	; 0x17d6 <send_system+0x5c>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    17bc:	40 e0       	ldi	r20, 0x00	; 0
    17be:	50 e0       	ldi	r21, 0x00	; 0
    17c0:	63 e0       	ldi	r22, 0x03	; 3
    17c2:	70 e0       	ldi	r23, 0x00	; 0
    17c4:	ce 01       	movw	r24, r28
    17c6:	01 96       	adiw	r24, 0x01	; 1
    17c8:	0e 94 4e 10 	call	0x209c	; 0x209c <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    17cc:	80 91 e8 00 	lds	r24, 0x00E8
    17d0:	8e 77       	andi	r24, 0x7E	; 126
    17d2:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
    17d6:	0f 90       	pop	r0
    17d8:	0f 90       	pop	r0
    17da:	0f 90       	pop	r0
    17dc:	df 91       	pop	r29
    17de:	cf 91       	pop	r28
    17e0:	08 95       	ret

000017e2 <send_mouse>:
static void send_mouse(report_mouse_t *report)
{
#ifdef MOUSE_ENABLE
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    17e2:	20 91 dd 01 	lds	r18, 0x01DD
    17e6:	24 30       	cpi	r18, 0x04	; 4
    17e8:	f1 f4       	brne	.+60     	; 0x1826 <send_mouse+0x44>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    17ea:	22 e0       	ldi	r18, 0x02	; 2
    17ec:	20 93 e9 00 	sts	0x00E9, r18
    17f0:	2f ef       	ldi	r18, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    17f2:	30 91 e8 00 	lds	r19, 0x00E8
    17f6:	21 50       	subi	r18, 0x01	; 1

    /* Select the Mouse Report Endpoint */
    Endpoint_SelectEndpoint(MOUSE_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    17f8:	35 fd       	sbrc	r19, 5
    17fa:	06 c0       	rjmp	.+12     	; 0x1808 <send_mouse+0x26>
    17fc:	35 ed       	ldi	r19, 0xD5	; 213
    17fe:	3a 95       	dec	r19
    1800:	f1 f7       	brne	.-4      	; 0x17fe <send_mouse+0x1c>
    1802:	00 00       	nop
    1804:	21 11       	cpse	r18, r1
    1806:	f5 cf       	rjmp	.-22     	; 0x17f2 <send_mouse+0x10>
    1808:	20 91 e8 00 	lds	r18, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    180c:	25 ff       	sbrs	r18, 5
    180e:	0b c0       	rjmp	.+22     	; 0x1826 <send_mouse+0x44>

    /* Write Mouse Report Data */
    Endpoint_Write_Stream_LE(report, sizeof(report_mouse_t), NULL);
    1810:	40 e0       	ldi	r20, 0x00	; 0
    1812:	50 e0       	ldi	r21, 0x00	; 0
    1814:	65 e0       	ldi	r22, 0x05	; 5
    1816:	70 e0       	ldi	r23, 0x00	; 0
    1818:	0e 94 4e 10 	call	0x209c	; 0x209c <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    181c:	80 91 e8 00 	lds	r24, 0x00E8
    1820:	8e 77       	andi	r24, 0x7E	; 126
    1822:	80 93 e8 00 	sts	0x00E8, r24
    1826:	08 95       	ret

00001828 <send_keyboard>:
{
    return keyboard_led_stats;
}

static void send_keyboard(report_keyboard_t *report)
{
    1828:	cf 93       	push	r28
    182a:	df 93       	push	r29
    182c:	ec 01       	movw	r28, r24
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    182e:	80 91 dd 01 	lds	r24, 0x01DD
    1832:	84 30       	cpi	r24, 0x04	; 4
    1834:	09 f0       	breq	.+2      	; 0x1838 <send_keyboard+0x10>
    1836:	43 c0       	rjmp	.+134    	; 0x18be <send_keyboard+0x96>
        return;

    /* Select the Keyboard Report Endpoint */
#ifdef NKRO_ENABLE
    if (keyboard_nkro) {
    1838:	80 91 0c 01 	lds	r24, 0x010C
    183c:	88 23       	and	r24, r24
    183e:	c1 f0       	breq	.+48     	; 0x1870 <send_keyboard+0x48>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1840:	85 e0       	ldi	r24, 0x05	; 5
    1842:	80 93 e9 00 	sts	0x00E9, r24
    1846:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1848:	90 91 e8 00 	lds	r25, 0x00E8
    184c:	81 50       	subi	r24, 0x01	; 1
        /* Report protocol - NKRO */
        Endpoint_SelectEndpoint(NKRO_IN_EPNUM);

        /* Check if write ready for a polling interval around 1ms */
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(4);
    184e:	95 fd       	sbrc	r25, 5
    1850:	06 c0       	rjmp	.+12     	; 0x185e <send_keyboard+0x36>
    1852:	95 e1       	ldi	r25, 0x15	; 21
    1854:	9a 95       	dec	r25
    1856:	f1 f7       	brne	.-4      	; 0x1854 <send_keyboard+0x2c>
    1858:	00 00       	nop
    185a:	81 11       	cpse	r24, r1
    185c:	f5 cf       	rjmp	.-22     	; 0x1848 <send_keyboard+0x20>
    185e:	80 91 e8 00 	lds	r24, 0x00E8
        if (!Endpoint_IsReadWriteAllowed()) return;
    1862:	85 ff       	sbrs	r24, 5
    1864:	2c c0       	rjmp	.+88     	; 0x18be <send_keyboard+0x96>

        /* Write Keyboard Report Data */
        Endpoint_Write_Stream_LE(report, NKRO_EPSIZE, NULL);
    1866:	40 e0       	ldi	r20, 0x00	; 0
    1868:	50 e0       	ldi	r21, 0x00	; 0
    186a:	60 e1       	ldi	r22, 0x10	; 16
    186c:	70 e0       	ldi	r23, 0x00	; 0
    186e:	17 c0       	rjmp	.+46     	; 0x189e <send_keyboard+0x76>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1870:	81 e0       	ldi	r24, 0x01	; 1
    1872:	80 93 e9 00 	sts	0x00E9, r24
    1876:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1878:	90 91 e8 00 	lds	r25, 0x00E8
    187c:	81 50       	subi	r24, 0x01	; 1
    {
        /* Boot protocol */
        Endpoint_SelectEndpoint(KEYBOARD_IN_EPNUM);

        /* Check if write ready for a polling interval around 10ms */
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    187e:	95 fd       	sbrc	r25, 5
    1880:	06 c0       	rjmp	.+12     	; 0x188e <send_keyboard+0x66>
    1882:	95 ed       	ldi	r25, 0xD5	; 213
    1884:	9a 95       	dec	r25
    1886:	f1 f7       	brne	.-4      	; 0x1884 <send_keyboard+0x5c>
    1888:	00 00       	nop
    188a:	81 11       	cpse	r24, r1
    188c:	f5 cf       	rjmp	.-22     	; 0x1878 <send_keyboard+0x50>
    188e:	80 91 e8 00 	lds	r24, 0x00E8
        if (!Endpoint_IsReadWriteAllowed()) return;
    1892:	85 ff       	sbrs	r24, 5
    1894:	14 c0       	rjmp	.+40     	; 0x18be <send_keyboard+0x96>

        /* Write Keyboard Report Data */
        Endpoint_Write_Stream_LE(report, KEYBOARD_EPSIZE, NULL);
    1896:	40 e0       	ldi	r20, 0x00	; 0
    1898:	50 e0       	ldi	r21, 0x00	; 0
    189a:	68 e0       	ldi	r22, 0x08	; 8
    189c:	70 e0       	ldi	r23, 0x00	; 0
    189e:	ce 01       	movw	r24, r28
    18a0:	0e 94 4e 10 	call	0x209c	; 0x209c <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    18a4:	80 91 e8 00 	lds	r24, 0x00E8
    18a8:	8e 77       	andi	r24, 0x7E	; 126
    18aa:	80 93 e8 00 	sts	0x00E8, r24
    }

    /* Finalize the stream transfer to send the last packet */
    Endpoint_ClearIN();

    keyboard_report_sent = *report;
    18ae:	80 e1       	ldi	r24, 0x10	; 16
    18b0:	fe 01       	movw	r30, r28
    18b2:	ae e4       	ldi	r26, 0x4E	; 78
    18b4:	b1 e0       	ldi	r27, 0x01	; 1
    18b6:	01 90       	ld	r0, Z+
    18b8:	0d 92       	st	X+, r0
    18ba:	8a 95       	dec	r24
    18bc:	e1 f7       	brne	.-8      	; 0x18b6 <send_keyboard+0x8e>
}
    18be:	df 91       	pop	r29
    18c0:	cf 91       	pop	r28
    18c2:	08 95       	ret

000018c4 <EVENT_USB_Device_Connect>:
 * 2) EVENT_USB_Device_Reset
 * 3) EVENT_USB_Device_Wake
*/
void EVENT_USB_Device_Connect(void)
{
    print("[C]");
    18c4:	82 e0       	ldi	r24, 0x02	; 2
    18c6:	93 e0       	ldi	r25, 0x03	; 3
    18c8:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    /* For battery powered device */
    if (!USB_IsInitialized) {
    18cc:	80 91 dc 01 	lds	r24, 0x01DC
    18d0:	81 11       	cpse	r24, r1
    18d2:	09 c0       	rjmp	.+18     	; 0x18e6 <EVENT_USB_Device_Connect+0x22>
        USB_Disable();
    18d4:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <USB_Disable>
        USB_Init();
    18d8:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <USB_Init>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
    18dc:	80 91 e2 00 	lds	r24, 0x00E2
    18e0:	84 60       	ori	r24, 0x04	; 4
    18e2:	80 93 e2 00 	sts	0x00E2, r24
    18e6:	08 95       	ret

000018e8 <EVENT_USB_Device_Disconnect>:
    }
}

void EVENT_USB_Device_Disconnect(void)
{
    print("[D]");
    18e8:	8e ef       	ldi	r24, 0xFE	; 254
    18ea:	92 e0       	ldi	r25, 0x02	; 2
    18ec:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    /* For battery powered device */
    USB_IsInitialized = false;
    18f0:	10 92 dc 01 	sts	0x01DC, r1
    18f4:	08 95       	ret

000018f6 <EVENT_USB_Device_Reset>:
*/
}

void EVENT_USB_Device_Reset(void)
{
    print("[R]");
    18f6:	8a ef       	ldi	r24, 0xFA	; 250
    18f8:	92 e0       	ldi	r25, 0x02	; 2
    18fa:	0c 94 85 08 	jmp	0x110a	; 0x110a <xputs>

000018fe <EVENT_USB_Device_Suspend>:
}

void EVENT_USB_Device_Suspend()
{
    print("[S]");
    18fe:	86 ef       	ldi	r24, 0xF6	; 246
    1900:	92 e0       	ldi	r25, 0x02	; 2
    1902:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    matrix_power_down();
    1906:	0c 94 28 09 	jmp	0x1250	; 0x1250 <matrix_power_down>

0000190a <EVENT_USB_Device_WakeUp>:
#endif
}

void EVENT_USB_Device_WakeUp()
{
    print("[W]");
    190a:	82 ef       	ldi	r24, 0xF2	; 242
    190c:	92 e0       	ldi	r25, 0x02	; 2
    190e:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    suspend_wakeup_init();
    1912:	0c 94 bc 20 	jmp	0x4178	; 0x4178 <suspend_wakeup_init>

00001916 <EVENT_USB_Device_StartOfFrame>:
 ******************************************************************************/
#ifdef CONSOLE_ENABLE
static void Console_Task(void)
{
    /* Device must be connected and configured for the task to run */
    if (USB_DeviceState != DEVICE_STATE_Configured)
    1916:	80 91 dd 01 	lds	r24, 0x01DD
    191a:	84 30       	cpi	r24, 0x04	; 4
    191c:	49 f5       	brne	.+82     	; 0x1970 <EVENT_USB_Device_StartOfFrame+0x5a>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    191e:	80 91 e9 00 	lds	r24, 0x00E9
    1922:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1924:	90 91 ec 00 	lds	r25, 0x00EC
    1928:	90 ff       	sbrs	r25, 0
    192a:	02 c0       	rjmp	.+4      	; 0x1930 <EVENT_USB_Device_StartOfFrame+0x1a>
    192c:	90 e8       	ldi	r25, 0x80	; 128
    192e:	01 c0       	rjmp	.+2      	; 0x1932 <EVENT_USB_Device_StartOfFrame+0x1c>
    1930:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1932:	98 2b       	or	r25, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1934:	84 e0       	ldi	r24, 0x04	; 4
    1936:	80 93 e9 00 	sts	0x00E9, r24
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    193a:	80 91 eb 00 	lds	r24, 0x00EB
    }
#endif

    /* IN packet */
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    193e:	80 ff       	sbrs	r24, 0
    1940:	14 c0       	rjmp	.+40     	; 0x196a <EVENT_USB_Device_StartOfFrame+0x54>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1942:	80 91 ee 00 	lds	r24, 0x00EE
    1946:	87 ff       	sbrs	r24, 7
    1948:	10 c0       	rjmp	.+32     	; 0x196a <EVENT_USB_Device_StartOfFrame+0x54>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    194a:	80 91 e8 00 	lds	r24, 0x00E8
        Endpoint_SelectEndpoint(ep);
        return;
    }

    // fill empty bank
    while (Endpoint_IsReadWriteAllowed())
    194e:	85 ff       	sbrs	r24, 5
    1950:	03 c0       	rjmp	.+6      	; 0x1958 <EVENT_USB_Device_StartOfFrame+0x42>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1952:	10 92 f1 00 	sts	0x00F1, r1
    1956:	f9 cf       	rjmp	.-14     	; 0x194a <EVENT_USB_Device_StartOfFrame+0x34>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1958:	80 91 e8 00 	lds	r24, 0x00E8
        Endpoint_Write_8(0);

    // flash senchar packet
    if (Endpoint_IsINReady()) {
    195c:	80 ff       	sbrs	r24, 0
    195e:	05 c0       	rjmp	.+10     	; 0x196a <EVENT_USB_Device_StartOfFrame+0x54>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1960:	80 91 e8 00 	lds	r24, 0x00E8
    1964:	8e 77       	andi	r24, 0x7E	; 126
    1966:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    196a:	9f 70       	andi	r25, 0x0F	; 15
    196c:	90 93 e9 00 	sts	0x00E9, r25
    1970:	08 95       	ret

00001972 <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
    1972:	42 e0       	ldi	r20, 0x02	; 2
    1974:	61 ec       	ldi	r22, 0xC1	; 193
    1976:	81 e0       	ldi	r24, 0x01	; 1
    1978:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <Endpoint_ConfigureEndpoint_Prv>
    197c:	42 e0       	ldi	r20, 0x02	; 2
    197e:	61 ec       	ldi	r22, 0xC1	; 193
    1980:	82 e0       	ldi	r24, 0x02	; 2
    1982:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <Endpoint_ConfigureEndpoint_Prv>
    1986:	42 e0       	ldi	r20, 0x02	; 2
    1988:	61 ec       	ldi	r22, 0xC1	; 193
    198a:	83 e0       	ldi	r24, 0x03	; 3
    198c:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <Endpoint_ConfigureEndpoint_Prv>
    1990:	46 e2       	ldi	r20, 0x26	; 38
    1992:	61 ec       	ldi	r22, 0xC1	; 193
    1994:	84 e0       	ldi	r24, 0x04	; 4
    1996:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <Endpoint_ConfigureEndpoint_Prv>
    199a:	42 e1       	ldi	r20, 0x12	; 18
    199c:	61 ec       	ldi	r22, 0xC1	; 193
    199e:	85 e0       	ldi	r24, 0x05	; 5
    19a0:	0c 94 46 0e 	jmp	0x1c8c	; 0x1c8c <Endpoint_ConfigureEndpoint_Prv>

000019a4 <EVENT_USB_Device_ControlRequest>:
{
    uint8_t* ReportData = NULL;
    uint8_t  ReportSize = 0;

    /* Handle HID Class specific requests */
    switch (USB_ControlRequest.bRequest)
    19a4:	80 91 df 01 	lds	r24, 0x01DF
    19a8:	83 30       	cpi	r24, 0x03	; 3
    19aa:	09 f4       	brne	.+2      	; 0x19ae <EVENT_USB_Device_ControlRequest+0xa>
    19ac:	55 c0       	rjmp	.+170    	; 0x1a58 <EVENT_USB_Device_ControlRequest+0xb4>
    19ae:	30 f4       	brcc	.+12     	; 0x19bc <EVENT_USB_Device_ControlRequest+0x18>
    19b0:	81 30       	cpi	r24, 0x01	; 1
    19b2:	71 f0       	breq	.+28     	; 0x19d0 <EVENT_USB_Device_ControlRequest+0x2c>
    19b4:	82 30       	cpi	r24, 0x02	; 2
    19b6:	09 f4       	brne	.+2      	; 0x19ba <EVENT_USB_Device_ControlRequest+0x16>
    19b8:	95 c0       	rjmp	.+298    	; 0x1ae4 <EVENT_USB_Device_ControlRequest+0x140>
    19ba:	08 95       	ret
    19bc:	8a 30       	cpi	r24, 0x0A	; 10
    19be:	09 f4       	brne	.+2      	; 0x19c2 <EVENT_USB_Device_ControlRequest+0x1e>
    19c0:	81 c0       	rjmp	.+258    	; 0x1ac4 <EVENT_USB_Device_ControlRequest+0x120>
    19c2:	8b 30       	cpi	r24, 0x0B	; 11
    19c4:	09 f4       	brne	.+2      	; 0x19c8 <EVENT_USB_Device_ControlRequest+0x24>
    19c6:	60 c0       	rjmp	.+192    	; 0x1a88 <EVENT_USB_Device_ControlRequest+0xe4>
    19c8:	89 30       	cpi	r24, 0x09	; 9
    19ca:	09 f0       	breq	.+2      	; 0x19ce <EVENT_USB_Device_ControlRequest+0x2a>
    19cc:	a3 c0       	rjmp	.+326    	; 0x1b14 <EVENT_USB_Device_ControlRequest+0x170>
    19ce:	20 c0       	rjmp	.+64     	; 0x1a10 <EVENT_USB_Device_ControlRequest+0x6c>
    {
        case HID_REQ_GetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    19d0:	80 91 de 01 	lds	r24, 0x01DE
    19d4:	81 3a       	cpi	r24, 0xA1	; 161
    19d6:	09 f0       	breq	.+2      	; 0x19da <EVENT_USB_Device_ControlRequest+0x36>
    19d8:	9d c0       	rjmp	.+314    	; 0x1b14 <EVENT_USB_Device_ControlRequest+0x170>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    19da:	80 91 e8 00 	lds	r24, 0x00E8
    19de:	87 7f       	andi	r24, 0xF7	; 247
    19e0:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();

                // Interface
                switch (USB_ControlRequest.wIndex) {
    19e4:	80 91 e2 01 	lds	r24, 0x01E2
    19e8:	90 91 e3 01 	lds	r25, 0x01E3
    19ec:	89 2b       	or	r24, r25
    19ee:	21 f0       	breq	.+8      	; 0x19f8 <EVENT_USB_Device_ControlRequest+0x54>
 *  This is fired before passing along unhandled control requests to the library for processing internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
    uint8_t* ReportData = NULL;
    uint8_t  ReportSize = 0;
    19f0:	60 e0       	ldi	r22, 0x00	; 0
/** Event handler for the USB_ControlRequest event.
 *  This is fired before passing along unhandled control requests to the library for processing internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
    uint8_t* ReportData = NULL;
    19f2:	80 e0       	ldi	r24, 0x00	; 0
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	03 c0       	rjmp	.+6      	; 0x19fe <EVENT_USB_Device_ControlRequest+0x5a>
                // Interface
                switch (USB_ControlRequest.wIndex) {
                case KEYBOARD_INTERFACE:
                    // TODO: test/check
                    ReportData = (uint8_t*)&keyboard_report_sent;
                    ReportSize = sizeof(keyboard_report_sent);
    19f8:	60 e1       	ldi	r22, 0x10	; 16

                // Interface
                switch (USB_ControlRequest.wIndex) {
                case KEYBOARD_INTERFACE:
                    // TODO: test/check
                    ReportData = (uint8_t*)&keyboard_report_sent;
    19fa:	8e e4       	ldi	r24, 0x4E	; 78
    19fc:	91 e0       	ldi	r25, 0x01	; 1
                    ReportSize = sizeof(keyboard_report_sent);
                    break;
                }

                /* Write the report data to the control endpoint */
                Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    19fe:	70 e0       	ldi	r23, 0x00	; 0
    1a00:	0e 94 97 10 	call	0x212e	; 0x212e <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1a04:	80 91 e8 00 	lds	r24, 0x00E8
    1a08:	8b 77       	andi	r24, 0x7B	; 123
    1a0a:	80 93 e8 00 	sts	0x00E8, r24
    1a0e:	08 95       	ret
                Endpoint_ClearOUT();
            }

            break;
        case HID_REQ_SetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1a10:	80 91 de 01 	lds	r24, 0x01DE
    1a14:	81 32       	cpi	r24, 0x21	; 33
    1a16:	09 f0       	breq	.+2      	; 0x1a1a <EVENT_USB_Device_ControlRequest+0x76>
    1a18:	7d c0       	rjmp	.+250    	; 0x1b14 <EVENT_USB_Device_ControlRequest+0x170>
            {

                // Interface
                switch (USB_ControlRequest.wIndex) {
    1a1a:	80 91 e2 01 	lds	r24, 0x01E2
    1a1e:	90 91 e3 01 	lds	r25, 0x01E3
    1a22:	00 97       	sbiw	r24, 0x00	; 0
    1a24:	19 f0       	breq	.+6      	; 0x1a2c <EVENT_USB_Device_ControlRequest+0x88>
    1a26:	04 97       	sbiw	r24, 0x04	; 4
    1a28:	09 f0       	breq	.+2      	; 0x1a2c <EVENT_USB_Device_ControlRequest+0x88>
    1a2a:	74 c0       	rjmp	.+232    	; 0x1b14 <EVENT_USB_Device_ControlRequest+0x170>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1a2c:	80 91 e8 00 	lds	r24, 0x00E8
    1a30:	87 7f       	andi	r24, 0xF7	; 247
    1a32:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1a36:	80 91 e8 00 	lds	r24, 0x00E8
#ifdef NKRO_ENABLE
                case NKRO_INTERFACE:
#endif
                    Endpoint_ClearSETUP();

                    while (!(Endpoint_IsOUTReceived())) {
    1a3a:	82 fd       	sbrc	r24, 2
    1a3c:	05 c0       	rjmp	.+10     	; 0x1a48 <EVENT_USB_Device_ControlRequest+0xa4>
                        if (USB_DeviceState == DEVICE_STATE_Unattached)
    1a3e:	80 91 dd 01 	lds	r24, 0x01DD
    1a42:	81 11       	cpse	r24, r1
    1a44:	f8 cf       	rjmp	.-16     	; 0x1a36 <EVENT_USB_Device_ControlRequest+0x92>
    1a46:	66 c0       	rjmp	.+204    	; 0x1b14 <EVENT_USB_Device_ControlRequest+0x170>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1a48:	80 91 f1 00 	lds	r24, 0x00F1
                          return;
                    }
                    keyboard_led_stats = Endpoint_Read_8();
    1a4c:	80 93 5e 01 	sts	0x015E, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1a50:	80 91 e8 00 	lds	r24, 0x00E8
    1a54:	8b 77       	andi	r24, 0x7B	; 123
    1a56:	5a c0       	rjmp	.+180    	; 0x1b0c <EVENT_USB_Device_ControlRequest+0x168>
            }

            break;

        case HID_REQ_GetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1a58:	80 91 de 01 	lds	r24, 0x01DE
    1a5c:	81 3a       	cpi	r24, 0xA1	; 161
    1a5e:	09 f0       	breq	.+2      	; 0x1a62 <EVENT_USB_Device_ControlRequest+0xbe>
    1a60:	59 c0       	rjmp	.+178    	; 0x1b14 <EVENT_USB_Device_ControlRequest+0x170>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    1a62:	80 91 e2 01 	lds	r24, 0x01E2
    1a66:	90 91 e3 01 	lds	r25, 0x01E3
    1a6a:	89 2b       	or	r24, r25
    1a6c:	09 f0       	breq	.+2      	; 0x1a70 <EVENT_USB_Device_ControlRequest+0xcc>
    1a6e:	52 c0       	rjmp	.+164    	; 0x1b14 <EVENT_USB_Device_ControlRequest+0x170>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1a70:	80 91 e8 00 	lds	r24, 0x00E8
    1a74:	87 7f       	andi	r24, 0xF7	; 247
    1a76:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1a7a:	80 91 e8 00 	lds	r24, 0x00E8
                    Endpoint_ClearSETUP();
                    while (!(Endpoint_IsINReady()));
    1a7e:	80 ff       	sbrs	r24, 0
    1a80:	fc cf       	rjmp	.-8      	; 0x1a7a <EVENT_USB_Device_ControlRequest+0xd6>
                    Endpoint_Write_8(keyboard_protocol);
    1a82:	80 91 0b 01 	lds	r24, 0x010B
    1a86:	3d c0       	rjmp	.+122    	; 0x1b02 <EVENT_USB_Device_ControlRequest+0x15e>
                }
            }

            break;
        case HID_REQ_SetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1a88:	80 91 de 01 	lds	r24, 0x01DE
    1a8c:	81 32       	cpi	r24, 0x21	; 33
    1a8e:	09 f0       	breq	.+2      	; 0x1a92 <EVENT_USB_Device_ControlRequest+0xee>
    1a90:	41 c0       	rjmp	.+130    	; 0x1b14 <EVENT_USB_Device_ControlRequest+0x170>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    1a92:	80 91 e2 01 	lds	r24, 0x01E2
    1a96:	90 91 e3 01 	lds	r25, 0x01E3
    1a9a:	89 2b       	or	r24, r25
    1a9c:	d9 f5       	brne	.+118    	; 0x1b14 <EVENT_USB_Device_ControlRequest+0x170>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1a9e:	80 91 e8 00 	lds	r24, 0x00E8
    1aa2:	87 7f       	andi	r24, 0xF7	; 247
    1aa4:	80 93 e8 00 	sts	0x00E8, r24
                    Endpoint_ClearSETUP();
                    Endpoint_ClearStatusStage();
    1aa8:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <Endpoint_ClearStatusStage>

                    keyboard_protocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    1aac:	90 91 e0 01 	lds	r25, 0x01E0
    1ab0:	81 e0       	ldi	r24, 0x01	; 1
    1ab2:	91 11       	cpse	r25, r1
    1ab4:	01 c0       	rjmp	.+2      	; 0x1ab8 <EVENT_USB_Device_ControlRequest+0x114>
    1ab6:	80 e0       	ldi	r24, 0x00	; 0
    1ab8:	80 93 0b 01 	sts	0x010B, r24
#ifdef NKRO_ENABLE
                    keyboard_nkro = !!keyboard_protocol;
    1abc:	80 93 0c 01 	sts	0x010C, r24
#endif
                    clear_keyboard();
    1ac0:	0c 94 85 18 	jmp	0x310a	; 0x310a <clear_keyboard>
                }
            }

            break;
        case HID_REQ_SetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1ac4:	80 91 de 01 	lds	r24, 0x01DE
    1ac8:	81 32       	cpi	r24, 0x21	; 33
    1aca:	21 f5       	brne	.+72     	; 0x1b14 <EVENT_USB_Device_ControlRequest+0x170>
    1acc:	80 91 e8 00 	lds	r24, 0x00E8
    1ad0:	87 7f       	andi	r24, 0xF7	; 247
    1ad2:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();
                Endpoint_ClearStatusStage();
    1ad6:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <Endpoint_ClearStatusStage>

                keyboard_idle = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
    1ada:	80 91 e1 01 	lds	r24, 0x01E1
    1ade:	80 93 4c 01 	sts	0x014C, r24
    1ae2:	08 95       	ret
            }

            break;
        case HID_REQ_GetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1ae4:	80 91 de 01 	lds	r24, 0x01DE
    1ae8:	81 3a       	cpi	r24, 0xA1	; 161
    1aea:	a1 f4       	brne	.+40     	; 0x1b14 <EVENT_USB_Device_ControlRequest+0x170>
    1aec:	80 91 e8 00 	lds	r24, 0x00E8
    1af0:	87 7f       	andi	r24, 0xF7	; 247
    1af2:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1af6:	80 91 e8 00 	lds	r24, 0x00E8
            {
                Endpoint_ClearSETUP();
                while (!(Endpoint_IsINReady()));
    1afa:	80 ff       	sbrs	r24, 0
    1afc:	fc cf       	rjmp	.-8      	; 0x1af6 <EVENT_USB_Device_ControlRequest+0x152>
                Endpoint_Write_8(keyboard_idle);
    1afe:	80 91 4c 01 	lds	r24, 0x014C
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1b02:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1b06:	80 91 e8 00 	lds	r24, 0x00E8
    1b0a:	8e 77       	andi	r24, 0x7E	; 126
    1b0c:	80 93 e8 00 	sts	0x00E8, r24
                Endpoint_ClearIN();
                Endpoint_ClearStatusStage();
    1b10:	0c 94 7b 0e 	jmp	0x1cf6	; 0x1cf6 <Endpoint_ClearStatusStage>
    1b14:	08 95       	ret

00001b16 <main>:
 * main
 ******************************************************************************/
static void SetupHardware(void)
{
    /* Disable watchdog if enabled by bootloader/fuses */
    MCUSR &= ~(1 << WDRF);
    1b16:	84 b7       	in	r24, 0x34	; 52
    1b18:	87 7f       	andi	r24, 0xF7	; 247
    1b1a:	84 bf       	out	0x34, r24	; 52
    wdt_disable();
    1b1c:	88 e1       	ldi	r24, 0x18	; 24
    1b1e:	0f b6       	in	r0, 0x3f	; 63
    1b20:	f8 94       	cli
    1b22:	80 93 60 00 	sts	0x0060, r24
    1b26:	10 92 60 00 	sts	0x0060, r1
    1b2a:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	80 e8       	ldi	r24, 0x80	; 128
    1b30:	0f b6       	in	r0, 0x3f	; 63
    1b32:	f8 94       	cli
    1b34:	80 93 61 00 	sts	0x0061, r24
    1b38:	90 93 61 00 	sts	0x0061, r25
    1b3c:	0f be       	out	0x3f, r0	; 63

    /* Disable clock division */
    clock_prescale_set(clock_div_1);

    // Leonardo needs. Without this USB device is not recognized.
    USB_Disable();
    1b3e:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <USB_Disable>

    USB_Init();
    1b42:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <USB_Init>
    1b46:	80 91 e2 00 	lds	r24, 0x00E2
    1b4a:	84 60       	ori	r24, 0x04	; 4
    1b4c:	80 93 e2 00 	sts	0x00E2, r24

    // for Console_Task
    USB_Device_EnableSOFEvents();
    print_set_sendchar(sendchar);
    1b50:	86 e3       	ldi	r24, 0x36	; 54
    1b52:	9b e0       	ldi	r25, 0x0B	; 11
    1b54:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <print_set_sendchar>

int main(void)  __attribute__ ((weak));
int main(void)
{
    SetupHardware();
    sei();
    1b58:	78 94       	sei

    /* wait for USB startup & debug output */
    while (USB_DeviceState != DEVICE_STATE_Configured) {
    1b5a:	80 91 dd 01 	lds	r24, 0x01DD
    1b5e:	84 30       	cpi	r24, 0x04	; 4
    1b60:	e1 f7       	brne	.-8      	; 0x1b5a <main+0x44>
        ;
#else
        USB_USBTask();
#endif
    }
    print("USB configured.\n");
    1b62:	81 ee       	ldi	r24, 0xE1	; 225
    1b64:	92 e0       	ldi	r25, 0x02	; 2
    1b66:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>

    /* init modules */
    keyboard_init();
    1b6a:	0e 94 33 13 	call	0x2666	; 0x2666 <keyboard_init>
    host_set_driver(&lufa_driver);
    1b6e:	81 e0       	ldi	r24, 0x01	; 1
    1b70:	91 e0       	ldi	r25, 0x01	; 1
    1b72:	0e 94 a1 12 	call	0x2542	; 0x2542 <host_set_driver>
#ifdef SLEEP_LED_ENABLE
    sleep_led_init();
#endif

    print("Keyboard start.\n");
    1b76:	80 ed       	ldi	r24, 0xD0	; 208
    1b78:	92 e0       	ldi	r25, 0x02	; 2
    1b7a:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    while (1) {
        while (USB_DeviceState == DEVICE_STATE_Suspended) {
    1b7e:	80 91 dd 01 	lds	r24, 0x01DD
    1b82:	85 30       	cpi	r24, 0x05	; 5
    1b84:	89 f4       	brne	.+34     	; 0x1ba8 <main+0x92>
            print("[s]");
    1b86:	8c ec       	ldi	r24, 0xCC	; 204
    1b88:	92 e0       	ldi	r25, 0x02	; 2
    1b8a:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
            suspend_power_down();
    1b8e:	0e 94 81 20 	call	0x4102	; 0x4102 <suspend_power_down>
            if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
    1b92:	80 91 db 01 	lds	r24, 0x01DB
    1b96:	88 23       	and	r24, r24
    1b98:	91 f3       	breq	.-28     	; 0x1b7e <main+0x68>
    1b9a:	0e 94 a7 20 	call	0x414e	; 0x414e <suspend_wakeup_condition>
    1b9e:	88 23       	and	r24, r24
    1ba0:	71 f3       	breq	.-36     	; 0x1b7e <main+0x68>
                    USB_Device_SendRemoteWakeup();
    1ba2:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <USB_Device_SendRemoteWakeup>
    1ba6:	eb cf       	rjmp	.-42     	; 0x1b7e <main+0x68>
            }
        }

        keyboard_task();
    1ba8:	0e 94 61 13 	call	0x26c2	; 0x26c2 <keyboard_task>

#if !defined(INTERRUPT_CONTROL_ENDPOINT)
        USB_USBTask();
#endif
    }
    1bac:	e8 cf       	rjmp	.-48     	; 0x1b7e <main+0x68>

00001bae <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
    const uint8_t  DescriptorType   = (wValue >> 8);
    1bae:	29 2f       	mov	r18, r25
    1bb0:	33 27       	eor	r19, r19
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    1bb2:	23 30       	cpi	r18, 0x03	; 3
    1bb4:	31 05       	cpc	r19, r1
    1bb6:	a9 f0       	breq	.+42     	; 0x1be2 <CALLBACK_USB_GetDescriptor+0x34>
    1bb8:	6c f4       	brge	.+26     	; 0x1bd4 <CALLBACK_USB_GetDescriptor+0x26>
    1bba:	21 30       	cpi	r18, 0x01	; 1
    1bbc:	31 05       	cpc	r19, r1
    1bbe:	09 f4       	brne	.+2      	; 0x1bc2 <CALLBACK_USB_GetDescriptor+0x14>
    1bc0:	42 c0       	rjmp	.+132    	; 0x1c46 <CALLBACK_USB_GetDescriptor+0x98>
    1bc2:	22 30       	cpi	r18, 0x02	; 2
    1bc4:	31 05       	cpc	r19, r1
    1bc6:	09 f0       	breq	.+2      	; 0x1bca <CALLBACK_USB_GetDescriptor+0x1c>
    1bc8:	43 c0       	rjmp	.+134    	; 0x1c50 <CALLBACK_USB_GetDescriptor+0xa2>
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
    1bca:	8d e8       	ldi	r24, 0x8D	; 141
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
    1bce:	2a e2       	ldi	r18, 0x2A	; 42
    1bd0:	33 e0       	ldi	r19, 0x03	; 3
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
    1bd2:	42 c0       	rjmp	.+132    	; 0x1c58 <CALLBACK_USB_GetDescriptor+0xaa>
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    1bd4:	21 32       	cpi	r18, 0x21	; 33
    1bd6:	31 05       	cpc	r19, r1
    1bd8:	c9 f0       	breq	.+50     	; 0x1c0c <CALLBACK_USB_GetDescriptor+0x5e>
    1bda:	22 32       	cpi	r18, 0x22	; 34
    1bdc:	31 05       	cpc	r19, r1
    1bde:	19 f1       	breq	.+70     	; 0x1c26 <CALLBACK_USB_GetDescriptor+0x78>
    1be0:	37 c0       	rjmp	.+110    	; 0x1c50 <CALLBACK_USB_GetDescriptor+0xa2>
    1be2:	99 27       	eor	r25, r25
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
        case DTYPE_String:
            switch (DescriptorIndex )
    1be4:	81 30       	cpi	r24, 0x01	; 1
    1be6:	91 05       	cpc	r25, r1
    1be8:	41 f0       	breq	.+16     	; 0x1bfa <CALLBACK_USB_GetDescriptor+0x4c>
    1bea:	82 30       	cpi	r24, 0x02	; 2
    1bec:	91 05       	cpc	r25, r1
    1bee:	41 f0       	breq	.+16     	; 0x1c00 <CALLBACK_USB_GetDescriptor+0x52>
    1bf0:	89 2b       	or	r24, r25
    1bf2:	71 f5       	brne	.+92     	; 0x1c50 <CALLBACK_USB_GetDescriptor+0xa2>
            {
                case 0x00:
                    Address = &LanguageString;
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
    1bf4:	e6 e2       	ldi	r30, 0x26	; 38
    1bf6:	f3 e0       	ldi	r31, 0x03	; 3
    1bf8:	05 c0       	rjmp	.+10     	; 0x1c04 <CALLBACK_USB_GetDescriptor+0x56>
                    break;
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    1bfa:	e2 e1       	ldi	r30, 0x12	; 18
    1bfc:	f3 e0       	ldi	r31, 0x03	; 3
    1bfe:	02 c0       	rjmp	.+4      	; 0x1c04 <CALLBACK_USB_GetDescriptor+0x56>
                    break;
                case 0x02:
                    Address = &ProductString;
                    Size    = pgm_read_byte(&ProductString.Header.Size);
    1c00:	e6 e0       	ldi	r30, 0x06	; 6
    1c02:	f3 e0       	ldi	r31, 0x03	; 3
    1c04:	84 91       	lpm	r24, Z
    1c06:	90 e0       	ldi	r25, 0x00	; 0
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
                    break;
                case 0x02:
                    Address = &ProductString;
    1c08:	9f 01       	movw	r18, r30
                    Size    = pgm_read_byte(&ProductString.Header.Size);
                    break;
    1c0a:	26 c0       	rjmp	.+76     	; 0x1c58 <CALLBACK_USB_GetDescriptor+0xaa>
    1c0c:	65 30       	cpi	r22, 0x05	; 5
    1c0e:	00 f5       	brcc	.+64     	; 0x1c50 <CALLBACK_USB_GetDescriptor+0xa2>
    1c10:	e6 2f       	mov	r30, r22
    1c12:	f0 e0       	ldi	r31, 0x00	; 0
    1c14:	ee 0f       	add	r30, r30
    1c16:	ff 1f       	adc	r31, r31
    1c18:	ec 5d       	subi	r30, 0xDC	; 220
    1c1a:	fe 4f       	sbci	r31, 0xFE	; 254
    1c1c:	20 81       	ld	r18, Z
    1c1e:	31 81       	ldd	r19, Z+1	; 0x01
    1c20:	89 e0       	ldi	r24, 0x09	; 9
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	19 c0       	rjmp	.+50     	; 0x1c58 <CALLBACK_USB_GetDescriptor+0xaa>
    1c26:	65 30       	cpi	r22, 0x05	; 5
    1c28:	98 f4       	brcc	.+38     	; 0x1c50 <CALLBACK_USB_GetDescriptor+0xa2>
    1c2a:	e6 2f       	mov	r30, r22
    1c2c:	f0 e0       	ldi	r31, 0x00	; 0
    1c2e:	df 01       	movw	r26, r30
    1c30:	aa 0f       	add	r26, r26
    1c32:	bb 1f       	adc	r27, r27
    1c34:	a6 5e       	subi	r26, 0xE6	; 230
    1c36:	be 4f       	sbci	r27, 0xFE	; 254
    1c38:	2d 91       	ld	r18, X+
    1c3a:	3c 91       	ld	r19, X
    1c3c:	eb 5e       	subi	r30, 0xEB	; 235
    1c3e:	fe 4f       	sbci	r31, 0xFE	; 254
    1c40:	80 81       	ld	r24, Z
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	09 c0       	rjmp	.+18     	; 0x1c58 <CALLBACK_USB_GetDescriptor+0xaa>

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
    1c46:	82 e1       	ldi	r24, 0x12	; 18
    1c48:	90 e0       	ldi	r25, 0x00	; 0
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
    1c4a:	27 eb       	ldi	r18, 0xB7	; 183
    1c4c:	33 e0       	ldi	r19, 0x03	; 3
    1c4e:	04 c0       	rjmp	.+8      	; 0x1c58 <CALLBACK_USB_GetDescriptor+0xaa>
    1c50:	80 e0       	ldi	r24, 0x00	; 0
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	20 e0       	ldi	r18, 0x00	; 0
    1c56:	30 e0       	ldi	r19, 0x00	; 0
#endif
            }
            break;
    }

    *DescriptorAddress = Address;
    1c58:	fa 01       	movw	r30, r20
    1c5a:	31 83       	std	Z+1, r19	; 0x01
    1c5c:	20 83       	st	Z, r18
    return Size;
}
    1c5e:	08 95       	ret

00001c60 <USB_Device_SendRemoteWakeup>:

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1c60:	80 e1       	ldi	r24, 0x10	; 16
    1c62:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1c64:	82 e1       	ldi	r24, 0x12	; 18
    1c66:	89 bd       	out	0x29, r24	; 41
void USB_Device_SendRemoteWakeup(void)
{
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
    1c68:	09 b4       	in	r0, 0x29	; 41
    1c6a:	00 fe       	sbrs	r0, 0
    1c6c:	fd cf       	rjmp	.-6      	; 0x1c68 <USB_Device_SendRemoteWakeup+0x8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1c6e:	80 91 d8 00 	lds	r24, 0x00D8
    1c72:	8f 7d       	andi	r24, 0xDF	; 223
    1c74:	80 93 d8 00 	sts	0x00D8, r24
	}

	USB_CLK_Unfreeze();

	UDCON |= (1 << RMWKUP);
    1c78:	80 91 e0 00 	lds	r24, 0x00E0
    1c7c:	82 60       	ori	r24, 0x02	; 2
    1c7e:	80 93 e0 00 	sts	0x00E0, r24
	while (UDCON & (1 << RMWKUP));
    1c82:	80 91 e0 00 	lds	r24, 0x00E0
    1c86:	81 fd       	sbrc	r24, 1
    1c88:	fc cf       	rjmp	.-8      	; 0x1c82 <USB_Device_SendRemoteWakeup+0x22>
}
    1c8a:	08 95       	ret

00001c8c <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    1c8c:	98 2f       	mov	r25, r24
    1c8e:	97 30       	cpi	r25, 0x07	; 7
    1c90:	58 f5       	brcc	.+86     	; 0x1ce8 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1c92:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
    1c96:	98 17       	cp	r25, r24
    1c98:	39 f0       	breq	.+14     	; 0x1ca8 <Endpoint_ConfigureEndpoint_Prv+0x1c>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
    1c9a:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
    1c9e:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
    1ca2:	50 91 f0 00 	lds	r21, 0x00F0
    1ca6:	03 c0       	rjmp	.+6      	; 0x1cae <Endpoint_ConfigureEndpoint_Prv+0x22>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
    1ca8:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
    1caa:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
    1cac:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
    1cae:	21 ff       	sbrs	r18, 1
    1cb0:	19 c0       	rjmp	.+50     	; 0x1ce4 <Endpoint_ConfigureEndpoint_Prv+0x58>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    1cb2:	30 91 eb 00 	lds	r19, 0x00EB
    1cb6:	3e 7f       	andi	r19, 0xFE	; 254
    1cb8:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
    1cbc:	30 91 ed 00 	lds	r19, 0x00ED
    1cc0:	3d 7f       	andi	r19, 0xFD	; 253
    1cc2:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    1cc6:	30 91 eb 00 	lds	r19, 0x00EB
    1cca:	31 60       	ori	r19, 0x01	; 1
    1ccc:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
    1cd0:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
    1cd4:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
    1cd8:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1cdc:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
    1ce0:	27 ff       	sbrs	r18, 7
    1ce2:	07 c0       	rjmp	.+14     	; 0x1cf2 <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    1ce4:	9f 5f       	subi	r25, 0xFF	; 255
    1ce6:	d3 cf       	rjmp	.-90     	; 0x1c8e <Endpoint_ConfigureEndpoint_Prv+0x2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1ce8:	8f 70       	andi	r24, 0x0F	; 15
    1cea:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
    1cee:	81 e0       	ldi	r24, 0x01	; 1
    1cf0:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
    1cf2:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    1cf4:	08 95       	ret

00001cf6 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    1cf6:	80 91 de 01 	lds	r24, 0x01DE
    1cfa:	87 fd       	sbrc	r24, 7
    1cfc:	05 c0       	rjmp	.+10     	; 0x1d08 <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1cfe:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    1d02:	80 ff       	sbrs	r24, 0
    1d04:	0e c0       	rjmp	.+28     	; 0x1d22 <Endpoint_ClearStatusStage+0x2c>
    1d06:	12 c0       	rjmp	.+36     	; 0x1d2c <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1d08:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    1d0c:	82 fd       	sbrc	r24, 2
    1d0e:	05 c0       	rjmp	.+10     	; 0x1d1a <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1d10:	80 91 dd 01 	lds	r24, 0x01DD
    1d14:	81 11       	cpse	r24, r1
    1d16:	f8 cf       	rjmp	.-16     	; 0x1d08 <Endpoint_ClearStatusStage+0x12>
    1d18:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1d1a:	80 91 e8 00 	lds	r24, 0x00E8
    1d1e:	8b 77       	andi	r24, 0x7B	; 123
    1d20:	08 c0       	rjmp	.+16     	; 0x1d32 <Endpoint_ClearStatusStage+0x3c>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1d22:	80 91 dd 01 	lds	r24, 0x01DD
    1d26:	81 11       	cpse	r24, r1
    1d28:	ea cf       	rjmp	.-44     	; 0x1cfe <Endpoint_ClearStatusStage+0x8>
    1d2a:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1d2c:	80 91 e8 00 	lds	r24, 0x00E8
    1d30:	8e 77       	andi	r24, 0x7E	; 126
    1d32:	80 93 e8 00 	sts	0x00E8, r24
    1d36:	08 95       	ret

00001d38 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1d38:	80 91 e4 00 	lds	r24, 0x00E4
    1d3c:	90 91 e5 00 	lds	r25, 0x00E5
    1d40:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1d42:	20 91 ec 00 	lds	r18, 0x00EC
    1d46:	20 ff       	sbrs	r18, 0
    1d48:	21 c0       	rjmp	.+66     	; 0x1d8c <Endpoint_WaitUntilReady+0x54>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1d4a:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    1d4e:	20 fd       	sbrc	r18, 0
    1d50:	21 c0       	rjmp	.+66     	; 0x1d94 <Endpoint_WaitUntilReady+0x5c>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1d52:	20 91 dd 01 	lds	r18, 0x01DD

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1d56:	22 23       	and	r18, r18
    1d58:	89 f0       	breq	.+34     	; 0x1d7c <Endpoint_WaitUntilReady+0x44>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1d5a:	25 30       	cpi	r18, 0x05	; 5
    1d5c:	89 f0       	breq	.+34     	; 0x1d80 <Endpoint_WaitUntilReady+0x48>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1d5e:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1d62:	25 fd       	sbrc	r18, 5
    1d64:	0f c0       	rjmp	.+30     	; 0x1d84 <Endpoint_WaitUntilReady+0x4c>
    1d66:	20 91 e4 00 	lds	r18, 0x00E4
    1d6a:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1d6e:	28 17       	cp	r18, r24
    1d70:	39 07       	cpc	r19, r25
    1d72:	39 f3       	breq	.-50     	; 0x1d42 <Endpoint_WaitUntilReady+0xa>
    1d74:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1d76:	41 f0       	breq	.+16     	; 0x1d88 <Endpoint_WaitUntilReady+0x50>
    1d78:	c9 01       	movw	r24, r18
    1d7a:	e3 cf       	rjmp	.-58     	; 0x1d42 <Endpoint_WaitUntilReady+0xa>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    1d7c:	82 e0       	ldi	r24, 0x02	; 2
    1d7e:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    1d80:	83 e0       	ldi	r24, 0x03	; 3
    1d82:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    1d84:	81 e0       	ldi	r24, 0x01	; 1
    1d86:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
    1d88:	84 e0       	ldi	r24, 0x04	; 4
    1d8a:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1d8c:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1d90:	22 ff       	sbrs	r18, 2
    1d92:	df cf       	rjmp	.-66     	; 0x1d52 <Endpoint_WaitUntilReady+0x1a>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    1d94:	80 e0       	ldi	r24, 0x00	; 0
    1d96:	08 95       	ret

00001d98 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    1d98:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1d9c:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    1da0:	e0 ee       	ldi	r30, 0xE0	; 224
    1da2:	f0 e0       	ldi	r31, 0x00	; 0
    1da4:	80 81       	ld	r24, Z
    1da6:	81 60       	ori	r24, 0x01	; 1
    1da8:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    1daa:	e8 ed       	ldi	r30, 0xD8	; 216
    1dac:	f0 e0       	ldi	r31, 0x00	; 0
    1dae:	80 81       	ld	r24, Z
    1db0:	8f 77       	andi	r24, 0x7F	; 127
    1db2:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1db4:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
    1db6:	a7 ed       	ldi	r26, 0xD7	; 215
    1db8:	b0 e0       	ldi	r27, 0x00	; 0
    1dba:	8c 91       	ld	r24, X
    1dbc:	8e 7f       	andi	r24, 0xFE	; 254
    1dbe:	8c 93       	st	X, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1dc0:	80 81       	ld	r24, Z
    1dc2:	8f 7e       	andi	r24, 0xEF	; 239
    1dc4:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    1dc6:	10 92 dc 01 	sts	0x01DC, r1
    1dca:	08 95       	ret

00001dcc <USB_ResetInterface>:
}

void USB_ResetInterface(void)
{
    1dcc:	0f 93       	push	r16
    1dce:	1f 93       	push	r17
    1dd0:	cf 93       	push	r28
    1dd2:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    1dd4:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1dd8:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1ddc:	c8 ed       	ldi	r28, 0xD8	; 216
    1dde:	d0 e0       	ldi	r29, 0x00	; 0
    1de0:	88 81       	ld	r24, Y
    1de2:	8f 77       	andi	r24, 0x7F	; 127
    1de4:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
    1de6:	88 81       	ld	r24, Y
    1de8:	80 68       	ori	r24, 0x80	; 128
    1dea:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1dec:	88 81       	ld	r24, Y
    1dee:	8f 7d       	andi	r24, 0xDF	; 223
    1df0:	88 83       	st	Y, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1df2:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1df4:	10 92 dd 01 	sts	0x01DD, r1
	USB_Device_ConfigurationNumber  = 0;
    1df8:	10 92 d9 01 	sts	0x01D9, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    1dfc:	10 92 db 01 	sts	0x01DB, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    1e00:	10 92 da 01 	sts	0x01DA, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    1e04:	00 ee       	ldi	r16, 0xE0	; 224
    1e06:	10 e0       	ldi	r17, 0x00	; 0
    1e08:	f8 01       	movw	r30, r16
    1e0a:	80 81       	ld	r24, Z
    1e0c:	8b 7f       	andi	r24, 0xFB	; 251
    1e0e:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    1e10:	88 81       	ld	r24, Y
    1e12:	81 60       	ori	r24, 0x01	; 1
    1e14:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
    1e16:	42 e0       	ldi	r20, 0x02	; 2
    1e18:	60 e0       	ldi	r22, 0x00	; 0
    1e1a:	80 e0       	ldi	r24, 0x00	; 0
    1e1c:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1e20:	e1 ee       	ldi	r30, 0xE1	; 225
    1e22:	f0 e0       	ldi	r31, 0x00	; 0
    1e24:	80 81       	ld	r24, Z
    1e26:	8e 7f       	andi	r24, 0xFE	; 254
    1e28:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1e2a:	e2 ee       	ldi	r30, 0xE2	; 226
    1e2c:	f0 e0       	ldi	r31, 0x00	; 0
    1e2e:	80 81       	ld	r24, Z
    1e30:	81 60       	ori	r24, 0x01	; 1
    1e32:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    1e34:	80 81       	ld	r24, Z
    1e36:	88 60       	ori	r24, 0x08	; 8
    1e38:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1e3a:	f8 01       	movw	r30, r16
    1e3c:	80 81       	ld	r24, Z
    1e3e:	8e 7f       	andi	r24, 0xFE	; 254
    1e40:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    1e42:	88 81       	ld	r24, Y
    1e44:	80 61       	ori	r24, 0x10	; 16
    1e46:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    1e48:	df 91       	pop	r29
    1e4a:	cf 91       	pop	r28
    1e4c:	1f 91       	pop	r17
    1e4e:	0f 91       	pop	r16
    1e50:	08 95       	ret

00001e52 <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    1e52:	e7 ed       	ldi	r30, 0xD7	; 215
    1e54:	f0 e0       	ldi	r31, 0x00	; 0
    1e56:	80 81       	ld	r24, Z
    1e58:	81 60       	ori	r24, 0x01	; 1
    1e5a:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    1e5c:	84 e0       	ldi	r24, 0x04	; 4
    1e5e:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1e60:	81 e0       	ldi	r24, 0x01	; 1
    1e62:	80 93 dc 01 	sts	0x01DC, r24

	USB_ResetInterface();
    1e66:	0c 94 e6 0e 	jmp	0x1dcc	; 0x1dcc <USB_ResetInterface>

00001e6a <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    1e6a:	e8 ed       	ldi	r30, 0xD8	; 216
    1e6c:	f0 e0       	ldi	r31, 0x00	; 0
    1e6e:	80 81       	ld	r24, Z
    1e70:	8e 7f       	andi	r24, 0xFE	; 254
    1e72:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1e74:	10 92 e2 00 	sts	0x00E2, r1
    1e78:	08 95       	ret

00001e7a <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    1e7a:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1e7e:	10 92 e1 00 	sts	0x00E1, r1
    1e82:	08 95       	ret

00001e84 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1e84:	1f 92       	push	r1
    1e86:	0f 92       	push	r0
    1e88:	0f b6       	in	r0, 0x3f	; 63
    1e8a:	0f 92       	push	r0
    1e8c:	11 24       	eor	r1, r1
    1e8e:	2f 93       	push	r18
    1e90:	3f 93       	push	r19
    1e92:	4f 93       	push	r20
    1e94:	5f 93       	push	r21
    1e96:	6f 93       	push	r22
    1e98:	7f 93       	push	r23
    1e9a:	8f 93       	push	r24
    1e9c:	9f 93       	push	r25
    1e9e:	af 93       	push	r26
    1ea0:	bf 93       	push	r27
    1ea2:	ef 93       	push	r30
    1ea4:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    1ea6:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    1eaa:	82 ff       	sbrs	r24, 2
    1eac:	0b c0       	rjmp	.+22     	; 0x1ec4 <__vector_10+0x40>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    1eae:	80 91 e2 00 	lds	r24, 0x00E2
    1eb2:	82 ff       	sbrs	r24, 2
    1eb4:	07 c0       	rjmp	.+14     	; 0x1ec4 <__vector_10+0x40>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    1eb6:	80 91 e1 00 	lds	r24, 0x00E1
    1eba:	8b 7f       	andi	r24, 0xFB	; 251
    1ebc:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1ec0:	0e 94 8b 0c 	call	0x1916	; 0x1916 <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    1ec4:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    1ec8:	80 ff       	sbrs	r24, 0
    1eca:	1f c0       	rjmp	.+62     	; 0x1f0a <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    1ecc:	80 91 d8 00 	lds	r24, 0x00D8
    1ed0:	80 ff       	sbrs	r24, 0
    1ed2:	1b c0       	rjmp	.+54     	; 0x1f0a <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    1ed4:	80 91 da 00 	lds	r24, 0x00DA
    1ed8:	8e 7f       	andi	r24, 0xFE	; 254
    1eda:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    1ede:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    1ee2:	80 ff       	sbrs	r24, 0
    1ee4:	0d c0       	rjmp	.+26     	; 0x1f00 <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1ee6:	80 e1       	ldi	r24, 0x10	; 16
    1ee8:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1eea:	82 e1       	ldi	r24, 0x12	; 18
    1eec:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    1eee:	09 b4       	in	r0, 0x29	; 41
    1ef0:	00 fe       	sbrs	r0, 0
    1ef2:	fd cf       	rjmp	.-6      	; 0x1eee <__vector_10+0x6a>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    1ef4:	81 e0       	ldi	r24, 0x01	; 1
    1ef6:	80 93 dd 01 	sts	0x01DD, r24
			EVENT_USB_Device_Connect();
    1efa:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <EVENT_USB_Device_Connect>
    1efe:	05 c0       	rjmp	.+10     	; 0x1f0a <__vector_10+0x86>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1f00:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    1f02:	10 92 dd 01 	sts	0x01DD, r1
			EVENT_USB_Device_Disconnect();
    1f06:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    1f0a:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    1f0e:	80 ff       	sbrs	r24, 0
    1f10:	19 c0       	rjmp	.+50     	; 0x1f44 <__vector_10+0xc0>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    1f12:	80 91 e2 00 	lds	r24, 0x00E2
    1f16:	80 ff       	sbrs	r24, 0
    1f18:	15 c0       	rjmp	.+42     	; 0x1f44 <__vector_10+0xc0>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1f1a:	80 91 e2 00 	lds	r24, 0x00E2
    1f1e:	8e 7f       	andi	r24, 0xFE	; 254
    1f20:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1f24:	80 91 e2 00 	lds	r24, 0x00E2
    1f28:	80 61       	ori	r24, 0x10	; 16
    1f2a:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    1f2e:	80 91 d8 00 	lds	r24, 0x00D8
    1f32:	80 62       	ori	r24, 0x20	; 32
    1f34:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1f38:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    1f3a:	85 e0       	ldi	r24, 0x05	; 5
    1f3c:	80 93 dd 01 	sts	0x01DD, r24
		EVENT_USB_Device_Suspend();
    1f40:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <EVENT_USB_Device_Suspend>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    1f44:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1f48:	84 ff       	sbrs	r24, 4
    1f4a:	2e c0       	rjmp	.+92     	; 0x1fa8 <__vector_10+0x124>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    1f4c:	80 91 e2 00 	lds	r24, 0x00E2
    1f50:	84 ff       	sbrs	r24, 4
    1f52:	2a c0       	rjmp	.+84     	; 0x1fa8 <__vector_10+0x124>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1f54:	80 e1       	ldi	r24, 0x10	; 16
    1f56:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1f58:	82 e1       	ldi	r24, 0x12	; 18
    1f5a:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1f5c:	09 b4       	in	r0, 0x29	; 41
    1f5e:	00 fe       	sbrs	r0, 0
    1f60:	fd cf       	rjmp	.-6      	; 0x1f5c <__vector_10+0xd8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1f62:	80 91 d8 00 	lds	r24, 0x00D8
    1f66:	8f 7d       	andi	r24, 0xDF	; 223
    1f68:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    1f6c:	80 91 e1 00 	lds	r24, 0x00E1
    1f70:	8f 7e       	andi	r24, 0xEF	; 239
    1f72:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    1f76:	80 91 e2 00 	lds	r24, 0x00E2
    1f7a:	8f 7e       	andi	r24, 0xEF	; 239
    1f7c:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1f80:	80 91 e2 00 	lds	r24, 0x00E2
    1f84:	81 60       	ori	r24, 0x01	; 1
    1f86:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    1f8a:	80 91 d9 01 	lds	r24, 0x01D9
    1f8e:	81 11       	cpse	r24, r1
    1f90:	04 c0       	rjmp	.+8      	; 0x1f9a <__vector_10+0x116>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1f92:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1f96:	87 ff       	sbrs	r24, 7
    1f98:	02 c0       	rjmp	.+4      	; 0x1f9e <__vector_10+0x11a>
    1f9a:	84 e0       	ldi	r24, 0x04	; 4
    1f9c:	01 c0       	rjmp	.+2      	; 0x1fa0 <__vector_10+0x11c>
    1f9e:	81 e0       	ldi	r24, 0x01	; 1
    1fa0:	80 93 dd 01 	sts	0x01DD, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    1fa4:	0e 94 85 0c 	call	0x190a	; 0x190a <EVENT_USB_Device_WakeUp>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    1fa8:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1fac:	83 ff       	sbrs	r24, 3
    1fae:	29 c0       	rjmp	.+82     	; 0x2002 <__vector_10+0x17e>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    1fb0:	80 91 e2 00 	lds	r24, 0x00E2
    1fb4:	83 ff       	sbrs	r24, 3
    1fb6:	25 c0       	rjmp	.+74     	; 0x2002 <__vector_10+0x17e>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    1fb8:	80 91 e1 00 	lds	r24, 0x00E1
    1fbc:	87 7f       	andi	r24, 0xF7	; 247
    1fbe:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1fc2:	82 e0       	ldi	r24, 0x02	; 2
    1fc4:	80 93 dd 01 	sts	0x01DD, r24
		USB_Device_ConfigurationNumber = 0;
    1fc8:	10 92 d9 01 	sts	0x01D9, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1fcc:	80 91 e1 00 	lds	r24, 0x00E1
    1fd0:	8e 7f       	andi	r24, 0xFE	; 254
    1fd2:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1fd6:	80 91 e2 00 	lds	r24, 0x00E2
    1fda:	8e 7f       	andi	r24, 0xFE	; 254
    1fdc:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1fe0:	80 91 e2 00 	lds	r24, 0x00E2
    1fe4:	80 61       	ori	r24, 0x10	; 16
    1fe6:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
    1fea:	42 e0       	ldi	r20, 0x02	; 2
    1fec:	60 e0       	ldi	r22, 0x00	; 0
    1fee:	80 e0       	ldi	r24, 0x00	; 0
    1ff0:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1ff4:	80 91 f0 00 	lds	r24, 0x00F0
    1ff8:	88 60       	ori	r24, 0x08	; 8
    1ffa:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1ffe:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <EVENT_USB_Device_Reset>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    2002:	ff 91       	pop	r31
    2004:	ef 91       	pop	r30
    2006:	bf 91       	pop	r27
    2008:	af 91       	pop	r26
    200a:	9f 91       	pop	r25
    200c:	8f 91       	pop	r24
    200e:	7f 91       	pop	r23
    2010:	6f 91       	pop	r22
    2012:	5f 91       	pop	r21
    2014:	4f 91       	pop	r20
    2016:	3f 91       	pop	r19
    2018:	2f 91       	pop	r18
    201a:	0f 90       	pop	r0
    201c:	0f be       	out	0x3f, r0	; 63
    201e:	0f 90       	pop	r0
    2020:	1f 90       	pop	r1
    2022:	18 95       	reti

00002024 <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    2024:	1f 92       	push	r1
    2026:	0f 92       	push	r0
    2028:	0f b6       	in	r0, 0x3f	; 63
    202a:	0f 92       	push	r0
    202c:	11 24       	eor	r1, r1
    202e:	2f 93       	push	r18
    2030:	3f 93       	push	r19
    2032:	4f 93       	push	r20
    2034:	5f 93       	push	r21
    2036:	6f 93       	push	r22
    2038:	7f 93       	push	r23
    203a:	8f 93       	push	r24
    203c:	9f 93       	push	r25
    203e:	af 93       	push	r26
    2040:	bf 93       	push	r27
    2042:	cf 93       	push	r28
    2044:	ef 93       	push	r30
    2046:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    2048:	c0 91 e9 00 	lds	r28, 0x00E9
    204c:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    204e:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2052:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    2056:	80 91 f0 00 	lds	r24, 0x00F0
    205a:	87 7f       	andi	r24, 0xF7	; 247
    205c:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    2060:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    2062:	0e 94 50 11 	call	0x22a0	; 0x22a0 <USB_Device_ProcessControlRequest>
    2066:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    206a:	80 91 f0 00 	lds	r24, 0x00F0
    206e:	88 60       	ori	r24, 0x08	; 8
    2070:	80 93 f0 00 	sts	0x00F0, r24
    2074:	c0 93 e9 00 	sts	0x00E9, r28

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    2078:	ff 91       	pop	r31
    207a:	ef 91       	pop	r30
    207c:	cf 91       	pop	r28
    207e:	bf 91       	pop	r27
    2080:	af 91       	pop	r26
    2082:	9f 91       	pop	r25
    2084:	8f 91       	pop	r24
    2086:	7f 91       	pop	r23
    2088:	6f 91       	pop	r22
    208a:	5f 91       	pop	r21
    208c:	4f 91       	pop	r20
    208e:	3f 91       	pop	r19
    2090:	2f 91       	pop	r18
    2092:	0f 90       	pop	r0
    2094:	0f be       	out	0x3f, r0	; 63
    2096:	0f 90       	pop	r0
    2098:	1f 90       	pop	r1
    209a:	18 95       	reti

0000209c <Endpoint_Write_Stream_LE>:

// cppcheck-suppress unusedFunction
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    209c:	cf 92       	push	r12
    209e:	df 92       	push	r13
    20a0:	ef 92       	push	r14
    20a2:	ff 92       	push	r15
    20a4:	0f 93       	push	r16
    20a6:	1f 93       	push	r17
    20a8:	cf 93       	push	r28
    20aa:	df 93       	push	r29
    20ac:	7c 01       	movw	r14, r24
    20ae:	8b 01       	movw	r16, r22
    20b0:	ea 01       	movw	r28, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    20b2:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <Endpoint_WaitUntilReady>
    20b6:	81 11       	cpse	r24, r1
    20b8:	31 c0       	rjmp	.+98     	; 0x211c <Endpoint_Write_Stream_LE+0x80>
	  return ErrorCode;

	if (BytesProcessed != NULL)
    20ba:	20 97       	sbiw	r28, 0x00	; 0
    20bc:	31 f0       	breq	.+12     	; 0x20ca <Endpoint_Write_Stream_LE+0x2e>
	{
		Length -= *BytesProcessed;
    20be:	88 81       	ld	r24, Y
    20c0:	99 81       	ldd	r25, Y+1	; 0x01
    20c2:	08 1b       	sub	r16, r24
    20c4:	19 0b       	sbc	r17, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    20c6:	e8 0e       	add	r14, r24
    20c8:	f9 1e       	adc	r15, r25
// cppcheck-suppress unusedFunction
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    20ca:	c1 2c       	mov	r12, r1
    20cc:	d1 2c       	mov	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    20ce:	01 15       	cp	r16, r1
    20d0:	11 05       	cpc	r17, r1
    20d2:	19 f1       	breq	.+70     	; 0x211a <Endpoint_Write_Stream_LE+0x7e>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    20d4:	80 91 e8 00 	lds	r24, 0x00E8
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    20d8:	85 fd       	sbrc	r24, 5
    20da:	14 c0       	rjmp	.+40     	; 0x2104 <Endpoint_Write_Stream_LE+0x68>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    20dc:	80 91 e8 00 	lds	r24, 0x00E8
    20e0:	8e 77       	andi	r24, 0x7E	; 126
    20e2:	80 93 e8 00 	sts	0x00E8, r24

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
    20e6:	20 97       	sbiw	r28, 0x00	; 0
    20e8:	41 f0       	breq	.+16     	; 0x20fa <Endpoint_Write_Stream_LE+0x5e>
			{
				*BytesProcessed += BytesInTransfer;
    20ea:	88 81       	ld	r24, Y
    20ec:	99 81       	ldd	r25, Y+1	; 0x01
    20ee:	8c 0d       	add	r24, r12
    20f0:	9d 1d       	adc	r25, r13
    20f2:	99 83       	std	Y+1, r25	; 0x01
    20f4:	88 83       	st	Y, r24
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    20f6:	85 e0       	ldi	r24, 0x05	; 5
    20f8:	11 c0       	rjmp	.+34     	; 0x211c <Endpoint_Write_Stream_LE+0x80>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    20fa:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <Endpoint_WaitUntilReady>
    20fe:	88 23       	and	r24, r24
    2100:	31 f3       	breq	.-52     	; 0x20ce <Endpoint_Write_Stream_LE+0x32>
    2102:	0c c0       	rjmp	.+24     	; 0x211c <Endpoint_Write_Stream_LE+0x80>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    2104:	f7 01       	movw	r30, r14
    2106:	81 91       	ld	r24, Z+
    2108:	7f 01       	movw	r14, r30
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    210a:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    210e:	01 50       	subi	r16, 0x01	; 1
    2110:	11 09       	sbc	r17, r1
			BytesInTransfer++;
    2112:	ff ef       	ldi	r31, 0xFF	; 255
    2114:	cf 1a       	sub	r12, r31
    2116:	df 0a       	sbc	r13, r31
    2118:	da cf       	rjmp	.-76     	; 0x20ce <Endpoint_Write_Stream_LE+0x32>
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
    211a:	80 e0       	ldi	r24, 0x00	; 0
}
    211c:	df 91       	pop	r29
    211e:	cf 91       	pop	r28
    2120:	1f 91       	pop	r17
    2122:	0f 91       	pop	r16
    2124:	ff 90       	pop	r15
    2126:	ef 90       	pop	r14
    2128:	df 90       	pop	r13
    212a:	cf 90       	pop	r12
    212c:	08 95       	ret

0000212e <Endpoint_Write_Control_Stream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    212e:	20 91 e4 01 	lds	r18, 0x01E4
    2132:	30 91 e5 01 	lds	r19, 0x01E5
    2136:	26 17       	cp	r18, r22
    2138:	37 07       	cpc	r19, r23
    213a:	48 f0       	brcs	.+18     	; 0x214e <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    213c:	61 15       	cp	r22, r1
    213e:	71 05       	cpc	r23, r1
    2140:	39 f4       	brne	.+14     	; 0x2150 <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2142:	20 91 e8 00 	lds	r18, 0x00E8
    2146:	2e 77       	andi	r18, 0x7E	; 126
    2148:	20 93 e8 00 	sts	0x00E8, r18
    214c:	01 c0       	rjmp	.+2      	; 0x2150 <Endpoint_Write_Control_Stream_LE+0x22>
    214e:	b9 01       	movw	r22, r18
    2150:	fc 01       	movw	r30, r24
    2152:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    2154:	61 15       	cp	r22, r1
    2156:	71 05       	cpc	r23, r1
    2158:	a9 f1       	breq	.+106    	; 0x21c4 <Endpoint_Write_Control_Stream_LE+0x96>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    215a:	80 91 dd 01 	lds	r24, 0x01DD

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    215e:	88 23       	and	r24, r24
    2160:	e9 f1       	breq	.+122    	; 0x21dc <Endpoint_Write_Control_Stream_LE+0xae>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    2162:	85 30       	cpi	r24, 0x05	; 5
    2164:	e9 f1       	breq	.+122    	; 0x21e0 <Endpoint_Write_Control_Stream_LE+0xb2>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2166:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    216a:	83 fd       	sbrc	r24, 3
    216c:	35 c0       	rjmp	.+106    	; 0x21d8 <Endpoint_Write_Control_Stream_LE+0xaa>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    216e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    2172:	82 ff       	sbrs	r24, 2
    2174:	06 c0       	rjmp	.+12     	; 0x2182 <Endpoint_Write_Control_Stream_LE+0x54>
    2176:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    217a:	82 ff       	sbrs	r24, 2
    217c:	26 c0       	rjmp	.+76     	; 0x21ca <Endpoint_Write_Control_Stream_LE+0x9c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    217e:	80 e0       	ldi	r24, 0x00	; 0
    2180:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2182:	80 91 e8 00 	lds	r24, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
    2186:	80 ff       	sbrs	r24, 0
    2188:	e5 cf       	rjmp	.-54     	; 0x2154 <Endpoint_Write_Control_Stream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR) || defined(__AVR_ATmega32U6__)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    218a:	20 91 f3 00 	lds	r18, 0x00F3
    218e:	80 91 f2 00 	lds	r24, 0x00F2
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	92 2b       	or	r25, r18
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    2196:	61 15       	cp	r22, r1
    2198:	71 05       	cpc	r23, r1
    219a:	51 f0       	breq	.+20     	; 0x21b0 <Endpoint_Write_Control_Stream_LE+0x82>
    219c:	88 30       	cpi	r24, 0x08	; 8
    219e:	91 05       	cpc	r25, r1
    21a0:	38 f4       	brcc	.+14     	; 0x21b0 <Endpoint_Write_Control_Stream_LE+0x82>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    21a2:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    21a4:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    21a8:	61 50       	subi	r22, 0x01	; 1
    21aa:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    21ac:	01 96       	adiw	r24, 0x01	; 1
    21ae:	f3 cf       	rjmp	.-26     	; 0x2196 <Endpoint_Write_Control_Stream_LE+0x68>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    21b0:	21 e0       	ldi	r18, 0x01	; 1
    21b2:	08 97       	sbiw	r24, 0x08	; 8
    21b4:	09 f0       	breq	.+2      	; 0x21b8 <Endpoint_Write_Control_Stream_LE+0x8a>
    21b6:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    21b8:	80 91 e8 00 	lds	r24, 0x00E8
    21bc:	8e 77       	andi	r24, 0x7E	; 126
    21be:	80 93 e8 00 	sts	0x00E8, r24
    21c2:	c8 cf       	rjmp	.-112    	; 0x2154 <Endpoint_Write_Control_Stream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    21c4:	21 11       	cpse	r18, r1
    21c6:	c9 cf       	rjmp	.-110    	; 0x215a <Endpoint_Write_Control_Stream_LE+0x2c>
    21c8:	d6 cf       	rjmp	.-84     	; 0x2176 <Endpoint_Write_Control_Stream_LE+0x48>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    21ca:	80 91 dd 01 	lds	r24, 0x01DD

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    21ce:	88 23       	and	r24, r24
    21d0:	29 f0       	breq	.+10     	; 0x21dc <Endpoint_Write_Control_Stream_LE+0xae>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    21d2:	85 30       	cpi	r24, 0x05	; 5
    21d4:	81 f6       	brne	.-96     	; 0x2176 <Endpoint_Write_Control_Stream_LE+0x48>
    21d6:	04 c0       	rjmp	.+8      	; 0x21e0 <Endpoint_Write_Control_Stream_LE+0xb2>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    21d8:	81 e0       	ldi	r24, 0x01	; 1
    21da:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    21dc:	82 e0       	ldi	r24, 0x02	; 2
    21de:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    21e0:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    21e2:	08 95       	ret

000021e4 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    21e4:	20 91 e4 01 	lds	r18, 0x01E4
    21e8:	30 91 e5 01 	lds	r19, 0x01E5
    21ec:	26 17       	cp	r18, r22
    21ee:	37 07       	cpc	r19, r23
    21f0:	48 f0       	brcs	.+18     	; 0x2204 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    21f2:	61 15       	cp	r22, r1
    21f4:	71 05       	cpc	r23, r1
    21f6:	39 f4       	brne	.+14     	; 0x2206 <Endpoint_Write_Control_PStream_LE+0x22>
    21f8:	20 91 e8 00 	lds	r18, 0x00E8
    21fc:	2e 77       	andi	r18, 0x7E	; 126
    21fe:	20 93 e8 00 	sts	0x00E8, r18
    2202:	01 c0       	rjmp	.+2      	; 0x2206 <Endpoint_Write_Control_PStream_LE+0x22>
    2204:	b9 01       	movw	r22, r18
    2206:	fc 01       	movw	r30, r24
    2208:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    220a:	61 15       	cp	r22, r1
    220c:	71 05       	cpc	r23, r1
    220e:	c1 f1       	breq	.+112    	; 0x2280 <Endpoint_Write_Control_PStream_LE+0x9c>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    2210:	80 91 dd 01 	lds	r24, 0x01DD

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    2214:	88 23       	and	r24, r24
    2216:	09 f4       	brne	.+2      	; 0x221a <Endpoint_Write_Control_PStream_LE+0x36>
    2218:	3f c0       	rjmp	.+126    	; 0x2298 <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    221a:	85 30       	cpi	r24, 0x05	; 5
    221c:	09 f4       	brne	.+2      	; 0x2220 <Endpoint_Write_Control_PStream_LE+0x3c>
    221e:	3e c0       	rjmp	.+124    	; 0x229c <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2220:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    2224:	83 fd       	sbrc	r24, 3
    2226:	36 c0       	rjmp	.+108    	; 0x2294 <Endpoint_Write_Control_PStream_LE+0xb0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2228:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    222c:	82 ff       	sbrs	r24, 2
    222e:	06 c0       	rjmp	.+12     	; 0x223c <Endpoint_Write_Control_PStream_LE+0x58>
    2230:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    2234:	82 ff       	sbrs	r24, 2
    2236:	27 c0       	rjmp	.+78     	; 0x2286 <Endpoint_Write_Control_PStream_LE+0xa2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    2238:	80 e0       	ldi	r24, 0x00	; 0
    223a:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    223c:	80 91 e8 00 	lds	r24, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
    2240:	80 ff       	sbrs	r24, 0
    2242:	e3 cf       	rjmp	.-58     	; 0x220a <Endpoint_Write_Control_PStream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR) || defined(__AVR_ATmega32U6__)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    2244:	20 91 f3 00 	lds	r18, 0x00F3
    2248:	80 91 f2 00 	lds	r24, 0x00F2
    224c:	90 e0       	ldi	r25, 0x00	; 0
    224e:	92 2b       	or	r25, r18
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    2250:	61 15       	cp	r22, r1
    2252:	71 05       	cpc	r23, r1
    2254:	59 f0       	breq	.+22     	; 0x226c <Endpoint_Write_Control_PStream_LE+0x88>
    2256:	88 30       	cpi	r24, 0x08	; 8
    2258:	91 05       	cpc	r25, r1
    225a:	40 f4       	brcc	.+16     	; 0x226c <Endpoint_Write_Control_PStream_LE+0x88>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    225c:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    225e:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    2262:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    2264:	61 50       	subi	r22, 0x01	; 1
    2266:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    2268:	01 96       	adiw	r24, 0x01	; 1
    226a:	f2 cf       	rjmp	.-28     	; 0x2250 <Endpoint_Write_Control_PStream_LE+0x6c>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    226c:	21 e0       	ldi	r18, 0x01	; 1
    226e:	08 97       	sbiw	r24, 0x08	; 8
    2270:	09 f0       	breq	.+2      	; 0x2274 <Endpoint_Write_Control_PStream_LE+0x90>
    2272:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2274:	80 91 e8 00 	lds	r24, 0x00E8
    2278:	8e 77       	andi	r24, 0x7E	; 126
    227a:	80 93 e8 00 	sts	0x00E8, r24
    227e:	c5 cf       	rjmp	.-118    	; 0x220a <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    2280:	21 11       	cpse	r18, r1
    2282:	c6 cf       	rjmp	.-116    	; 0x2210 <Endpoint_Write_Control_PStream_LE+0x2c>
    2284:	d5 cf       	rjmp	.-86     	; 0x2230 <Endpoint_Write_Control_PStream_LE+0x4c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    2286:	80 91 dd 01 	lds	r24, 0x01DD

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    228a:	88 23       	and	r24, r24
    228c:	29 f0       	breq	.+10     	; 0x2298 <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    228e:	85 30       	cpi	r24, 0x05	; 5
    2290:	79 f6       	brne	.-98     	; 0x2230 <Endpoint_Write_Control_PStream_LE+0x4c>
    2292:	04 c0       	rjmp	.+8      	; 0x229c <Endpoint_Write_Control_PStream_LE+0xb8>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    2294:	81 e0       	ldi	r24, 0x01	; 1
    2296:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    2298:	82 e0       	ldi	r24, 0x02	; 2
    229a:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    229c:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    229e:	08 95       	ret

000022a0 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    22a0:	0f 93       	push	r16
    22a2:	1f 93       	push	r17
    22a4:	cf 93       	push	r28
    22a6:	df 93       	push	r29
    22a8:	cd b7       	in	r28, 0x3d	; 61
    22aa:	de b7       	in	r29, 0x3e	; 62
    22ac:	aa 97       	sbiw	r28, 0x2a	; 42
    22ae:	0f b6       	in	r0, 0x3f	; 63
    22b0:	f8 94       	cli
    22b2:	de bf       	out	0x3e, r29	; 62
    22b4:	0f be       	out	0x3f, r0	; 63
    22b6:	cd bf       	out	0x3d, r28	; 61
    22b8:	ee ed       	ldi	r30, 0xDE	; 222
    22ba:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    22bc:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    22c0:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    22c2:	21 e0       	ldi	r18, 0x01	; 1
    22c4:	e6 3e       	cpi	r30, 0xE6	; 230
    22c6:	f2 07       	cpc	r31, r18
    22c8:	c9 f7       	brne	.-14     	; 0x22bc <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    22ca:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    22ce:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    22d2:	83 ff       	sbrs	r24, 3
    22d4:	1d c1       	rjmp	.+570    	; 0x2510 <USB_Device_ProcessControlRequest+0x270>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    22d6:	20 91 de 01 	lds	r18, 0x01DE

		switch (USB_ControlRequest.bRequest)
    22da:	30 91 df 01 	lds	r19, 0x01DF
    22de:	83 2f       	mov	r24, r19
    22e0:	90 e0       	ldi	r25, 0x00	; 0
    22e2:	8a 30       	cpi	r24, 0x0A	; 10
    22e4:	91 05       	cpc	r25, r1
    22e6:	08 f0       	brcs	.+2      	; 0x22ea <USB_Device_ProcessControlRequest+0x4a>
    22e8:	13 c1       	rjmp	.+550    	; 0x2510 <USB_Device_ProcessControlRequest+0x270>
    22ea:	fc 01       	movw	r30, r24
    22ec:	ea 5a       	subi	r30, 0xAA	; 170
    22ee:	ff 4f       	sbci	r31, 0xFF	; 255
    22f0:	0c 94 a8 2d 	jmp	0x5b50	; 0x5b50 <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    22f4:	20 38       	cpi	r18, 0x80	; 128
    22f6:	81 f0       	breq	.+32     	; 0x2318 <USB_Device_ProcessControlRequest+0x78>
    22f8:	22 38       	cpi	r18, 0x82	; 130
    22fa:	09 f0       	breq	.+2      	; 0x22fe <USB_Device_ProcessControlRequest+0x5e>
    22fc:	09 c1       	rjmp	.+530    	; 0x2510 <USB_Device_ProcessControlRequest+0x270>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    22fe:	80 91 e2 01 	lds	r24, 0x01E2
    2302:	8f 70       	andi	r24, 0x0F	; 15
    2304:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    2308:	80 91 eb 00 	lds	r24, 0x00EB
    230c:	85 fb       	bst	r24, 5
    230e:	88 27       	eor	r24, r24
    2310:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2312:	10 92 e9 00 	sts	0x00E9, r1
    2316:	06 c0       	rjmp	.+12     	; 0x2324 <USB_Device_ProcessControlRequest+0x84>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    2318:	80 91 da 01 	lds	r24, 0x01DA
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    231c:	90 91 db 01 	lds	r25, 0x01DB
    2320:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    2322:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2324:	90 91 e8 00 	lds	r25, 0x00E8
    2328:	97 7f       	andi	r25, 0xF7	; 247
    232a:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    232e:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    2332:	10 92 f1 00 	sts	0x00F1, r1
    2336:	c6 c0       	rjmp	.+396    	; 0x24c4 <USB_Device_ProcessControlRequest+0x224>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    2338:	82 2f       	mov	r24, r18
    233a:	8d 7f       	andi	r24, 0xFD	; 253
    233c:	09 f0       	breq	.+2      	; 0x2340 <USB_Device_ProcessControlRequest+0xa0>
    233e:	e8 c0       	rjmp	.+464    	; 0x2510 <USB_Device_ProcessControlRequest+0x270>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    2340:	22 23       	and	r18, r18
    2342:	19 f0       	breq	.+6      	; 0x234a <USB_Device_ProcessControlRequest+0xaa>
    2344:	22 30       	cpi	r18, 0x02	; 2
    2346:	61 f0       	breq	.+24     	; 0x2360 <USB_Device_ProcessControlRequest+0xc0>
    2348:	e3 c0       	rjmp	.+454    	; 0x2510 <USB_Device_ProcessControlRequest+0x270>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    234a:	80 91 e0 01 	lds	r24, 0x01E0
    234e:	81 30       	cpi	r24, 0x01	; 1
    2350:	09 f0       	breq	.+2      	; 0x2354 <USB_Device_ProcessControlRequest+0xb4>
    2352:	de c0       	rjmp	.+444    	; 0x2510 <USB_Device_ProcessControlRequest+0x270>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    2354:	33 30       	cpi	r19, 0x03	; 3
    2356:	09 f0       	breq	.+2      	; 0x235a <USB_Device_ProcessControlRequest+0xba>
    2358:	80 e0       	ldi	r24, 0x00	; 0
    235a:	80 93 db 01 	sts	0x01DB, r24
    235e:	28 c0       	rjmp	.+80     	; 0x23b0 <USB_Device_ProcessControlRequest+0x110>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    2360:	80 91 e0 01 	lds	r24, 0x01E0
    2364:	81 11       	cpse	r24, r1
    2366:	24 c0       	rjmp	.+72     	; 0x23b0 <USB_Device_ProcessControlRequest+0x110>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    2368:	20 91 e2 01 	lds	r18, 0x01E2
    236c:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    236e:	09 f4       	brne	.+2      	; 0x2372 <USB_Device_ProcessControlRequest+0xd2>
    2370:	cf c0       	rjmp	.+414    	; 0x2510 <USB_Device_ProcessControlRequest+0x270>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2372:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    2376:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    237a:	80 ff       	sbrs	r24, 0
    237c:	19 c0       	rjmp	.+50     	; 0x23b0 <USB_Device_ProcessControlRequest+0x110>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    237e:	80 91 eb 00 	lds	r24, 0x00EB
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    2382:	33 30       	cpi	r19, 0x03	; 3
    2384:	11 f4       	brne	.+4      	; 0x238a <USB_Device_ProcessControlRequest+0xea>
    2386:	80 62       	ori	r24, 0x20	; 32
    2388:	11 c0       	rjmp	.+34     	; 0x23ac <USB_Device_ProcessControlRequest+0x10c>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    238a:	80 61       	ori	r24, 0x10	; 16
    238c:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    2390:	81 e0       	ldi	r24, 0x01	; 1
    2392:	90 e0       	ldi	r25, 0x00	; 0
    2394:	02 2e       	mov	r0, r18
    2396:	01 c0       	rjmp	.+2      	; 0x239a <USB_Device_ProcessControlRequest+0xfa>
    2398:	88 0f       	add	r24, r24
    239a:	0a 94       	dec	r0
    239c:	ea f7       	brpl	.-6      	; 0x2398 <USB_Device_ProcessControlRequest+0xf8>
    239e:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    23a2:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    23a6:	80 91 eb 00 	lds	r24, 0x00EB
    23aa:	88 60       	ori	r24, 0x08	; 8
    23ac:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    23b0:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    23b4:	80 91 e8 00 	lds	r24, 0x00E8
    23b8:	87 7f       	andi	r24, 0xF7	; 247
    23ba:	87 c0       	rjmp	.+270    	; 0x24ca <USB_Device_ProcessControlRequest+0x22a>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    23bc:	21 11       	cpse	r18, r1
    23be:	a8 c0       	rjmp	.+336    	; 0x2510 <USB_Device_ProcessControlRequest+0x270>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
    23c0:	10 91 e0 01 	lds	r17, 0x01E0
    23c4:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    23c6:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    23c8:	f8 94       	cli
    23ca:	80 91 e8 00 	lds	r24, 0x00E8
    23ce:	87 7f       	andi	r24, 0xF7	; 247
    23d0:	80 93 e8 00 	sts	0x00E8, r24
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    23d4:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    23d8:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    23dc:	80 ff       	sbrs	r24, 0
    23de:	fc cf       	rjmp	.-8      	; 0x23d8 <USB_Device_ProcessControlRequest+0x138>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    23e0:	80 91 e3 00 	lds	r24, 0x00E3
    23e4:	80 78       	andi	r24, 0x80	; 128
    23e6:	81 2b       	or	r24, r17

				UDADDR = Temp;
    23e8:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR = Temp | (1 << ADDEN);
    23ec:	80 68       	ori	r24, 0x80	; 128
    23ee:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    23f2:	11 23       	and	r17, r17
    23f4:	11 f0       	breq	.+4      	; 0x23fa <USB_Device_ProcessControlRequest+0x15a>
    23f6:	83 e0       	ldi	r24, 0x03	; 3
    23f8:	01 c0       	rjmp	.+2      	; 0x23fc <USB_Device_ProcessControlRequest+0x15c>
    23fa:	82 e0       	ldi	r24, 0x02	; 2
    23fc:	80 93 dd 01 	sts	0x01DD, r24
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    2400:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
				#endif

				GCC_MEMORY_BARRIER();
    2402:	86 c0       	rjmp	.+268    	; 0x2510 <USB_Device_ProcessControlRequest+0x270>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    2404:	20 58       	subi	r18, 0x80	; 128
    2406:	22 30       	cpi	r18, 0x02	; 2
    2408:	08 f0       	brcs	.+2      	; 0x240c <USB_Device_ProcessControlRequest+0x16c>
    240a:	82 c0       	rjmp	.+260    	; 0x2510 <USB_Device_ProcessControlRequest+0x270>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    240c:	80 91 e0 01 	lds	r24, 0x01E0
    2410:	90 91 e1 01 	lds	r25, 0x01E1
    2414:	8c 3d       	cpi	r24, 0xDC	; 220
    2416:	23 e0       	ldi	r18, 0x03	; 3
    2418:	92 07       	cpc	r25, r18
    241a:	79 f5       	brne	.+94     	; 0x247a <USB_Device_ProcessControlRequest+0x1da>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    241c:	83 e0       	ldi	r24, 0x03	; 3
    241e:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    2420:	8a e2       	ldi	r24, 0x2A	; 42
    2422:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    2424:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    2426:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    2428:	de 01       	movw	r26, r28
    242a:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    242c:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    242e:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    2430:	51 e2       	ldi	r21, 0x21	; 33
    2432:	e3 2f       	mov	r30, r19
    2434:	f0 e0       	ldi	r31, 0x00	; 0
    2436:	50 93 57 00 	sts	0x0057, r21
    243a:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    243c:	20 ff       	sbrs	r18, 0
    243e:	03 c0       	rjmp	.+6      	; 0x2446 <USB_Device_ProcessControlRequest+0x1a6>
					{
						SerialByte >>= 4;
    2440:	e2 95       	swap	r30
    2442:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    2444:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    2446:	ef 70       	andi	r30, 0x0F	; 15
    2448:	8e 2f       	mov	r24, r30
    244a:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    244c:	ea 30       	cpi	r30, 0x0A	; 10
    244e:	10 f0       	brcs	.+4      	; 0x2454 <USB_Device_ProcessControlRequest+0x1b4>
    2450:	c7 96       	adiw	r24, 0x37	; 55
    2452:	01 c0       	rjmp	.+2      	; 0x2456 <USB_Device_ProcessControlRequest+0x1b6>
    2454:	c0 96       	adiw	r24, 0x30	; 48
    2456:	8d 93       	st	X+, r24
    2458:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    245a:	2f 5f       	subi	r18, 0xFF	; 255
    245c:	24 31       	cpi	r18, 0x14	; 20
    245e:	49 f7       	brne	.-46     	; 0x2432 <USB_Device_ProcessControlRequest+0x192>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    2460:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2462:	80 91 e8 00 	lds	r24, 0x00E8
    2466:	87 7f       	andi	r24, 0xF7	; 247
    2468:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    246c:	6a e2       	ldi	r22, 0x2A	; 42
    246e:	70 e0       	ldi	r23, 0x00	; 0
    2470:	ce 01       	movw	r24, r28
    2472:	01 96       	adiw	r24, 0x01	; 1
    2474:	0e 94 97 10 	call	0x212e	; 0x212e <Endpoint_Write_Control_Stream_LE>
    2478:	14 c0       	rjmp	.+40     	; 0x24a2 <USB_Device_ProcessControlRequest+0x202>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    247a:	ae 01       	movw	r20, r28
    247c:	4f 5f       	subi	r20, 0xFF	; 255
    247e:	5f 4f       	sbci	r21, 0xFF	; 255
    2480:	60 91 e2 01 	lds	r22, 0x01E2
    2484:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <CALLBACK_USB_GetDescriptor>
    2488:	00 97       	sbiw	r24, 0x00	; 0
    248a:	09 f4       	brne	.+2      	; 0x248e <USB_Device_ProcessControlRequest+0x1ee>
    248c:	41 c0       	rjmp	.+130    	; 0x2510 <USB_Device_ProcessControlRequest+0x270>
    248e:	20 91 e8 00 	lds	r18, 0x00E8
    2492:	27 7f       	andi	r18, 0xF7	; 247
    2494:	20 93 e8 00 	sts	0x00E8, r18
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    2498:	bc 01       	movw	r22, r24
    249a:	89 81       	ldd	r24, Y+1	; 0x01
    249c:	9a 81       	ldd	r25, Y+2	; 0x02
    249e:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    24a2:	80 91 e8 00 	lds	r24, 0x00E8
    24a6:	8b 77       	andi	r24, 0x7B	; 123
    24a8:	80 93 e8 00 	sts	0x00E8, r24
    24ac:	31 c0       	rjmp	.+98     	; 0x2510 <USB_Device_ProcessControlRequest+0x270>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    24ae:	20 38       	cpi	r18, 0x80	; 128
    24b0:	79 f5       	brne	.+94     	; 0x2510 <USB_Device_ProcessControlRequest+0x270>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    24b2:	80 91 e8 00 	lds	r24, 0x00E8
    24b6:	87 7f       	andi	r24, 0xF7	; 247
    24b8:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    24bc:	80 91 d9 01 	lds	r24, 0x01D9
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    24c0:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    24c4:	80 91 e8 00 	lds	r24, 0x00E8
    24c8:	8e 77       	andi	r24, 0x7E	; 126
    24ca:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    24ce:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <Endpoint_ClearStatusStage>
    24d2:	1e c0       	rjmp	.+60     	; 0x2510 <USB_Device_ProcessControlRequest+0x270>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    24d4:	21 11       	cpse	r18, r1
    24d6:	1c c0       	rjmp	.+56     	; 0x2510 <USB_Device_ProcessControlRequest+0x270>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    24d8:	90 91 e0 01 	lds	r25, 0x01E0
    24dc:	92 30       	cpi	r25, 0x02	; 2
    24de:	c0 f4       	brcc	.+48     	; 0x2510 <USB_Device_ProcessControlRequest+0x270>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    24e0:	80 91 e8 00 	lds	r24, 0x00E8
    24e4:	87 7f       	andi	r24, 0xF7	; 247
    24e6:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    24ea:	90 93 d9 01 	sts	0x01D9, r25

	Endpoint_ClearStatusStage();
    24ee:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    24f2:	80 91 d9 01 	lds	r24, 0x01D9
    24f6:	81 11       	cpse	r24, r1
    24f8:	04 c0       	rjmp	.+8      	; 0x2502 <USB_Device_ProcessControlRequest+0x262>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    24fa:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    24fe:	87 ff       	sbrs	r24, 7
    2500:	02 c0       	rjmp	.+4      	; 0x2506 <USB_Device_ProcessControlRequest+0x266>
    2502:	84 e0       	ldi	r24, 0x04	; 4
    2504:	01 c0       	rjmp	.+2      	; 0x2508 <USB_Device_ProcessControlRequest+0x268>
    2506:	81 e0       	ldi	r24, 0x01	; 1
    2508:	80 93 dd 01 	sts	0x01DD, r24

	EVENT_USB_Device_ConfigurationChanged();
    250c:	0e 94 b9 0c 	call	0x1972	; 0x1972 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2510:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    2514:	83 ff       	sbrs	r24, 3
    2516:	0a c0       	rjmp	.+20     	; 0x252c <USB_Device_ProcessControlRequest+0x28c>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    2518:	80 91 eb 00 	lds	r24, 0x00EB
    251c:	80 62       	ori	r24, 0x20	; 32
    251e:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2522:	80 91 e8 00 	lds	r24, 0x00E8
    2526:	87 7f       	andi	r24, 0xF7	; 247
    2528:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
    252c:	aa 96       	adiw	r28, 0x2a	; 42
    252e:	0f b6       	in	r0, 0x3f	; 63
    2530:	f8 94       	cli
    2532:	de bf       	out	0x3e, r29	; 62
    2534:	0f be       	out	0x3f, r0	; 63
    2536:	cd bf       	out	0x3d, r28	; 61
    2538:	df 91       	pop	r29
    253a:	cf 91       	pop	r28
    253c:	1f 91       	pop	r17
    253e:	0f 91       	pop	r16
    2540:	08 95       	ret

00002542 <host_set_driver>:
static uint16_t last_consumer_report = 0;


void host_set_driver(host_driver_t *d)
{
    driver = d;
    2542:	90 93 64 01 	sts	0x0164, r25
    2546:	80 93 63 01 	sts	0x0163, r24
    254a:	08 95       	ret

0000254c <host_get_driver>:
}

host_driver_t *host_get_driver(void)
{
    return driver;
}
    254c:	80 91 63 01 	lds	r24, 0x0163
    2550:	90 91 64 01 	lds	r25, 0x0164
    2554:	08 95       	ret

00002556 <host_keyboard_leds>:

uint8_t host_keyboard_leds(void)
{
    if (!driver) return 0;
    2556:	e0 91 63 01 	lds	r30, 0x0163
    255a:	f0 91 64 01 	lds	r31, 0x0164
    255e:	30 97       	sbiw	r30, 0x00	; 0
    2560:	21 f0       	breq	.+8      	; 0x256a <host_keyboard_leds+0x14>
    return (*driver->keyboard_leds)();
    2562:	01 90       	ld	r0, Z+
    2564:	f0 81       	ld	r31, Z
    2566:	e0 2d       	mov	r30, r0
    2568:	09 94       	ijmp
}
    256a:	80 e0       	ldi	r24, 0x00	; 0
    256c:	08 95       	ret

0000256e <host_keyboard_send>:
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    256e:	ff 92       	push	r15
    2570:	0f 93       	push	r16
    2572:	1f 93       	push	r17
    2574:	cf 93       	push	r28
    2576:	df 93       	push	r29
    2578:	8c 01       	movw	r16, r24
    if (!driver) return;
    257a:	e0 91 63 01 	lds	r30, 0x0163
    257e:	f0 91 64 01 	lds	r31, 0x0164
    2582:	30 97       	sbiw	r30, 0x00	; 0
    2584:	99 f1       	breq	.+102    	; 0x25ec <host_keyboard_send+0x7e>
    (*driver->send_keyboard)(report);
    2586:	02 80       	ldd	r0, Z+2	; 0x02
    2588:	f3 81       	ldd	r31, Z+3	; 0x03
    258a:	e0 2d       	mov	r30, r0
    258c:	09 95       	icall

    if (debug_keyboard) {
    258e:	80 91 c3 01 	lds	r24, 0x01C3
    2592:	82 ff       	sbrs	r24, 2
    2594:	2b c0       	rjmp	.+86     	; 0x25ec <host_keyboard_send+0x7e>
        dprint("keyboard_report: ");
    2596:	80 ff       	sbrs	r24, 0
    2598:	04 c0       	rjmp	.+8      	; 0x25a2 <host_keyboard_send+0x34>
    259a:	8c ee       	ldi	r24, 0xEC	; 236
    259c:	94 e0       	ldi	r25, 0x04	; 4
    259e:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    25a2:	e8 01       	movw	r28, r16
    if (!driver) return 0;
    return (*driver->keyboard_leds)();
}
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    25a4:	80 e1       	ldi	r24, 0x10	; 16
    25a6:	f8 2e       	mov	r15, r24
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
    25a8:	06 ee       	ldi	r16, 0xE6	; 230
    25aa:	14 e0       	ldi	r17, 0x04	; 4
    25ac:	80 91 c3 01 	lds	r24, 0x01C3
    25b0:	80 ff       	sbrs	r24, 0
    25b2:	0b c0       	rjmp	.+22     	; 0x25ca <host_keyboard_send+0x5c>
    25b4:	88 81       	ld	r24, Y
    25b6:	1f 92       	push	r1
    25b8:	8f 93       	push	r24
    25ba:	1f 93       	push	r17
    25bc:	0f 93       	push	r16
    25be:	0e 94 1e 09 	call	0x123c	; 0x123c <__xprintf>
    25c2:	0f 90       	pop	r0
    25c4:	0f 90       	pop	r0
    25c6:	0f 90       	pop	r0
    25c8:	0f 90       	pop	r0
    25ca:	fa 94       	dec	r15
    25cc:	21 96       	adiw	r28, 0x01	; 1
    if (!driver) return;
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
    25ce:	f1 10       	cpse	r15, r1
    25d0:	ed cf       	rjmp	.-38     	; 0x25ac <host_keyboard_send+0x3e>
            dprintf("%02X ", report->raw[i]);
        }
        dprint("\n");
    25d2:	80 91 c3 01 	lds	r24, 0x01C3
    25d6:	80 ff       	sbrs	r24, 0
    25d8:	09 c0       	rjmp	.+18     	; 0x25ec <host_keyboard_send+0x7e>
    25da:	84 ee       	ldi	r24, 0xE4	; 228
    25dc:	94 e0       	ldi	r25, 0x04	; 4
    }
}
    25de:	df 91       	pop	r29
    25e0:	cf 91       	pop	r28
    25e2:	1f 91       	pop	r17
    25e4:	0f 91       	pop	r16
    25e6:	ff 90       	pop	r15
    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
        }
        dprint("\n");
    25e8:	0c 94 85 08 	jmp	0x110a	; 0x110a <xputs>
    }
}
    25ec:	df 91       	pop	r29
    25ee:	cf 91       	pop	r28
    25f0:	1f 91       	pop	r17
    25f2:	0f 91       	pop	r16
    25f4:	ff 90       	pop	r15
    25f6:	08 95       	ret

000025f8 <host_mouse_send>:

void host_mouse_send(report_mouse_t *report)
{
    if (!driver) return;
    25f8:	e0 91 63 01 	lds	r30, 0x0163
    25fc:	f0 91 64 01 	lds	r31, 0x0164
    2600:	30 97       	sbiw	r30, 0x00	; 0
    2602:	21 f0       	breq	.+8      	; 0x260c <host_mouse_send+0x14>
    (*driver->send_mouse)(report);
    2604:	04 80       	ldd	r0, Z+4	; 0x04
    2606:	f5 81       	ldd	r31, Z+5	; 0x05
    2608:	e0 2d       	mov	r30, r0
    260a:	09 94       	ijmp
    260c:	08 95       	ret

0000260e <host_system_send>:
}

void host_system_send(uint16_t report)
{
    if (report == last_system_report) return;
    260e:	20 91 61 01 	lds	r18, 0x0161
    2612:	30 91 62 01 	lds	r19, 0x0162
    2616:	82 17       	cp	r24, r18
    2618:	93 07       	cpc	r25, r19
    261a:	71 f0       	breq	.+28     	; 0x2638 <host_system_send+0x2a>
    last_system_report = report;
    261c:	90 93 62 01 	sts	0x0162, r25
    2620:	80 93 61 01 	sts	0x0161, r24

    if (!driver) return;
    2624:	e0 91 63 01 	lds	r30, 0x0163
    2628:	f0 91 64 01 	lds	r31, 0x0164
    262c:	30 97       	sbiw	r30, 0x00	; 0
    262e:	21 f0       	breq	.+8      	; 0x2638 <host_system_send+0x2a>
    (*driver->send_system)(report);
    2630:	06 80       	ldd	r0, Z+6	; 0x06
    2632:	f7 81       	ldd	r31, Z+7	; 0x07
    2634:	e0 2d       	mov	r30, r0
    2636:	09 94       	ijmp
    2638:	08 95       	ret

0000263a <host_consumer_send>:
}

void host_consumer_send(uint16_t report)
{
    if (report == last_consumer_report) return;
    263a:	20 91 5f 01 	lds	r18, 0x015F
    263e:	30 91 60 01 	lds	r19, 0x0160
    2642:	82 17       	cp	r24, r18
    2644:	93 07       	cpc	r25, r19
    2646:	71 f0       	breq	.+28     	; 0x2664 <host_consumer_send+0x2a>
    last_consumer_report = report;
    2648:	90 93 60 01 	sts	0x0160, r25
    264c:	80 93 5f 01 	sts	0x015F, r24

    if (!driver) return;
    2650:	e0 91 63 01 	lds	r30, 0x0163
    2654:	f0 91 64 01 	lds	r31, 0x0164
    2658:	30 97       	sbiw	r30, 0x00	; 0
    265a:	21 f0       	breq	.+8      	; 0x2664 <host_consumer_send+0x2a>
    (*driver->send_consumer)(report);
    265c:	00 84       	ldd	r0, Z+8	; 0x08
    265e:	f1 85       	ldd	r31, Z+9	; 0x09
    2660:	e0 2d       	mov	r30, r0
    2662:	09 94       	ijmp
    2664:	08 95       	ret

00002666 <keyboard_init>:
#endif


void keyboard_init(void)
{
    timer_init();
    2666:	0e 94 e7 20 	call	0x41ce	; 0x41ce <timer_init>
    matrix_init();
    266a:	0e 94 4a 09 	call	0x1294	; 0x1294 <matrix_init>
    serial_mouse_init();
#endif


#ifdef BOOTMAGIC_ENABLE
    bootmagic();
    266e:	0c 94 b4 21 	jmp	0x4368	; 0x4368 <bootmagic>

00002672 <keyboard_set_leds>:
        keyboard_set_leds(led_status);
    }
}

void keyboard_set_leds(uint8_t leds)
{
    2672:	cf 93       	push	r28
    2674:	c8 2f       	mov	r28, r24
    if (debug_keyboard) { debug("keyboard_set_led: "); debug_hex8(leds); debug("\n"); }
    2676:	80 91 c3 01 	lds	r24, 0x01C3
    267a:	82 ff       	sbrs	r24, 2
    267c:	1e c0       	rjmp	.+60     	; 0x26ba <keyboard_set_leds+0x48>
    267e:	80 ff       	sbrs	r24, 0
    2680:	04 c0       	rjmp	.+8      	; 0x268a <keyboard_set_leds+0x18>
    2682:	85 e0       	ldi	r24, 0x05	; 5
    2684:	95 e0       	ldi	r25, 0x05	; 5
    2686:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    268a:	80 91 c3 01 	lds	r24, 0x01C3
    268e:	80 ff       	sbrs	r24, 0
    2690:	0c c0       	rjmp	.+24     	; 0x26aa <keyboard_set_leds+0x38>
    2692:	1f 92       	push	r1
    2694:	cf 93       	push	r28
    2696:	20 e0       	ldi	r18, 0x00	; 0
    2698:	35 e0       	ldi	r19, 0x05	; 5
    269a:	3f 93       	push	r19
    269c:	2f 93       	push	r18
    269e:	0e 94 1e 09 	call	0x123c	; 0x123c <__xprintf>
    26a2:	0f 90       	pop	r0
    26a4:	0f 90       	pop	r0
    26a6:	0f 90       	pop	r0
    26a8:	0f 90       	pop	r0
    26aa:	80 91 c3 01 	lds	r24, 0x01C3
    26ae:	80 ff       	sbrs	r24, 0
    26b0:	04 c0       	rjmp	.+8      	; 0x26ba <keyboard_set_leds+0x48>
    26b2:	8e ef       	ldi	r24, 0xFE	; 254
    26b4:	94 e0       	ldi	r25, 0x04	; 4
    26b6:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    led_set(leds);
    26ba:	8c 2f       	mov	r24, r28
}
    26bc:	cf 91       	pop	r28
}

void keyboard_set_leds(uint8_t leds)
{
    if (debug_keyboard) { debug("keyboard_set_led: "); debug_hex8(leds); debug("\n"); }
    led_set(leds);
    26be:	0c 94 2b 0b 	jmp	0x1656	; 0x1656 <led_set>

000026c2 <keyboard_task>:
/*
 * Do keyboard routine jobs: scan mantrix, light LEDs, ...
 * This is repeatedly called as fast as possible.
 */
void keyboard_task(void)
{
    26c2:	5f 92       	push	r5
    26c4:	6f 92       	push	r6
    26c6:	7f 92       	push	r7
    26c8:	8f 92       	push	r8
    26ca:	9f 92       	push	r9
    26cc:	af 92       	push	r10
    26ce:	bf 92       	push	r11
    26d0:	cf 92       	push	r12
    26d2:	df 92       	push	r13
    26d4:	ef 92       	push	r14
    26d6:	ff 92       	push	r15
    26d8:	0f 93       	push	r16
    26da:	1f 93       	push	r17
    26dc:	cf 93       	push	r28
    26de:	df 93       	push	r29
    26e0:	cd b7       	in	r28, 0x3d	; 61
    26e2:	de b7       	in	r29, 0x3e	; 62
    26e4:	2a 97       	sbiw	r28, 0x0a	; 10
    26e6:	0f b6       	in	r0, 0x3f	; 63
    26e8:	f8 94       	cli
    26ea:	de bf       	out	0x3e, r29	; 62
    26ec:	0f be       	out	0x3f, r0	; 63
    26ee:	cd bf       	out	0x3d, r28	; 61
    static matrix_row_t matrix_prev[MATRIX_ROWS];
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    26f0:	0e 94 69 09 	call	0x12d2	; 0x12d2 <matrix_scan>
    26f4:	96 e6       	ldi	r25, 0x66	; 102
    26f6:	c9 2e       	mov	r12, r25
    26f8:	91 e0       	ldi	r25, 0x01	; 1
    26fa:	d9 2e       	mov	r13, r25
    26fc:	00 e0       	ldi	r16, 0x00	; 0
    26fe:	10 e0       	ldi	r17, 0x00	; 0
                matrix_prev[r] = matrix_row;
                continue;
            }
#endif
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
    2700:	aa 24       	eor	r10, r10
    2702:	a3 94       	inc	r10
    2704:	b1 2c       	mov	r11, r1
    2706:	50 2e       	mov	r5, r16
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row = matrix_get_row(r);
    2708:	80 2f       	mov	r24, r16
    270a:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <matrix_get_row>
    270e:	3c 01       	movw	r6, r24
        matrix_change = matrix_row ^ matrix_prev[r];
    2710:	f6 01       	movw	r30, r12
    2712:	e1 90       	ld	r14, Z+
    2714:	f1 90       	ld	r15, Z+
    2716:	6f 01       	movw	r12, r30
    2718:	e8 26       	eor	r14, r24
    271a:	f9 26       	eor	r15, r25
        if (matrix_change) {
    271c:	e1 14       	cp	r14, r1
    271e:	f1 04       	cpc	r15, r1
    2720:	b1 f4       	brne	.+44     	; 0x274e <keyboard_task+0x8c>
    2722:	0f 5f       	subi	r16, 0xFF	; 255
    2724:	1f 4f       	sbci	r17, 0xFF	; 255
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    2726:	05 30       	cpi	r16, 0x05	; 5
    2728:	11 05       	cpc	r17, r1
    272a:	69 f7       	brne	.-38     	; 0x2706 <keyboard_task+0x44>
                }
            }
        }
    }
    // call with pseudo tick event when no real key event.
    action_exec(TICK);
    272c:	8f ef       	ldi	r24, 0xFF	; 255
    272e:	89 83       	std	Y+1, r24	; 0x01
    2730:	8a 83       	std	Y+2, r24	; 0x02
    2732:	1b 82       	std	Y+3, r1	; 0x03
    2734:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <timer_read>
    2738:	81 60       	ori	r24, 0x01	; 1
    273a:	78 2f       	mov	r23, r24
    273c:	9d 83       	std	Y+5, r25	; 0x05
    273e:	8c 83       	std	Y+4, r24	; 0x04
    2740:	49 81       	ldd	r20, Y+1	; 0x01
    2742:	5a 81       	ldd	r21, Y+2	; 0x02
    2744:	6b 81       	ldd	r22, Y+3	; 0x03
    2746:	8d 81       	ldd	r24, Y+5	; 0x05
    2748:	0e 94 1a 14 	call	0x2834	; 0x2834 <action_exec>
    274c:	3a c0       	rjmp	.+116    	; 0x27c2 <keyboard_task+0x100>
    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row = matrix_get_row(r);
        matrix_change = matrix_row ^ matrix_prev[r];
        if (matrix_change) {
            if (debug_matrix) matrix_print();
    274e:	80 91 c3 01 	lds	r24, 0x01C3
    2752:	81 fd       	sbrc	r24, 1
    2754:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <matrix_print>
    static matrix_row_t matrix_prev[MATRIX_ROWS];
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    2758:	20 e0       	ldi	r18, 0x00	; 0
    275a:	30 e0       	ldi	r19, 0x00	; 0
                matrix_prev[r] = matrix_row;
                continue;
            }
#endif
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
    275c:	45 01       	movw	r8, r10
    275e:	02 2e       	mov	r0, r18
    2760:	02 c0       	rjmp	.+4      	; 0x2766 <keyboard_task+0xa4>
    2762:	88 0c       	add	r8, r8
    2764:	99 1c       	adc	r9, r9
    2766:	0a 94       	dec	r0
    2768:	e2 f7       	brpl	.-8      	; 0x2762 <keyboard_task+0xa0>
    276a:	c4 01       	movw	r24, r8
    276c:	8e 21       	and	r24, r14
    276e:	9f 21       	and	r25, r15
    2770:	89 2b       	or	r24, r25
    2772:	09 f1       	breq	.+66     	; 0x27b6 <keyboard_task+0xf4>
                    action_exec((keyevent_t){
    2774:	2e 83       	std	Y+6, r18	; 0x06
    2776:	5f 82       	std	Y+7, r5	; 0x07
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
    2778:	68 20       	and	r6, r8
    277a:	79 20       	and	r7, r9
    277c:	81 e0       	ldi	r24, 0x01	; 1
    277e:	67 28       	or	r6, r7
    2780:	09 f4       	brne	.+2      	; 0x2784 <keyboard_task+0xc2>
    2782:	80 e0       	ldi	r24, 0x00	; 0
                continue;
            }
#endif
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    action_exec((keyevent_t){
    2784:	88 87       	std	Y+8, r24	; 0x08
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
    2786:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <timer_read>
    278a:	81 60       	ori	r24, 0x01	; 1
                continue;
            }
#endif
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    action_exec((keyevent_t){
    278c:	78 2f       	mov	r23, r24
    278e:	9a 87       	std	Y+10, r25	; 0x0a
    2790:	89 87       	std	Y+9, r24	; 0x09
    2792:	4e 81       	ldd	r20, Y+6	; 0x06
    2794:	5f 81       	ldd	r21, Y+7	; 0x07
    2796:	68 85       	ldd	r22, Y+8	; 0x08
    2798:	8a 85       	ldd	r24, Y+10	; 0x0a
    279a:	0e 94 1a 14 	call	0x2834	; 0x2834 <action_exec>
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
                    });
                    // record a processed key
                    matrix_prev[r] ^= ((matrix_row_t)1<<c);
    279e:	f8 01       	movw	r30, r16
    27a0:	ee 0f       	add	r30, r30
    27a2:	ff 1f       	adc	r31, r31
    27a4:	ea 59       	subi	r30, 0x9A	; 154
    27a6:	fe 4f       	sbci	r31, 0xFE	; 254
    27a8:	80 81       	ld	r24, Z
    27aa:	91 81       	ldd	r25, Z+1	; 0x01
    27ac:	88 25       	eor	r24, r8
    27ae:	99 25       	eor	r25, r9
    27b0:	91 83       	std	Z+1, r25	; 0x01
    27b2:	80 83       	st	Z, r24
                    // process a key per task call
                    goto MATRIX_LOOP_END;
    27b4:	06 c0       	rjmp	.+12     	; 0x27c2 <keyboard_task+0x100>
    27b6:	2f 5f       	subi	r18, 0xFF	; 255
    27b8:	3f 4f       	sbci	r19, 0xFF	; 255
            if (has_ghost_in_row(r)) {
                matrix_prev[r] = matrix_row;
                continue;
            }
#endif
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    27ba:	2f 30       	cpi	r18, 0x0F	; 15
    27bc:	31 05       	cpc	r19, r1
    27be:	71 f6       	brne	.-100    	; 0x275c <keyboard_task+0x9a>
    27c0:	b0 cf       	rjmp	.-160    	; 0x2722 <keyboard_task+0x60>

MATRIX_LOOP_END:

#ifdef MOUSEKEY_ENABLE
    // mousekey repeat & acceleration
    mousekey_task();
    27c2:	0e 94 22 25 	call	0x4a44	; 0x4a44 <mousekey_task>
#ifdef SERIAL_MOUSE_ENABLE
        serial_mouse_task();
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
    27c6:	10 91 65 01 	lds	r17, 0x0165
    27ca:	0e 94 ab 12 	call	0x2556	; 0x2556 <host_keyboard_leds>
    27ce:	18 17       	cp	r17, r24
    27d0:	d9 f0       	breq	.+54     	; 0x2808 <keyboard_task+0x146>
        led_status = host_keyboard_leds();
    27d2:	0e 94 ab 12 	call	0x2556	; 0x2556 <host_keyboard_leds>
    27d6:	80 93 65 01 	sts	0x0165, r24
        keyboard_set_leds(led_status);
    }
}
    27da:	2a 96       	adiw	r28, 0x0a	; 10
    27dc:	0f b6       	in	r0, 0x3f	; 63
    27de:	f8 94       	cli
    27e0:	de bf       	out	0x3e, r29	; 62
    27e2:	0f be       	out	0x3f, r0	; 63
    27e4:	cd bf       	out	0x3d, r28	; 61
    27e6:	df 91       	pop	r29
    27e8:	cf 91       	pop	r28
    27ea:	1f 91       	pop	r17
    27ec:	0f 91       	pop	r16
    27ee:	ff 90       	pop	r15
    27f0:	ef 90       	pop	r14
    27f2:	df 90       	pop	r13
    27f4:	cf 90       	pop	r12
    27f6:	bf 90       	pop	r11
    27f8:	af 90       	pop	r10
    27fa:	9f 90       	pop	r9
    27fc:	8f 90       	pop	r8
    27fe:	7f 90       	pop	r7
    2800:	6f 90       	pop	r6
    2802:	5f 90       	pop	r5
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
        led_status = host_keyboard_leds();
        keyboard_set_leds(led_status);
    2804:	0c 94 39 13 	jmp	0x2672	; 0x2672 <keyboard_set_leds>
    }
}
    2808:	2a 96       	adiw	r28, 0x0a	; 10
    280a:	0f b6       	in	r0, 0x3f	; 63
    280c:	f8 94       	cli
    280e:	de bf       	out	0x3e, r29	; 62
    2810:	0f be       	out	0x3f, r0	; 63
    2812:	cd bf       	out	0x3d, r28	; 61
    2814:	df 91       	pop	r29
    2816:	cf 91       	pop	r28
    2818:	1f 91       	pop	r17
    281a:	0f 91       	pop	r16
    281c:	ff 90       	pop	r15
    281e:	ef 90       	pop	r14
    2820:	df 90       	pop	r13
    2822:	cf 90       	pop	r12
    2824:	bf 90       	pop	r11
    2826:	af 90       	pop	r10
    2828:	9f 90       	pop	r9
    282a:	8f 90       	pop	r8
    282c:	7f 90       	pop	r7
    282e:	6f 90       	pop	r6
    2830:	5f 90       	pop	r5
    2832:	08 95       	ret

00002834 <action_exec>:
#include "nodebug.h"
#endif


void action_exec(keyevent_t event)
{
    2834:	cf 93       	push	r28
    2836:	df 93       	push	r29
    2838:	cd b7       	in	r28, 0x3d	; 61
    283a:	de b7       	in	r29, 0x3e	; 62
    283c:	2b 97       	sbiw	r28, 0x0b	; 11
    283e:	0f b6       	in	r0, 0x3f	; 63
    2840:	f8 94       	cli
    2842:	de bf       	out	0x3e, r29	; 62
    2844:	0f be       	out	0x3f, r0	; 63
    2846:	cd bf       	out	0x3d, r28	; 61
    2848:	4f 83       	std	Y+7, r20	; 0x07
    284a:	58 87       	std	Y+8, r21	; 0x08
    284c:	69 87       	std	Y+9, r22	; 0x09
    284e:	7a 87       	std	Y+10, r23	; 0x0a
    2850:	8b 87       	std	Y+11, r24	; 0x0b
    if (!IS_NOEVENT(event)) {
        dprint("\n---- action_exec: start -----\n");
        dprint("EVENT: "); debug_event(event); dprintln();
    }

    keyrecord_t record = { .event = event };
    2852:	de 01       	movw	r26, r28
    2854:	11 96       	adiw	r26, 0x01	; 1
    2856:	86 e0       	ldi	r24, 0x06	; 6
    2858:	fd 01       	movw	r30, r26
    285a:	11 92       	st	Z+, r1
    285c:	8a 95       	dec	r24
    285e:	e9 f7       	brne	.-6      	; 0x285a <action_exec+0x26>
    2860:	85 e0       	ldi	r24, 0x05	; 5
    2862:	fe 01       	movw	r30, r28
    2864:	37 96       	adiw	r30, 0x07	; 7
    2866:	01 90       	ld	r0, Z+
    2868:	0d 92       	st	X+, r0
    286a:	8a 95       	dec	r24
    286c:	e1 f7       	brne	.-8      	; 0x2866 <action_exec+0x32>

#ifndef NO_ACTION_TAPPING
    action_tapping_process(record);
    286e:	49 81       	ldd	r20, Y+1	; 0x01
    2870:	5a 81       	ldd	r21, Y+2	; 0x02
    2872:	6b 81       	ldd	r22, Y+3	; 0x03
    2874:	7c 81       	ldd	r23, Y+4	; 0x04
    2876:	8d 81       	ldd	r24, Y+5	; 0x05
    2878:	9e 81       	ldd	r25, Y+6	; 0x06
    287a:	0e 94 4d 1b 	call	0x369a	; 0x369a <action_tapping_process>
    process_action(&record);
    if (!IS_NOEVENT(record.event)) {
        dprint("processed: "); debug_record(record); dprintln();
    }
#endif
}
    287e:	2b 96       	adiw	r28, 0x0b	; 11
    2880:	0f b6       	in	r0, 0x3f	; 63
    2882:	f8 94       	cli
    2884:	de bf       	out	0x3e, r29	; 62
    2886:	0f be       	out	0x3f, r0	; 63
    2888:	cd bf       	out	0x3d, r28	; 61
    288a:	df 91       	pop	r29
    288c:	cf 91       	pop	r28
    288e:	08 95       	ret

00002890 <register_code>:

/*
 * Utilities for actions.
 */
void register_code(uint8_t code)
{
    2890:	cf 93       	push	r28
    2892:	c8 2f       	mov	r28, r24
    if (code == KC_NO) {
    2894:	88 23       	and	r24, r24
    2896:	09 f4       	brne	.+2      	; 0x289a <register_code+0xa>
    2898:	c1 c0       	rjmp	.+386    	; 0x2a1c <register_code+0x18c>
        return;
    }

#ifdef LOCKING_SUPPORT_ENABLE    
    else if (KC_LOCKING_CAPS == code) {
    289a:	82 38       	cpi	r24, 0x82	; 130
    289c:	59 f4       	brne	.+22     	; 0x28b4 <register_code+0x24>
#ifdef LOCKING_RESYNC_ENABLE
        // Resync: ignore if caps lock already is on
        if (host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK)) return;
    289e:	0e 94 ab 12 	call	0x2556	; 0x2556 <host_keyboard_leds>
    28a2:	81 fd       	sbrc	r24, 1
    28a4:	bb c0       	rjmp	.+374    	; 0x2a1c <register_code+0x18c>
#endif
        add_key(KC_CAPSLOCK);
    28a6:	89 e3       	ldi	r24, 0x39	; 57
    28a8:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <add_key>
        send_keyboard_report();
    28ac:	0e 94 be 1e 	call	0x3d7c	; 0x3d7c <send_keyboard_report>
        del_key(KC_CAPSLOCK);
    28b0:	89 e3       	ldi	r24, 0x39	; 57
    28b2:	0c c0       	rjmp	.+24     	; 0x28cc <register_code+0x3c>
        send_keyboard_report();
    }

    else if (KC_LOCKING_NUM == code) {
    28b4:	83 38       	cpi	r24, 0x83	; 131
    28b6:	79 f4       	brne	.+30     	; 0x28d6 <register_code+0x46>
#ifdef LOCKING_RESYNC_ENABLE
        if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
    28b8:	0e 94 ab 12 	call	0x2556	; 0x2556 <host_keyboard_leds>
    28bc:	80 fd       	sbrc	r24, 0
    28be:	ae c0       	rjmp	.+348    	; 0x2a1c <register_code+0x18c>
#endif
        add_key(KC_NUMLOCK);
    28c0:	83 e5       	ldi	r24, 0x53	; 83
    28c2:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <add_key>
        send_keyboard_report();
    28c6:	0e 94 be 1e 	call	0x3d7c	; 0x3d7c <send_keyboard_report>
        del_key(KC_NUMLOCK);
    28ca:	83 e5       	ldi	r24, 0x53	; 83
    28cc:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <del_key>
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
    28d0:	cf 91       	pop	r28
        if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
#endif
        add_key(KC_NUMLOCK);
        send_keyboard_report();
        del_key(KC_NUMLOCK);
        send_keyboard_report();
    28d2:	0c 94 be 1e 	jmp	0x3d7c	; 0x3d7c <send_keyboard_report>
    }

    else if (KC_LOCKING_SCROLL == code) {
    28d6:	84 38       	cpi	r24, 0x84	; 132
    28d8:	59 f4       	brne	.+22     	; 0x28f0 <register_code+0x60>
#ifdef LOCKING_RESYNC_ENABLE
        if (host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK)) return;
    28da:	0e 94 ab 12 	call	0x2556	; 0x2556 <host_keyboard_leds>
    28de:	82 fd       	sbrc	r24, 2
    28e0:	9d c0       	rjmp	.+314    	; 0x2a1c <register_code+0x18c>
#endif
        add_key(KC_SCROLLLOCK);
    28e2:	87 e4       	ldi	r24, 0x47	; 71
    28e4:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <add_key>
        send_keyboard_report();
    28e8:	0e 94 be 1e 	call	0x3d7c	; 0x3d7c <send_keyboard_report>
        del_key(KC_SCROLLLOCK);
    28ec:	87 e4       	ldi	r24, 0x47	; 71
    28ee:	ee cf       	rjmp	.-36     	; 0x28cc <register_code+0x3c>
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    28f0:	8c ef       	ldi	r24, 0xFC	; 252
    28f2:	8c 0f       	add	r24, r28
    28f4:	81 3a       	cpi	r24, 0xA1	; 161
    28f6:	48 f4       	brcc	.+18     	; 0x290a <register_code+0x7a>
        // TODO: should push command_proc out of this block?
        if (command_proc(code)) return;
    28f8:	8c 2f       	mov	r24, r28
    28fa:	0e 94 02 2b 	call	0x5604	; 0x5604 <command_proc>
    28fe:	81 11       	cpse	r24, r1
    2900:	8d c0       	rjmp	.+282    	; 0x2a1c <register_code+0x18c>
            oneshot_cancel();
        } else 
*/
#endif
        {
            add_key(code);
    2902:	8c 2f       	mov	r24, r28
    2904:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <add_key>
    2908:	e3 cf       	rjmp	.-58     	; 0x28d0 <register_code+0x40>
            send_keyboard_report();
        }
    }
    else if IS_MOD(code) {
    290a:	80 e2       	ldi	r24, 0x20	; 32
    290c:	8c 0f       	add	r24, r28
    290e:	88 30       	cpi	r24, 0x08	; 8
    2910:	48 f4       	brcc	.+18     	; 0x2924 <register_code+0x94>
        add_mods(MOD_BIT(code));
    2912:	c7 70       	andi	r28, 0x07	; 7
    2914:	81 e0       	ldi	r24, 0x01	; 1
    2916:	01 c0       	rjmp	.+2      	; 0x291a <register_code+0x8a>
    2918:	88 0f       	add	r24, r24
    291a:	ca 95       	dec	r28
    291c:	ea f7       	brpl	.-6      	; 0x2918 <register_code+0x88>
    291e:	0e 94 85 1e 	call	0x3d0a	; 0x3d0a <add_mods>
    2922:	d6 cf       	rjmp	.-84     	; 0x28d0 <register_code+0x40>
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
    2924:	8b e5       	ldi	r24, 0x5B	; 91
    2926:	8c 0f       	add	r24, r28
    2928:	83 30       	cpi	r24, 0x03	; 3
    292a:	78 f4       	brcc	.+30     	; 0x294a <register_code+0xba>
        host_system_send(KEYCODE2SYSTEM(code));
    292c:	c5 3a       	cpi	r28, 0xA5	; 165
    292e:	29 f0       	breq	.+10     	; 0x293a <register_code+0xaa>
    2930:	c6 3a       	cpi	r28, 0xA6	; 166
    2932:	31 f4       	brne	.+12     	; 0x2940 <register_code+0xb0>
    2934:	82 e8       	ldi	r24, 0x82	; 130
    2936:	90 e0       	ldi	r25, 0x00	; 0
    2938:	05 c0       	rjmp	.+10     	; 0x2944 <register_code+0xb4>
    293a:	81 e8       	ldi	r24, 0x81	; 129
    293c:	90 e0       	ldi	r25, 0x00	; 0
    293e:	02 c0       	rjmp	.+4      	; 0x2944 <register_code+0xb4>
    2940:	83 e8       	ldi	r24, 0x83	; 131
    2942:	90 e0       	ldi	r25, 0x00	; 0
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
    2944:	cf 91       	pop	r28
    else if IS_MOD(code) {
        add_mods(MOD_BIT(code));
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
        host_system_send(KEYCODE2SYSTEM(code));
    2946:	0c 94 07 13 	jmp	0x260e	; 0x260e <host_system_send>
    }
    else if IS_CONSUMER(code) {
    294a:	88 e5       	ldi	r24, 0x58	; 88
    294c:	8c 0f       	add	r24, r28
    294e:	83 31       	cpi	r24, 0x13	; 19
    2950:	08 f0       	brcs	.+2      	; 0x2954 <register_code+0xc4>
    2952:	64 c0       	rjmp	.+200    	; 0x2a1c <register_code+0x18c>
        host_consumer_send(KEYCODE2CONSUMER(code));
    2954:	c8 3a       	cpi	r28, 0xA8	; 168
    2956:	39 f1       	breq	.+78     	; 0x29a6 <register_code+0x116>
    2958:	c9 3a       	cpi	r28, 0xA9	; 169
    295a:	41 f1       	breq	.+80     	; 0x29ac <register_code+0x11c>
    295c:	ca 3a       	cpi	r28, 0xAA	; 170
    295e:	49 f1       	breq	.+82     	; 0x29b2 <register_code+0x122>
    2960:	cb 3a       	cpi	r28, 0xAB	; 171
    2962:	51 f1       	breq	.+84     	; 0x29b8 <register_code+0x128>
    2964:	cc 3a       	cpi	r28, 0xAC	; 172
    2966:	59 f1       	breq	.+86     	; 0x29be <register_code+0x12e>
    2968:	cd 3a       	cpi	r28, 0xAD	; 173
    296a:	61 f1       	breq	.+88     	; 0x29c4 <register_code+0x134>
    296c:	c0 3b       	cpi	r28, 0xB0	; 176
    296e:	69 f1       	breq	.+90     	; 0x29ca <register_code+0x13a>
    2970:	ce 3a       	cpi	r28, 0xAE	; 174
    2972:	71 f1       	breq	.+92     	; 0x29d0 <register_code+0x140>
    2974:	cf 3a       	cpi	r28, 0xAF	; 175
    2976:	79 f1       	breq	.+94     	; 0x29d6 <register_code+0x146>
    2978:	c1 3b       	cpi	r28, 0xB1	; 177
    297a:	81 f1       	breq	.+96     	; 0x29dc <register_code+0x14c>
    297c:	c2 3b       	cpi	r28, 0xB2	; 178
    297e:	89 f1       	breq	.+98     	; 0x29e2 <register_code+0x152>
    2980:	c3 3b       	cpi	r28, 0xB3	; 179
    2982:	91 f1       	breq	.+100    	; 0x29e8 <register_code+0x158>
    2984:	c4 3b       	cpi	r28, 0xB4	; 180
    2986:	99 f1       	breq	.+102    	; 0x29ee <register_code+0x15e>
    2988:	c5 3b       	cpi	r28, 0xB5	; 181
    298a:	a1 f1       	breq	.+104    	; 0x29f4 <register_code+0x164>
    298c:	c6 3b       	cpi	r28, 0xB6	; 182
    298e:	a9 f1       	breq	.+106    	; 0x29fa <register_code+0x16a>
    2990:	c7 3b       	cpi	r28, 0xB7	; 183
    2992:	b1 f1       	breq	.+108    	; 0x2a00 <register_code+0x170>
    2994:	c8 3b       	cpi	r28, 0xB8	; 184
    2996:	b9 f1       	breq	.+110    	; 0x2a06 <register_code+0x176>
    2998:	c9 3b       	cpi	r28, 0xB9	; 185
    299a:	c1 f1       	breq	.+112    	; 0x2a0c <register_code+0x17c>
    299c:	ca 3b       	cpi	r28, 0xBA	; 186
    299e:	c9 f5       	brne	.+114    	; 0x2a12 <register_code+0x182>
    29a0:	8a e2       	ldi	r24, 0x2A	; 42
    29a2:	92 e0       	ldi	r25, 0x02	; 2
    29a4:	38 c0       	rjmp	.+112    	; 0x2a16 <register_code+0x186>
    29a6:	82 ee       	ldi	r24, 0xE2	; 226
    29a8:	90 e0       	ldi	r25, 0x00	; 0
    29aa:	35 c0       	rjmp	.+106    	; 0x2a16 <register_code+0x186>
    29ac:	89 ee       	ldi	r24, 0xE9	; 233
    29ae:	90 e0       	ldi	r25, 0x00	; 0
    29b0:	32 c0       	rjmp	.+100    	; 0x2a16 <register_code+0x186>
    29b2:	8a ee       	ldi	r24, 0xEA	; 234
    29b4:	90 e0       	ldi	r25, 0x00	; 0
    29b6:	2f c0       	rjmp	.+94     	; 0x2a16 <register_code+0x186>
    29b8:	85 eb       	ldi	r24, 0xB5	; 181
    29ba:	90 e0       	ldi	r25, 0x00	; 0
    29bc:	2c c0       	rjmp	.+88     	; 0x2a16 <register_code+0x186>
    29be:	86 eb       	ldi	r24, 0xB6	; 182
    29c0:	90 e0       	ldi	r25, 0x00	; 0
    29c2:	29 c0       	rjmp	.+82     	; 0x2a16 <register_code+0x186>
    29c4:	87 eb       	ldi	r24, 0xB7	; 183
    29c6:	90 e0       	ldi	r25, 0x00	; 0
    29c8:	26 c0       	rjmp	.+76     	; 0x2a16 <register_code+0x186>
    29ca:	8c ec       	ldi	r24, 0xCC	; 204
    29cc:	90 e0       	ldi	r25, 0x00	; 0
    29ce:	23 c0       	rjmp	.+70     	; 0x2a16 <register_code+0x186>
    29d0:	8d ec       	ldi	r24, 0xCD	; 205
    29d2:	90 e0       	ldi	r25, 0x00	; 0
    29d4:	20 c0       	rjmp	.+64     	; 0x2a16 <register_code+0x186>
    29d6:	83 e8       	ldi	r24, 0x83	; 131
    29d8:	91 e0       	ldi	r25, 0x01	; 1
    29da:	1d c0       	rjmp	.+58     	; 0x2a16 <register_code+0x186>
    29dc:	8a e8       	ldi	r24, 0x8A	; 138
    29de:	91 e0       	ldi	r25, 0x01	; 1
    29e0:	1a c0       	rjmp	.+52     	; 0x2a16 <register_code+0x186>
    29e2:	82 e9       	ldi	r24, 0x92	; 146
    29e4:	91 e0       	ldi	r25, 0x01	; 1
    29e6:	17 c0       	rjmp	.+46     	; 0x2a16 <register_code+0x186>
    29e8:	84 e9       	ldi	r24, 0x94	; 148
    29ea:	91 e0       	ldi	r25, 0x01	; 1
    29ec:	14 c0       	rjmp	.+40     	; 0x2a16 <register_code+0x186>
    29ee:	81 e2       	ldi	r24, 0x21	; 33
    29f0:	92 e0       	ldi	r25, 0x02	; 2
    29f2:	11 c0       	rjmp	.+34     	; 0x2a16 <register_code+0x186>
    29f4:	83 e2       	ldi	r24, 0x23	; 35
    29f6:	92 e0       	ldi	r25, 0x02	; 2
    29f8:	0e c0       	rjmp	.+28     	; 0x2a16 <register_code+0x186>
    29fa:	84 e2       	ldi	r24, 0x24	; 36
    29fc:	92 e0       	ldi	r25, 0x02	; 2
    29fe:	0b c0       	rjmp	.+22     	; 0x2a16 <register_code+0x186>
    2a00:	85 e2       	ldi	r24, 0x25	; 37
    2a02:	92 e0       	ldi	r25, 0x02	; 2
    2a04:	08 c0       	rjmp	.+16     	; 0x2a16 <register_code+0x186>
    2a06:	86 e2       	ldi	r24, 0x26	; 38
    2a08:	92 e0       	ldi	r25, 0x02	; 2
    2a0a:	05 c0       	rjmp	.+10     	; 0x2a16 <register_code+0x186>
    2a0c:	87 e2       	ldi	r24, 0x27	; 39
    2a0e:	92 e0       	ldi	r25, 0x02	; 2
    2a10:	02 c0       	rjmp	.+4      	; 0x2a16 <register_code+0x186>
    2a12:	80 e0       	ldi	r24, 0x00	; 0
    2a14:	90 e0       	ldi	r25, 0x00	; 0
    }
}
    2a16:	cf 91       	pop	r28
    }
    else if IS_SYSTEM(code) {
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    2a18:	0c 94 1d 13 	jmp	0x263a	; 0x263a <host_consumer_send>
    }
}
    2a1c:	cf 91       	pop	r28
    2a1e:	08 95       	ret

00002a20 <unregister_code>:

void unregister_code(uint8_t code)
{
    if (code == KC_NO) {
    2a20:	88 23       	and	r24, r24
    2a22:	09 f4       	brne	.+2      	; 0x2a26 <unregister_code+0x6>
    2a24:	4b c0       	rjmp	.+150    	; 0x2abc <unregister_code+0x9c>
        return;
    }

#ifdef LOCKING_SUPPORT_ENABLE
    else if (KC_LOCKING_CAPS == code) {
    2a26:	82 38       	cpi	r24, 0x82	; 130
    2a28:	59 f4       	brne	.+22     	; 0x2a40 <unregister_code+0x20>
#ifdef LOCKING_RESYNC_ENABLE
        // Resync: ignore if caps lock already is off
        if (!(host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK))) return;
    2a2a:	0e 94 ab 12 	call	0x2556	; 0x2556 <host_keyboard_leds>
    2a2e:	81 ff       	sbrs	r24, 1
    2a30:	45 c0       	rjmp	.+138    	; 0x2abc <unregister_code+0x9c>
#endif
        add_key(KC_CAPSLOCK);
    2a32:	89 e3       	ldi	r24, 0x39	; 57
    2a34:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <add_key>
        send_keyboard_report();
    2a38:	0e 94 be 1e 	call	0x3d7c	; 0x3d7c <send_keyboard_report>
        del_key(KC_CAPSLOCK);
    2a3c:	89 e3       	ldi	r24, 0x39	; 57
    2a3e:	0c c0       	rjmp	.+24     	; 0x2a58 <unregister_code+0x38>
        send_keyboard_report();
    }

    else if (KC_LOCKING_NUM == code) {
    2a40:	83 38       	cpi	r24, 0x83	; 131
    2a42:	71 f4       	brne	.+28     	; 0x2a60 <unregister_code+0x40>
#ifdef LOCKING_RESYNC_ENABLE
        if (!(host_keyboard_leds() & (1<<USB_LED_NUM_LOCK))) return;
    2a44:	0e 94 ab 12 	call	0x2556	; 0x2556 <host_keyboard_leds>
    2a48:	80 ff       	sbrs	r24, 0
    2a4a:	38 c0       	rjmp	.+112    	; 0x2abc <unregister_code+0x9c>
#endif
        add_key(KC_NUMLOCK);
    2a4c:	83 e5       	ldi	r24, 0x53	; 83
    2a4e:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <add_key>
        send_keyboard_report();
    2a52:	0e 94 be 1e 	call	0x3d7c	; 0x3d7c <send_keyboard_report>
        del_key(KC_NUMLOCK);
    2a56:	83 e5       	ldi	r24, 0x53	; 83
    2a58:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <del_key>
        send_keyboard_report();
    2a5c:	0c 94 be 1e 	jmp	0x3d7c	; 0x3d7c <send_keyboard_report>
    }

    else if (KC_LOCKING_SCROLL == code) {
    2a60:	84 38       	cpi	r24, 0x84	; 132
    2a62:	59 f4       	brne	.+22     	; 0x2a7a <unregister_code+0x5a>
#ifdef LOCKING_RESYNC_ENABLE
        if (!(host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK))) return;
    2a64:	0e 94 ab 12 	call	0x2556	; 0x2556 <host_keyboard_leds>
    2a68:	82 ff       	sbrs	r24, 2
    2a6a:	28 c0       	rjmp	.+80     	; 0x2abc <unregister_code+0x9c>
#endif
        add_key(KC_SCROLLLOCK);
    2a6c:	87 e4       	ldi	r24, 0x47	; 71
    2a6e:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <add_key>
        send_keyboard_report();
    2a72:	0e 94 be 1e 	call	0x3d7c	; 0x3d7c <send_keyboard_report>
        del_key(KC_SCROLLLOCK);
    2a76:	87 e4       	ldi	r24, 0x47	; 71
    2a78:	ef cf       	rjmp	.-34     	; 0x2a58 <unregister_code+0x38>
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    2a7a:	9c ef       	ldi	r25, 0xFC	; 252
    2a7c:	98 0f       	add	r25, r24
    2a7e:	91 3a       	cpi	r25, 0xA1	; 161
    2a80:	58 f3       	brcs	.-42     	; 0x2a58 <unregister_code+0x38>
        del_key(code);
        send_keyboard_report();
    }
    else if IS_MOD(code) {
    2a82:	90 e2       	ldi	r25, 0x20	; 32
    2a84:	98 0f       	add	r25, r24
    2a86:	98 30       	cpi	r25, 0x08	; 8
    2a88:	50 f4       	brcc	.+20     	; 0x2a9e <unregister_code+0x7e>
        del_mods(MOD_BIT(code));
    2a8a:	87 70       	andi	r24, 0x07	; 7
    2a8c:	91 e0       	ldi	r25, 0x01	; 1
    2a8e:	01 c0       	rjmp	.+2      	; 0x2a92 <unregister_code+0x72>
    2a90:	99 0f       	add	r25, r25
    2a92:	8a 95       	dec	r24
    2a94:	ea f7       	brpl	.-6      	; 0x2a90 <unregister_code+0x70>
    2a96:	89 2f       	mov	r24, r25
    2a98:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <del_mods>
    2a9c:	df cf       	rjmp	.-66     	; 0x2a5c <unregister_code+0x3c>
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
    2a9e:	9b e5       	ldi	r25, 0x5B	; 91
    2aa0:	98 0f       	add	r25, r24
    2aa2:	93 30       	cpi	r25, 0x03	; 3
    2aa4:	20 f4       	brcc	.+8      	; 0x2aae <unregister_code+0x8e>
        host_system_send(0);
    2aa6:	80 e0       	ldi	r24, 0x00	; 0
    2aa8:	90 e0       	ldi	r25, 0x00	; 0
    2aaa:	0c 94 07 13 	jmp	0x260e	; 0x260e <host_system_send>
    }
    else if IS_CONSUMER(code) {
    2aae:	88 5a       	subi	r24, 0xA8	; 168
    2ab0:	83 31       	cpi	r24, 0x13	; 19
    2ab2:	20 f4       	brcc	.+8      	; 0x2abc <unregister_code+0x9c>
        host_consumer_send(0);
    2ab4:	80 e0       	ldi	r24, 0x00	; 0
    2ab6:	90 e0       	ldi	r25, 0x00	; 0
    2ab8:	0c 94 1d 13 	jmp	0x263a	; 0x263a <host_consumer_send>
    2abc:	08 95       	ret

00002abe <register_mods>:
    }
}

void register_mods(uint8_t mods)
{
    if (mods) {
    2abe:	88 23       	and	r24, r24
    2ac0:	21 f0       	breq	.+8      	; 0x2aca <register_mods+0xc>
        add_mods(mods);
    2ac2:	0e 94 85 1e 	call	0x3d0a	; 0x3d0a <add_mods>
        send_keyboard_report();
    2ac6:	0c 94 be 1e 	jmp	0x3d7c	; 0x3d7c <send_keyboard_report>
    2aca:	08 95       	ret

00002acc <unregister_mods>:
    }
}

void unregister_mods(uint8_t mods)
{
    if (mods) {
    2acc:	88 23       	and	r24, r24
    2ace:	21 f0       	breq	.+8      	; 0x2ad8 <unregister_mods+0xc>
        del_mods(mods);
    2ad0:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <del_mods>
        send_keyboard_report();
    2ad4:	0c 94 be 1e 	jmp	0x3d7c	; 0x3d7c <send_keyboard_report>
    2ad8:	08 95       	ret

00002ada <process_action>:
    }
#endif
}

void process_action(keyrecord_t *record)
{
    2ada:	cf 92       	push	r12
    2adc:	df 92       	push	r13
    2ade:	ef 92       	push	r14
    2ae0:	ff 92       	push	r15
    2ae2:	0f 93       	push	r16
    2ae4:	1f 93       	push	r17
    2ae6:	cf 93       	push	r28
    2ae8:	df 93       	push	r29
    2aea:	cd b7       	in	r28, 0x3d	; 61
    2aec:	de b7       	in	r29, 0x3e	; 62
    2aee:	28 97       	sbiw	r28, 0x08	; 8
    2af0:	0f b6       	in	r0, 0x3f	; 63
    2af2:	f8 94       	cli
    2af4:	de bf       	out	0x3e, r29	; 62
    2af6:	0f be       	out	0x3f, r0	; 63
    2af8:	cd bf       	out	0x3d, r28	; 61
    2afa:	8c 01       	movw	r16, r24
    keyevent_t event = record->event;
    2afc:	85 e0       	ldi	r24, 0x05	; 5
    2afe:	f8 01       	movw	r30, r16
    2b00:	de 01       	movw	r26, r28
    2b02:	11 96       	adiw	r26, 0x01	; 1
    2b04:	01 90       	ld	r0, Z+
    2b06:	0d 92       	st	X+, r0
    2b08:	8a 95       	dec	r24
    2b0a:	e1 f7       	brne	.-8      	; 0x2b04 <process_action+0x2a>
    2b0c:	f8 01       	movw	r30, r16
    2b0e:	40 81       	ld	r20, Z
    2b10:	31 81       	ldd	r19, Z+1	; 0x01
    2b12:	f2 80       	ldd	r15, Z+2	; 0x02
#ifndef NO_ACTION_TAPPING
    uint8_t tap_count = record->tap.count;
    2b14:	25 81       	ldd	r18, Z+5	; 0x05
    2b16:	22 95       	swap	r18
    2b18:	2f 70       	andi	r18, 0x0F	; 15

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    2b1a:	83 81       	ldd	r24, Z+3	; 0x03
    2b1c:	94 81       	ldd	r25, Z+4	; 0x04
    2b1e:	89 2b       	or	r24, r25
    2b20:	31 f0       	breq	.+12     	; 0x2b2e <process_action+0x54>
    2b22:	3f 3f       	cpi	r19, 0xFF	; 255
    2b24:	31 f4       	brne	.+12     	; 0x2b32 <process_action+0x58>
    2b26:	81 e0       	ldi	r24, 0x01	; 1
    2b28:	4f 3f       	cpi	r20, 0xFF	; 255
    2b2a:	19 f4       	brne	.+6      	; 0x2b32 <process_action+0x58>
    2b2c:	03 c0       	rjmp	.+6      	; 0x2b34 <process_action+0x5a>
    2b2e:	81 e0       	ldi	r24, 0x01	; 1
    2b30:	01 c0       	rjmp	.+2      	; 0x2b34 <process_action+0x5a>
    2b32:	80 e0       	ldi	r24, 0x00	; 0
#endif

    if (IS_NOEVENT(event)) { return; }
    2b34:	80 fd       	sbrc	r24, 0
    2b36:	c8 c2       	rjmp	.+1424   	; 0x30c8 <process_action+0x5ee>

    action_t action = layer_switch_get_action(event.key);
    2b38:	49 83       	std	Y+1, r20	; 0x01
    2b3a:	3a 83       	std	Y+2, r19	; 0x02
    2b3c:	89 81       	ldd	r24, Y+1	; 0x01
    2b3e:	9a 81       	ldd	r25, Y+2	; 0x02
    2b40:	2f 83       	std	Y+7, r18	; 0x07
    2b42:	0e 94 a8 1d 	call	0x3b50	; 0x3b50 <layer_switch_get_action>
    dprint("ACTION: "); debug_action(action);
#ifndef NO_ACTION_LAYER
    dprint(" layer_state: "); layer_debug();
    2b46:	9e 83       	std	Y+6, r25	; 0x06
    2b48:	88 87       	std	Y+8, r24	; 0x08
    2b4a:	0e 94 a7 1d 	call	0x3b4e	; 0x3b4e <layer_debug>
    dprint(" default_layer_state: "); default_layer_debug();
    2b4e:	0e 94 7a 1c 	call	0x38f4	; 0x38f4 <default_layer_debug>
#endif
    dprintln();

    switch (action.kind.id) {
    2b52:	4e 81       	ldd	r20, Y+6	; 0x06
    2b54:	e4 2f       	mov	r30, r20
    2b56:	e2 95       	swap	r30
    2b58:	ef 70       	andi	r30, 0x0F	; 15
    2b5a:	f0 e0       	ldi	r31, 0x00	; 0
    2b5c:	e0 5a       	subi	r30, 0xA0	; 160
    2b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b60:	2f 81       	ldd	r18, Y+7	; 0x07
    2b62:	68 85       	ldd	r22, Y+8	; 0x08
    2b64:	0c 94 a8 2d 	jmp	0x5b50	; 0x5b50 <__tablejump2__>
        /* Key and Mods */
        case ACT_LMODS:
        case ACT_RMODS:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
    2b68:	84 2f       	mov	r24, r20
    2b6a:	80 7f       	andi	r24, 0xF0	; 240
    2b6c:	14 2f       	mov	r17, r20
    2b6e:	1f 70       	andi	r17, 0x0F	; 15
    2b70:	88 23       	and	r24, r24
    2b72:	11 f0       	breq	.+4      	; 0x2b78 <process_action+0x9e>
    2b74:	12 95       	swap	r17
    2b76:	10 7f       	andi	r17, 0xF0	; 240
                                                                action.key.mods<<4;
                if (event.pressed) {
    2b78:	ff 20       	and	r15, r15
    2b7a:	59 f0       	breq	.+22     	; 0x2b92 <process_action+0xb8>
                    if (mods) {
    2b7c:	11 23       	and	r17, r17
    2b7e:	09 f4       	brne	.+2      	; 0x2b82 <process_action+0xa8>
    2b80:	58 c2       	rjmp	.+1200   	; 0x3032 <process_action+0x558>
                        add_weak_mods(mods);
    2b82:	81 2f       	mov	r24, r17
    2b84:	68 87       	std	Y+8, r22	; 0x08
    2b86:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <add_weak_mods>
                        send_keyboard_report();
    2b8a:	0e 94 be 1e 	call	0x3d7c	; 0x3d7c <send_keyboard_report>
    2b8e:	68 85       	ldd	r22, Y+8	; 0x08
    2b90:	50 c2       	rjmp	.+1184   	; 0x3032 <process_action+0x558>
                    }
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
    2b92:	86 2f       	mov	r24, r22
    2b94:	0e 94 10 15 	call	0x2a20	; 0x2a20 <unregister_code>
                    if (mods) {
    2b98:	11 23       	and	r17, r17
    2b9a:	09 f4       	brne	.+2      	; 0x2b9e <process_action+0xc4>
    2b9c:	95 c2       	rjmp	.+1322   	; 0x30c8 <process_action+0x5ee>
                        del_weak_mods(mods);
    2b9e:	81 2f       	mov	r24, r17
    2ba0:	0e 94 9b 1e 	call	0x3d36	; 0x3d36 <del_weak_mods>
            break;
#endif
        default:
            break;
    }
}
    2ba4:	28 96       	adiw	r28, 0x08	; 8
    2ba6:	0f b6       	in	r0, 0x3f	; 63
    2ba8:	f8 94       	cli
    2baa:	de bf       	out	0x3e, r29	; 62
    2bac:	0f be       	out	0x3f, r0	; 63
    2bae:	cd bf       	out	0x3d, r28	; 61
    2bb0:	df 91       	pop	r29
    2bb2:	cf 91       	pop	r28
    2bb4:	1f 91       	pop	r17
    2bb6:	0f 91       	pop	r16
    2bb8:	ff 90       	pop	r15
    2bba:	ef 90       	pop	r14
    2bbc:	df 90       	pop	r13
    2bbe:	cf 90       	pop	r12
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
                    if (mods) {
                        del_weak_mods(mods);
                        send_keyboard_report();
    2bc0:	0c 94 be 1e 	jmp	0x3d7c	; 0x3d7c <send_keyboard_report>
            break;
#ifndef NO_ACTION_TAPPING
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
    2bc4:	34 2f       	mov	r19, r20
    2bc6:	30 7f       	andi	r19, 0xF0	; 240
    2bc8:	84 2f       	mov	r24, r20
    2bca:	8f 70       	andi	r24, 0x0F	; 15
    2bcc:	30 32       	cpi	r19, 0x20	; 32
    2bce:	11 f0       	breq	.+4      	; 0x2bd4 <process_action+0xfa>
    2bd0:	82 95       	swap	r24
    2bd2:	80 7f       	andi	r24, 0xF0	; 240
                                                                    action.key.mods<<4;
                switch (action.layer_tap.code) {
    2bd4:	66 23       	and	r22, r22
    2bd6:	19 f0       	breq	.+6      	; 0x2bde <process_action+0x104>
    2bd8:	61 30       	cpi	r22, 0x01	; 1
    2bda:	09 f1       	breq	.+66     	; 0x2c1e <process_action+0x144>
    2bdc:	2a c0       	rjmp	.+84     	; 0x2c32 <process_action+0x158>
    #ifndef NO_ACTION_ONESHOT
                    case MODS_ONESHOT:
                        // Oneshot modifier
                        if (event.pressed) {
    2bde:	ff 20       	and	r15, r15
    2be0:	a1 f0       	breq	.+40     	; 0x2c0a <process_action+0x130>
                            if (tap_count == 0) {
    2be2:	22 23       	and	r18, r18
    2be4:	81 f1       	breq	.+96     	; 0x2c46 <process_action+0x16c>
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
    2be6:	21 30       	cpi	r18, 0x01	; 1
    2be8:	71 f5       	brne	.+92     	; 0x2c46 <process_action+0x16c>
            break;
#endif
        default:
            break;
    }
}
    2bea:	28 96       	adiw	r28, 0x08	; 8
    2bec:	0f b6       	in	r0, 0x3f	; 63
    2bee:	f8 94       	cli
    2bf0:	de bf       	out	0x3e, r29	; 62
    2bf2:	0f be       	out	0x3f, r0	; 63
    2bf4:	cd bf       	out	0x3d, r28	; 61
    2bf6:	df 91       	pop	r29
    2bf8:	cf 91       	pop	r28
    2bfa:	1f 91       	pop	r17
    2bfc:	0f 91       	pop	r16
    2bfe:	ff 90       	pop	r15
    2c00:	ef 90       	pop	r14
    2c02:	df 90       	pop	r13
    2c04:	cf 90       	pop	r12
                            if (tap_count == 0) {
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
                                dprint("MODS_TAP: Oneshot: start\n");
                                set_oneshot_mods(mods);
    2c06:	0c 94 a5 1e 	jmp	0x3d4a	; 0x3d4a <set_oneshot_mods>
                            }
                            else {
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count == 0) {
    2c0a:	22 23       	and	r18, r18
    2c0c:	19 f0       	breq	.+6      	; 0x2c14 <process_action+0x13a>
                                clear_oneshot_mods();
                                unregister_mods(mods);
                            }
                            else if (tap_count == 1) {
    2c0e:	21 30       	cpi	r18, 0x01	; 1
    2c10:	09 f4       	brne	.+2      	; 0x2c14 <process_action+0x13a>
    2c12:	5a c2       	rjmp	.+1204   	; 0x30c8 <process_action+0x5ee>
                                // Retain Oneshot mods
                            }
                            else {
                                clear_oneshot_mods();
    2c14:	8e 83       	std	Y+6, r24	; 0x06
    2c16:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <clear_oneshot_mods>
                                unregister_mods(mods);
    2c1a:	8e 81       	ldd	r24, Y+6	; 0x06
    2c1c:	8e c1       	rjmp	.+796    	; 0x2f3a <process_action+0x460>
                            }
                        }
                        break;
    #endif
                    case MODS_TAP_TOGGLE:
                        if (event.pressed) {
    2c1e:	ff 20       	and	r15, r15
    2c20:	21 f0       	breq	.+8      	; 0x2c2a <process_action+0x150>
                            if (tap_count <= TAPPING_TOGGLE) {
    2c22:	26 30       	cpi	r18, 0x06	; 6
    2c24:	08 f0       	brcs	.+2      	; 0x2c28 <process_action+0x14e>
    2c26:	50 c2       	rjmp	.+1184   	; 0x30c8 <process_action+0x5ee>
    2c28:	0e c0       	rjmp	.+28     	; 0x2c46 <process_action+0x16c>
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count < TAPPING_TOGGLE) {
    2c2a:	25 30       	cpi	r18, 0x05	; 5
    2c2c:	08 f0       	brcs	.+2      	; 0x2c30 <process_action+0x156>
    2c2e:	4c c2       	rjmp	.+1176   	; 0x30c8 <process_action+0x5ee>
    2c30:	84 c1       	rjmp	.+776    	; 0x2f3a <process_action+0x460>
                                unregister_mods(mods);
                            }
                        }
                        break;
                    default:
                        if (event.pressed) {
    2c32:	ff 20       	and	r15, r15
    2c34:	c1 f0       	breq	.+48     	; 0x2c66 <process_action+0x18c>
                            if (tap_count > 0) {
    2c36:	22 23       	and	r18, r18
    2c38:	31 f0       	breq	.+12     	; 0x2c46 <process_action+0x16c>
                                if (record->tap.interrupted) {
    2c3a:	f8 01       	movw	r30, r16
    2c3c:	95 81       	ldd	r25, Z+5	; 0x05
    2c3e:	90 ff       	sbrs	r25, 0
    2c40:	f8 c1       	rjmp	.+1008   	; 0x3032 <process_action+0x558>
                                    dprint("MODS_TAP: Tap: Cancel: add_mods\n");
                                    // ad hoc: set 0 to cancel tap
                                    record->tap.count = 0;
    2c42:	9f 70       	andi	r25, 0x0F	; 15
    2c44:	95 83       	std	Z+5, r25	; 0x05
            break;
#endif
        default:
            break;
    }
}
    2c46:	28 96       	adiw	r28, 0x08	; 8
    2c48:	0f b6       	in	r0, 0x3f	; 63
    2c4a:	f8 94       	cli
    2c4c:	de bf       	out	0x3e, r29	; 62
    2c4e:	0f be       	out	0x3f, r0	; 63
    2c50:	cd bf       	out	0x3d, r28	; 61
    2c52:	df 91       	pop	r29
    2c54:	cf 91       	pop	r28
    2c56:	1f 91       	pop	r17
    2c58:	0f 91       	pop	r16
    2c5a:	ff 90       	pop	r15
    2c5c:	ef 90       	pop	r14
    2c5e:	df 90       	pop	r13
    2c60:	cf 90       	pop	r12
                            if (tap_count > 0) {
                                if (record->tap.interrupted) {
                                    dprint("MODS_TAP: Tap: Cancel: add_mods\n");
                                    // ad hoc: set 0 to cancel tap
                                    record->tap.count = 0;
                                    register_mods(mods);
    2c62:	0c 94 5f 15 	jmp	0x2abe	; 0x2abe <register_mods>
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count > 0) {
    2c66:	22 23       	and	r18, r18
    2c68:	09 f4       	brne	.+2      	; 0x2c6c <process_action+0x192>
    2c6a:	67 c1       	rjmp	.+718    	; 0x2f3a <process_action+0x460>
    2c6c:	f6 c1       	rjmp	.+1004   	; 0x305a <process_action+0x580>
            break;
#endif
#ifdef EXTRAKEY_ENABLE
        /* other HID usage */
        case ACT_USAGE:
            switch (action.usage.page) {
    2c6e:	24 2f       	mov	r18, r20
    2c70:	26 95       	lsr	r18
    2c72:	26 95       	lsr	r18
    2c74:	23 70       	andi	r18, 0x03	; 3
    2c76:	30 e0       	ldi	r19, 0x00	; 0
    2c78:	21 15       	cp	r18, r1
    2c7a:	31 05       	cpc	r19, r1
    2c7c:	21 f0       	breq	.+8      	; 0x2c86 <process_action+0x1ac>
    2c7e:	21 30       	cpi	r18, 0x01	; 1
    2c80:	31 05       	cpc	r19, r1
    2c82:	c9 f0       	breq	.+50     	; 0x2cb6 <process_action+0x1dc>
    2c84:	21 c2       	rjmp	.+1090   	; 0x30c8 <process_action+0x5ee>
                case PAGE_SYSTEM:
                    if (event.pressed) {
    2c86:	ff 20       	and	r15, r15
    2c88:	21 f0       	breq	.+8      	; 0x2c92 <process_action+0x1b8>
                        host_system_send(action.usage.code);
    2c8a:	86 2f       	mov	r24, r22
    2c8c:	94 2f       	mov	r25, r20
    2c8e:	93 70       	andi	r25, 0x03	; 3
    2c90:	02 c0       	rjmp	.+4      	; 0x2c96 <process_action+0x1bc>
                    } else {
                        host_system_send(0);
    2c92:	80 e0       	ldi	r24, 0x00	; 0
    2c94:	90 e0       	ldi	r25, 0x00	; 0
            break;
#endif
        default:
            break;
    }
}
    2c96:	28 96       	adiw	r28, 0x08	; 8
    2c98:	0f b6       	in	r0, 0x3f	; 63
    2c9a:	f8 94       	cli
    2c9c:	de bf       	out	0x3e, r29	; 62
    2c9e:	0f be       	out	0x3f, r0	; 63
    2ca0:	cd bf       	out	0x3d, r28	; 61
    2ca2:	df 91       	pop	r29
    2ca4:	cf 91       	pop	r28
    2ca6:	1f 91       	pop	r17
    2ca8:	0f 91       	pop	r16
    2caa:	ff 90       	pop	r15
    2cac:	ef 90       	pop	r14
    2cae:	df 90       	pop	r13
    2cb0:	cf 90       	pop	r12
            switch (action.usage.page) {
                case PAGE_SYSTEM:
                    if (event.pressed) {
                        host_system_send(action.usage.code);
                    } else {
                        host_system_send(0);
    2cb2:	0c 94 07 13 	jmp	0x260e	; 0x260e <host_system_send>
                    }
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
    2cb6:	ff 20       	and	r15, r15
    2cb8:	21 f0       	breq	.+8      	; 0x2cc2 <process_action+0x1e8>
                        host_consumer_send(action.usage.code);
    2cba:	86 2f       	mov	r24, r22
    2cbc:	94 2f       	mov	r25, r20
    2cbe:	93 70       	andi	r25, 0x03	; 3
    2cc0:	02 c0       	rjmp	.+4      	; 0x2cc6 <process_action+0x1ec>
                    } else {
                        host_consumer_send(0);
    2cc2:	80 e0       	ldi	r24, 0x00	; 0
    2cc4:	90 e0       	ldi	r25, 0x00	; 0
            break;
#endif
        default:
            break;
    }
}
    2cc6:	28 96       	adiw	r28, 0x08	; 8
    2cc8:	0f b6       	in	r0, 0x3f	; 63
    2cca:	f8 94       	cli
    2ccc:	de bf       	out	0x3e, r29	; 62
    2cce:	0f be       	out	0x3f, r0	; 63
    2cd0:	cd bf       	out	0x3d, r28	; 61
    2cd2:	df 91       	pop	r29
    2cd4:	cf 91       	pop	r28
    2cd6:	1f 91       	pop	r17
    2cd8:	0f 91       	pop	r16
    2cda:	ff 90       	pop	r15
    2cdc:	ef 90       	pop	r14
    2cde:	df 90       	pop	r13
    2ce0:	cf 90       	pop	r12
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
                        host_consumer_send(action.usage.code);
                    } else {
                        host_consumer_send(0);
    2ce2:	0c 94 1d 13 	jmp	0x263a	; 0x263a <host_consumer_send>
#endif
#ifdef MOUSEKEY_ENABLE
        /* Mouse key */
        case ACT_MOUSEKEY:
            if (event.pressed) {
                mousekey_on(action.key.code);
    2ce6:	86 2f       	mov	r24, r22
            break;
#endif
#ifdef MOUSEKEY_ENABLE
        /* Mouse key */
        case ACT_MOUSEKEY:
            if (event.pressed) {
    2ce8:	ff 20       	and	r15, r15
    2cea:	19 f0       	breq	.+6      	; 0x2cf2 <process_action+0x218>
                mousekey_on(action.key.code);
    2cec:	0e 94 a8 23 	call	0x4750	; 0x4750 <mousekey_on>
    2cf0:	02 c0       	rjmp	.+4      	; 0x2cf6 <process_action+0x21c>
                mousekey_send();
            } else {
                mousekey_off(action.key.code);
    2cf2:	0e 94 10 24 	call	0x4820	; 0x4820 <mousekey_off>
            break;
#endif
        default:
            break;
    }
}
    2cf6:	28 96       	adiw	r28, 0x08	; 8
    2cf8:	0f b6       	in	r0, 0x3f	; 63
    2cfa:	f8 94       	cli
    2cfc:	de bf       	out	0x3e, r29	; 62
    2cfe:	0f be       	out	0x3f, r0	; 63
    2d00:	cd bf       	out	0x3d, r28	; 61
    2d02:	df 91       	pop	r29
    2d04:	cf 91       	pop	r28
    2d06:	1f 91       	pop	r17
    2d08:	0f 91       	pop	r16
    2d0a:	ff 90       	pop	r15
    2d0c:	ef 90       	pop	r14
    2d0e:	df 90       	pop	r13
    2d10:	cf 90       	pop	r12
            if (event.pressed) {
                mousekey_on(action.key.code);
                mousekey_send();
            } else {
                mousekey_off(action.key.code);
                mousekey_send();
    2d12:	0c 94 95 24 	jmp	0x492a	; 0x492a <mousekey_send>
            }
            break;
#endif
#ifndef NO_ACTION_LAYER
        case ACT_LAYER:
            if (action.layer_bitop.on == 0) {
    2d16:	84 2f       	mov	r24, r20
    2d18:	83 70       	andi	r24, 0x03	; 3
    2d1a:	09 f0       	breq	.+2      	; 0x2d1e <process_action+0x244>
    2d1c:	76 c0       	rjmp	.+236    	; 0x2e0a <process_action+0x330>
                /* Default Layer Bitwise Operation */
                if (!event.pressed) {
    2d1e:	f1 10       	cpse	r15, r1
    2d20:	d3 c1       	rjmp	.+934    	; 0x30c8 <process_action+0x5ee>
                    uint8_t shift = action.layer_bitop.part*4;
    2d22:	26 2f       	mov	r18, r22
    2d24:	22 95       	swap	r18
    2d26:	26 95       	lsr	r18
    2d28:	27 70       	andi	r18, 0x07	; 7
    2d2a:	22 0f       	add	r18, r18
    2d2c:	22 0f       	add	r18, r18
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    2d2e:	86 2f       	mov	r24, r22
    2d30:	8f 70       	andi	r24, 0x0F	; 15
    2d32:	c8 2e       	mov	r12, r24
    2d34:	d1 2c       	mov	r13, r1
    2d36:	e1 2c       	mov	r14, r1
    2d38:	f1 2c       	mov	r15, r1
    2d3a:	02 2e       	mov	r0, r18
    2d3c:	04 c0       	rjmp	.+8      	; 0x2d46 <process_action+0x26c>
    2d3e:	cc 0c       	add	r12, r12
    2d40:	dd 1c       	adc	r13, r13
    2d42:	ee 1c       	adc	r14, r14
    2d44:	ff 1c       	adc	r15, r15
    2d46:	0a 94       	dec	r0
    2d48:	d2 f7       	brpl	.-12     	; 0x2d3e <process_action+0x264>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    2d4a:	64 ff       	sbrs	r22, 4
    2d4c:	10 c0       	rjmp	.+32     	; 0x2d6e <process_action+0x294>
    2d4e:	6f e0       	ldi	r22, 0x0F	; 15
    2d50:	70 e0       	ldi	r23, 0x00	; 0
    2d52:	80 e0       	ldi	r24, 0x00	; 0
    2d54:	90 e0       	ldi	r25, 0x00	; 0
    2d56:	04 c0       	rjmp	.+8      	; 0x2d60 <process_action+0x286>
    2d58:	66 0f       	add	r22, r22
    2d5a:	77 1f       	adc	r23, r23
    2d5c:	88 1f       	adc	r24, r24
    2d5e:	99 1f       	adc	r25, r25
    2d60:	2a 95       	dec	r18
    2d62:	d2 f7       	brpl	.-12     	; 0x2d58 <process_action+0x27e>
    2d64:	60 95       	com	r22
    2d66:	70 95       	com	r23
    2d68:	80 95       	com	r24
    2d6a:	90 95       	com	r25
    2d6c:	03 c0       	rjmp	.+6      	; 0x2d74 <process_action+0x29a>
    2d6e:	60 e0       	ldi	r22, 0x00	; 0
    2d70:	70 e0       	ldi	r23, 0x00	; 0
    2d72:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    2d74:	24 2f       	mov	r18, r20
    2d76:	26 95       	lsr	r18
    2d78:	26 95       	lsr	r18
    2d7a:	23 70       	andi	r18, 0x03	; 3
    2d7c:	42 2f       	mov	r20, r18
    2d7e:	50 e0       	ldi	r21, 0x00	; 0
    2d80:	42 30       	cpi	r20, 0x02	; 2
    2d82:	51 05       	cpc	r21, r1
    2d84:	d1 f0       	breq	.+52     	; 0x2dba <process_action+0x2e0>
    2d86:	43 30       	cpi	r20, 0x03	; 3
    2d88:	51 05       	cpc	r21, r1
    2d8a:	59 f1       	breq	.+86     	; 0x2de2 <process_action+0x308>
    2d8c:	6c 29       	or	r22, r12
    2d8e:	7d 29       	or	r23, r13
    2d90:	8e 29       	or	r24, r14
    2d92:	9f 29       	or	r25, r15
    2d94:	41 30       	cpi	r20, 0x01	; 1
    2d96:	51 05       	cpc	r21, r1
    2d98:	41 f1       	breq	.+80     	; 0x2dea <process_action+0x310>
            break;
#endif
        default:
            break;
    }
}
    2d9a:	28 96       	adiw	r28, 0x08	; 8
    2d9c:	0f b6       	in	r0, 0x3f	; 63
    2d9e:	f8 94       	cli
    2da0:	de bf       	out	0x3e, r29	; 62
    2da2:	0f be       	out	0x3f, r0	; 63
    2da4:	cd bf       	out	0x3d, r28	; 61
    2da6:	df 91       	pop	r29
    2da8:	cf 91       	pop	r28
    2daa:	1f 91       	pop	r17
    2dac:	0f 91       	pop	r16
    2dae:	ff 90       	pop	r15
    2db0:	ef 90       	pop	r14
    2db2:	df 90       	pop	r13
    2db4:	cf 90       	pop	r12
                if (!event.pressed) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
    2db6:	0c 94 9f 1c 	jmp	0x393e	; 0x393e <default_layer_and>
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    2dba:	6c 29       	or	r22, r12
    2dbc:	7d 29       	or	r23, r13
    2dbe:	8e 29       	or	r24, r14
    2dc0:	9f 29       	or	r25, r15
            break;
#endif
        default:
            break;
    }
}
    2dc2:	28 96       	adiw	r28, 0x08	; 8
    2dc4:	0f b6       	in	r0, 0x3f	; 63
    2dc6:	f8 94       	cli
    2dc8:	de bf       	out	0x3e, r29	; 62
    2dca:	0f be       	out	0x3f, r0	; 63
    2dcc:	cd bf       	out	0x3d, r28	; 61
    2dce:	df 91       	pop	r29
    2dd0:	cf 91       	pop	r28
    2dd2:	1f 91       	pop	r17
    2dd4:	0f 91       	pop	r16
    2dd6:	ff 90       	pop	r15
    2dd8:	ef 90       	pop	r14
    2dda:	df 90       	pop	r13
    2ddc:	cf 90       	pop	r12
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    2dde:	0c 94 b9 1c 	jmp	0x3972	; 0x3972 <default_layer_xor>
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    2de2:	0e 94 9f 1c 	call	0x393e	; 0x393e <default_layer_and>
    2de6:	c7 01       	movw	r24, r14
    2de8:	b6 01       	movw	r22, r12
            break;
#endif
        default:
            break;
    }
}
    2dea:	28 96       	adiw	r28, 0x08	; 8
    2dec:	0f b6       	in	r0, 0x3f	; 63
    2dee:	f8 94       	cli
    2df0:	de bf       	out	0x3e, r29	; 62
    2df2:	0f be       	out	0x3f, r0	; 63
    2df4:	cd bf       	out	0x3d, r28	; 61
    2df6:	df 91       	pop	r29
    2df8:	cf 91       	pop	r28
    2dfa:	1f 91       	pop	r17
    2dfc:	0f 91       	pop	r16
    2dfe:	ff 90       	pop	r15
    2e00:	ef 90       	pop	r14
    2e02:	df 90       	pop	r13
    2e04:	cf 90       	pop	r12
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    2e06:	0c 94 85 1c 	jmp	0x390a	; 0x390a <default_layer_or>
                    }
                }
            } else {
                /* Layer Bitwise Operation */
                if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
    2e0a:	ff 20       	and	r15, r15
    2e0c:	19 f0       	breq	.+6      	; 0x2e14 <process_action+0x33a>
    2e0e:	84 2f       	mov	r24, r20
    2e10:	81 70       	andi	r24, 0x01	; 1
    2e12:	01 c0       	rjmp	.+2      	; 0x2e16 <process_action+0x33c>
    2e14:	86 95       	lsr	r24
    2e16:	88 23       	and	r24, r24
    2e18:	09 f4       	brne	.+2      	; 0x2e1c <process_action+0x342>
    2e1a:	56 c1       	rjmp	.+684    	; 0x30c8 <process_action+0x5ee>
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
    2e1c:	26 2f       	mov	r18, r22
    2e1e:	22 95       	swap	r18
    2e20:	26 95       	lsr	r18
    2e22:	27 70       	andi	r18, 0x07	; 7
    2e24:	22 0f       	add	r18, r18
    2e26:	22 0f       	add	r18, r18
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    2e28:	86 2f       	mov	r24, r22
    2e2a:	8f 70       	andi	r24, 0x0F	; 15
    2e2c:	c8 2e       	mov	r12, r24
    2e2e:	d1 2c       	mov	r13, r1
    2e30:	e1 2c       	mov	r14, r1
    2e32:	f1 2c       	mov	r15, r1
    2e34:	02 2e       	mov	r0, r18
    2e36:	04 c0       	rjmp	.+8      	; 0x2e40 <process_action+0x366>
    2e38:	cc 0c       	add	r12, r12
    2e3a:	dd 1c       	adc	r13, r13
    2e3c:	ee 1c       	adc	r14, r14
    2e3e:	ff 1c       	adc	r15, r15
    2e40:	0a 94       	dec	r0
    2e42:	d2 f7       	brpl	.-12     	; 0x2e38 <process_action+0x35e>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    2e44:	64 ff       	sbrs	r22, 4
    2e46:	10 c0       	rjmp	.+32     	; 0x2e68 <process_action+0x38e>
    2e48:	6f e0       	ldi	r22, 0x0F	; 15
    2e4a:	70 e0       	ldi	r23, 0x00	; 0
    2e4c:	80 e0       	ldi	r24, 0x00	; 0
    2e4e:	90 e0       	ldi	r25, 0x00	; 0
    2e50:	04 c0       	rjmp	.+8      	; 0x2e5a <process_action+0x380>
    2e52:	66 0f       	add	r22, r22
    2e54:	77 1f       	adc	r23, r23
    2e56:	88 1f       	adc	r24, r24
    2e58:	99 1f       	adc	r25, r25
    2e5a:	2a 95       	dec	r18
    2e5c:	d2 f7       	brpl	.-12     	; 0x2e52 <process_action+0x378>
    2e5e:	60 95       	com	r22
    2e60:	70 95       	com	r23
    2e62:	80 95       	com	r24
    2e64:	90 95       	com	r25
    2e66:	03 c0       	rjmp	.+6      	; 0x2e6e <process_action+0x394>
    2e68:	60 e0       	ldi	r22, 0x00	; 0
    2e6a:	70 e0       	ldi	r23, 0x00	; 0
    2e6c:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    2e6e:	24 2f       	mov	r18, r20
    2e70:	26 95       	lsr	r18
    2e72:	26 95       	lsr	r18
    2e74:	23 70       	andi	r18, 0x03	; 3
    2e76:	42 2f       	mov	r20, r18
    2e78:	50 e0       	ldi	r21, 0x00	; 0
    2e7a:	42 30       	cpi	r20, 0x02	; 2
    2e7c:	51 05       	cpc	r21, r1
    2e7e:	d1 f0       	breq	.+52     	; 0x2eb4 <process_action+0x3da>
    2e80:	43 30       	cpi	r20, 0x03	; 3
    2e82:	51 05       	cpc	r21, r1
    2e84:	59 f1       	breq	.+86     	; 0x2edc <process_action+0x402>
    2e86:	6c 29       	or	r22, r12
    2e88:	7d 29       	or	r23, r13
    2e8a:	8e 29       	or	r24, r14
    2e8c:	9f 29       	or	r25, r15
    2e8e:	41 30       	cpi	r20, 0x01	; 1
    2e90:	51 05       	cpc	r21, r1
    2e92:	41 f1       	breq	.+80     	; 0x2ee4 <process_action+0x40a>
            break;
#endif
        default:
            break;
    }
}
    2e94:	28 96       	adiw	r28, 0x08	; 8
    2e96:	0f b6       	in	r0, 0x3f	; 63
    2e98:	f8 94       	cli
    2e9a:	de bf       	out	0x3e, r29	; 62
    2e9c:	0f be       	out	0x3f, r0	; 63
    2e9e:	cd bf       	out	0x3d, r28	; 61
    2ea0:	df 91       	pop	r29
    2ea2:	cf 91       	pop	r28
    2ea4:	1f 91       	pop	r17
    2ea6:	0f 91       	pop	r16
    2ea8:	ff 90       	pop	r15
    2eaa:	ef 90       	pop	r14
    2eac:	df 90       	pop	r13
    2eae:	cf 90       	pop	r12
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
    2eb0:	0c 94 73 1d 	jmp	0x3ae6	; 0x3ae6 <layer_and>
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    2eb4:	6c 29       	or	r22, r12
    2eb6:	7d 29       	or	r23, r13
    2eb8:	8e 29       	or	r24, r14
    2eba:	9f 29       	or	r25, r15
            break;
#endif
        default:
            break;
    }
}
    2ebc:	28 96       	adiw	r28, 0x08	; 8
    2ebe:	0f b6       	in	r0, 0x3f	; 63
    2ec0:	f8 94       	cli
    2ec2:	de bf       	out	0x3e, r29	; 62
    2ec4:	0f be       	out	0x3f, r0	; 63
    2ec6:	cd bf       	out	0x3d, r28	; 61
    2ec8:	df 91       	pop	r29
    2eca:	cf 91       	pop	r28
    2ecc:	1f 91       	pop	r17
    2ece:	0f 91       	pop	r16
    2ed0:	ff 90       	pop	r15
    2ed2:	ef 90       	pop	r14
    2ed4:	df 90       	pop	r13
    2ed6:	cf 90       	pop	r12
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    2ed8:	0c 94 8d 1d 	jmp	0x3b1a	; 0x3b1a <layer_xor>
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    2edc:	0e 94 73 1d 	call	0x3ae6	; 0x3ae6 <layer_and>
    2ee0:	c7 01       	movw	r24, r14
    2ee2:	b6 01       	movw	r22, r12
            break;
#endif
        default:
            break;
    }
}
    2ee4:	28 96       	adiw	r28, 0x08	; 8
    2ee6:	0f b6       	in	r0, 0x3f	; 63
    2ee8:	f8 94       	cli
    2eea:	de bf       	out	0x3e, r29	; 62
    2eec:	0f be       	out	0x3f, r0	; 63
    2eee:	cd bf       	out	0x3d, r28	; 61
    2ef0:	df 91       	pop	r29
    2ef2:	cf 91       	pop	r28
    2ef4:	1f 91       	pop	r17
    2ef6:	0f 91       	pop	r16
    2ef8:	ff 90       	pop	r15
    2efa:	ef 90       	pop	r14
    2efc:	df 90       	pop	r13
    2efe:	cf 90       	pop	r12
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    2f00:	0c 94 59 1d 	jmp	0x3ab2	; 0x3ab2 <layer_or>
            }
            break;
    #ifndef NO_ACTION_TAPPING
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    2f04:	60 3f       	cpi	r22, 0xF0	; 240
    2f06:	49 f1       	breq	.+82     	; 0x2f5a <process_action+0x480>
    2f08:	18 f4       	brcc	.+6      	; 0x2f10 <process_action+0x436>
    2f0a:	60 3e       	cpi	r22, 0xE0	; 224
    2f0c:	48 f4       	brcc	.+18     	; 0x2f20 <process_action+0x446>
    2f0e:	8c c0       	rjmp	.+280    	; 0x3028 <process_action+0x54e>
    2f10:	62 3f       	cpi	r22, 0xF2	; 242
    2f12:	09 f4       	brne	.+2      	; 0x2f16 <process_action+0x43c>
    2f14:	51 c0       	rjmp	.+162    	; 0x2fb8 <process_action+0x4de>
    2f16:	e0 f1       	brcs	.+120    	; 0x2f90 <process_action+0x4b6>
    2f18:	63 3f       	cpi	r22, 0xF3	; 243
    2f1a:	09 f4       	brne	.+2      	; 0x2f1e <process_action+0x444>
    2f1c:	61 c0       	rjmp	.+194    	; 0x2fe0 <process_action+0x506>
    2f1e:	84 c0       	rjmp	.+264    	; 0x3028 <process_action+0x54e>
    2f20:	16 2f       	mov	r17, r22
    2f22:	1f 70       	andi	r17, 0x0F	; 15
    2f24:	84 2f       	mov	r24, r20
    2f26:	8f 71       	andi	r24, 0x1F	; 31
                case 0xe0 ... 0xef:
                    /* layer On/Off with modifiers(left only) */
                    if (event.pressed) {
    2f28:	ff 20       	and	r15, r15
    2f2a:	21 f0       	breq	.+8      	; 0x2f34 <process_action+0x45a>
                        layer_on(action.layer_tap.val);
    2f2c:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <layer_on>
                        register_mods(action.layer_tap.code & 0x0f);
    2f30:	81 2f       	mov	r24, r17
    2f32:	89 ce       	rjmp	.-750    	; 0x2c46 <process_action+0x16c>
                    } else {
                        layer_off(action.layer_tap.val);
    2f34:	0e 94 13 1d 	call	0x3a26	; 0x3a26 <layer_off>
                        unregister_mods(action.layer_tap.code & 0x0f);
    2f38:	81 2f       	mov	r24, r17
            break;
#endif
        default:
            break;
    }
}
    2f3a:	28 96       	adiw	r28, 0x08	; 8
    2f3c:	0f b6       	in	r0, 0x3f	; 63
    2f3e:	f8 94       	cli
    2f40:	de bf       	out	0x3e, r29	; 62
    2f42:	0f be       	out	0x3f, r0	; 63
    2f44:	cd bf       	out	0x3d, r28	; 61
    2f46:	df 91       	pop	r29
    2f48:	cf 91       	pop	r28
    2f4a:	1f 91       	pop	r17
    2f4c:	0f 91       	pop	r16
    2f4e:	ff 90       	pop	r15
    2f50:	ef 90       	pop	r14
    2f52:	df 90       	pop	r13
    2f54:	cf 90       	pop	r12
                    if (event.pressed) {
                        layer_on(action.layer_tap.val);
                        register_mods(action.layer_tap.code & 0x0f);
                    } else {
                        layer_off(action.layer_tap.val);
                        unregister_mods(action.layer_tap.code & 0x0f);
    2f56:	0c 94 66 15 	jmp	0x2acc	; 0x2acc <unregister_mods>
                    }
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
    2f5a:	ff 20       	and	r15, r15
    2f5c:	a9 f0       	breq	.+42     	; 0x2f88 <process_action+0x4ae>
                        if (tap_count < TAPPING_TOGGLE) {
    2f5e:	25 30       	cpi	r18, 0x05	; 5
    2f60:	08 f0       	brcs	.+2      	; 0x2f64 <process_action+0x48a>
    2f62:	b2 c0       	rjmp	.+356    	; 0x30c8 <process_action+0x5ee>
                            layer_invert(action.layer_tap.val);
    2f64:	84 2f       	mov	r24, r20
    2f66:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2f68:	28 96       	adiw	r28, 0x08	; 8
    2f6a:	0f b6       	in	r0, 0x3f	; 63
    2f6c:	f8 94       	cli
    2f6e:	de bf       	out	0x3e, r29	; 62
    2f70:	0f be       	out	0x3f, r0	; 63
    2f72:	cd bf       	out	0x3d, r28	; 61
    2f74:	df 91       	pop	r29
    2f76:	cf 91       	pop	r28
    2f78:	1f 91       	pop	r17
    2f7a:	0f 91       	pop	r16
    2f7c:	ff 90       	pop	r15
    2f7e:	ef 90       	pop	r14
    2f80:	df 90       	pop	r13
    2f82:	cf 90       	pop	r12
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
                        if (tap_count < TAPPING_TOGGLE) {
                            layer_invert(action.layer_tap.val);
    2f84:	0c 94 38 1d 	jmp	0x3a70	; 0x3a70 <layer_invert>
                        }
                    } else {
                        if (tap_count <= TAPPING_TOGGLE) {
    2f88:	26 30       	cpi	r18, 0x06	; 6
    2f8a:	08 f0       	brcs	.+2      	; 0x2f8e <process_action+0x4b4>
    2f8c:	9d c0       	rjmp	.+314    	; 0x30c8 <process_action+0x5ee>
    2f8e:	ea cf       	rjmp	.-44     	; 0x2f64 <process_action+0x48a>
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    2f90:	ff 20       	and	r15, r15
    2f92:	a1 f0       	breq	.+40     	; 0x2fbc <process_action+0x4e2>
    2f94:	84 2f       	mov	r24, r20
    2f96:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2f98:	28 96       	adiw	r28, 0x08	; 8
    2f9a:	0f b6       	in	r0, 0x3f	; 63
    2f9c:	f8 94       	cli
    2f9e:	de bf       	out	0x3e, r29	; 62
    2fa0:	0f be       	out	0x3f, r0	; 63
    2fa2:	cd bf       	out	0x3d, r28	; 61
    2fa4:	df 91       	pop	r29
    2fa6:	cf 91       	pop	r28
    2fa8:	1f 91       	pop	r17
    2faa:	0f 91       	pop	r16
    2fac:	ff 90       	pop	r15
    2fae:	ef 90       	pop	r14
    2fb0:	df 90       	pop	r13
    2fb2:	cf 90       	pop	r12
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    2fb4:	0c 94 f2 1c 	jmp	0x39e4	; 0x39e4 <layer_on>
                                    layer_off(action.layer_tap.val);
                    break;
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
    2fb8:	ff 20       	and	r15, r15
    2fba:	61 f3       	breq	.-40     	; 0x2f94 <process_action+0x4ba>
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
    2fbc:	84 2f       	mov	r24, r20
    2fbe:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2fc0:	28 96       	adiw	r28, 0x08	; 8
    2fc2:	0f b6       	in	r0, 0x3f	; 63
    2fc4:	f8 94       	cli
    2fc6:	de bf       	out	0x3e, r29	; 62
    2fc8:	0f be       	out	0x3f, r0	; 63
    2fca:	cd bf       	out	0x3d, r28	; 61
    2fcc:	df 91       	pop	r29
    2fce:	cf 91       	pop	r28
    2fd0:	1f 91       	pop	r17
    2fd2:	0f 91       	pop	r16
    2fd4:	ff 90       	pop	r15
    2fd6:	ef 90       	pop	r14
    2fd8:	df 90       	pop	r13
    2fda:	cf 90       	pop	r12
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
    2fdc:	0c 94 13 1d 	jmp	0x3a26	; 0x3a26 <layer_off>
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    2fe0:	ff 20       	and	r15, r15
    2fe2:	91 f0       	breq	.+36     	; 0x3008 <process_action+0x52e>
    2fe4:	84 2f       	mov	r24, r20
    2fe6:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2fe8:	28 96       	adiw	r28, 0x08	; 8
    2fea:	0f b6       	in	r0, 0x3f	; 63
    2fec:	f8 94       	cli
    2fee:	de bf       	out	0x3e, r29	; 62
    2ff0:	0f be       	out	0x3f, r0	; 63
    2ff2:	cd bf       	out	0x3d, r28	; 61
    2ff4:	df 91       	pop	r29
    2ff6:	cf 91       	pop	r28
    2ff8:	1f 91       	pop	r17
    2ffa:	0f 91       	pop	r16
    2ffc:	ff 90       	pop	r15
    2ffe:	ef 90       	pop	r14
    3000:	df 90       	pop	r13
    3002:	cf 90       	pop	r12
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    3004:	0c 94 dd 1c 	jmp	0x39ba	; 0x39ba <layer_move>
            break;
#endif
        default:
            break;
    }
}
    3008:	28 96       	adiw	r28, 0x08	; 8
    300a:	0f b6       	in	r0, 0x3f	; 63
    300c:	f8 94       	cli
    300e:	de bf       	out	0x3e, r29	; 62
    3010:	0f be       	out	0x3f, r0	; 63
    3012:	cd bf       	out	0x3d, r28	; 61
    3014:	df 91       	pop	r29
    3016:	cf 91       	pop	r28
    3018:	1f 91       	pop	r17
    301a:	0f 91       	pop	r16
    301c:	ff 90       	pop	r15
    301e:	ef 90       	pop	r14
    3020:	df 90       	pop	r13
    3022:	cf 90       	pop	r12
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
                                    layer_clear();
    3024:	0c 94 d3 1c 	jmp	0x39a6	; 0x39a6 <layer_clear>
                    break;
                default:
                    /* tap key */
                    if (event.pressed) {
    3028:	ff 20       	and	r15, r15
    302a:	a1 f0       	breq	.+40     	; 0x3054 <process_action+0x57a>
                        if (tap_count > 0) {
    302c:	22 23       	and	r18, r18
    302e:	09 f4       	brne	.+2      	; 0x3032 <process_action+0x558>
    3030:	b1 cf       	rjmp	.-158    	; 0x2f94 <process_action+0x4ba>
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    3032:	86 2f       	mov	r24, r22
            break;
#endif
        default:
            break;
    }
}
    3034:	28 96       	adiw	r28, 0x08	; 8
    3036:	0f b6       	in	r0, 0x3f	; 63
    3038:	f8 94       	cli
    303a:	de bf       	out	0x3e, r29	; 62
    303c:	0f be       	out	0x3f, r0	; 63
    303e:	cd bf       	out	0x3d, r28	; 61
    3040:	df 91       	pop	r29
    3042:	cf 91       	pop	r28
    3044:	1f 91       	pop	r17
    3046:	0f 91       	pop	r16
    3048:	ff 90       	pop	r15
    304a:	ef 90       	pop	r14
    304c:	df 90       	pop	r13
    304e:	cf 90       	pop	r12
                default:
                    /* tap key */
                    if (event.pressed) {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    3050:	0c 94 48 14 	jmp	0x2890	; 0x2890 <register_code>
                        } else {
                            dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
    3054:	22 23       	and	r18, r18
    3056:	09 f4       	brne	.+2      	; 0x305a <process_action+0x580>
    3058:	b1 cf       	rjmp	.-158    	; 0x2fbc <process_action+0x4e2>
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    305a:	86 2f       	mov	r24, r22
            break;
#endif
        default:
            break;
    }
}
    305c:	28 96       	adiw	r28, 0x08	; 8
    305e:	0f b6       	in	r0, 0x3f	; 63
    3060:	f8 94       	cli
    3062:	de bf       	out	0x3e, r29	; 62
    3064:	0f be       	out	0x3f, r0	; 63
    3066:	cd bf       	out	0x3d, r28	; 61
    3068:	df 91       	pop	r29
    306a:	cf 91       	pop	r28
    306c:	1f 91       	pop	r17
    306e:	0f 91       	pop	r16
    3070:	ff 90       	pop	r15
    3072:	ef 90       	pop	r14
    3074:	df 90       	pop	r13
    3076:	cf 90       	pop	r12
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    3078:	0c 94 10 15 	jmp	0x2a20	; 0x2a20 <unregister_code>
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    307c:	4f 70       	andi	r20, 0x0F	; 15
    307e:	c8 01       	movw	r24, r16
    3080:	0e 94 f9 1f 	call	0x3ff2	; 0x3ff2 <action_get_macro>
            break;
#endif
        default:
            break;
    }
}
    3084:	28 96       	adiw	r28, 0x08	; 8
    3086:	0f b6       	in	r0, 0x3f	; 63
    3088:	f8 94       	cli
    308a:	de bf       	out	0x3e, r29	; 62
    308c:	0f be       	out	0x3f, r0	; 63
    308e:	cd bf       	out	0x3d, r28	; 61
    3090:	df 91       	pop	r29
    3092:	cf 91       	pop	r28
    3094:	1f 91       	pop	r17
    3096:	0f 91       	pop	r16
    3098:	ff 90       	pop	r15
    309a:	ef 90       	pop	r14
    309c:	df 90       	pop	r13
    309e:	cf 90       	pop	r12
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    30a0:	0c 94 fa 1b 	jmp	0x37f4	; 0x37f4 <action_macro_play>
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    30a4:	4f 70       	andi	r20, 0x0F	; 15
    30a6:	c8 01       	movw	r24, r16
            break;
#endif
        default:
            break;
    }
}
    30a8:	28 96       	adiw	r28, 0x08	; 8
    30aa:	0f b6       	in	r0, 0x3f	; 63
    30ac:	f8 94       	cli
    30ae:	de bf       	out	0x3e, r29	; 62
    30b0:	0f be       	out	0x3f, r0	; 63
    30b2:	cd bf       	out	0x3d, r28	; 61
    30b4:	df 91       	pop	r29
    30b6:	cf 91       	pop	r28
    30b8:	1f 91       	pop	r17
    30ba:	0f 91       	pop	r16
    30bc:	ff 90       	pop	r15
    30be:	ef 90       	pop	r14
    30c0:	df 90       	pop	r13
    30c2:	cf 90       	pop	r12
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    30c4:	0c 94 fc 1f 	jmp	0x3ff8	; 0x3ff8 <action_function>
            break;
#endif
        default:
            break;
    }
}
    30c8:	28 96       	adiw	r28, 0x08	; 8
    30ca:	0f b6       	in	r0, 0x3f	; 63
    30cc:	f8 94       	cli
    30ce:	de bf       	out	0x3e, r29	; 62
    30d0:	0f be       	out	0x3f, r0	; 63
    30d2:	cd bf       	out	0x3d, r28	; 61
    30d4:	df 91       	pop	r29
    30d6:	cf 91       	pop	r28
    30d8:	1f 91       	pop	r17
    30da:	0f 91       	pop	r16
    30dc:	ff 90       	pop	r15
    30de:	ef 90       	pop	r14
    30e0:	df 90       	pop	r13
    30e2:	cf 90       	pop	r12
    30e4:	08 95       	ret

000030e6 <clear_keyboard_but_mods>:
    clear_keyboard_but_mods();
}

void clear_keyboard_but_mods(void)
{
    clear_weak_mods();
    30e6:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <clear_weak_mods>
    clear_keys();
    30ea:	0e 94 77 1e 	call	0x3cee	; 0x3cee <clear_keys>
    send_keyboard_report();
    30ee:	0e 94 be 1e 	call	0x3d7c	; 0x3d7c <send_keyboard_report>
#ifdef MOUSEKEY_ENABLE
    mousekey_clear();
    30f2:	0e 94 c3 25 	call	0x4b86	; 0x4b86 <mousekey_clear>
    mousekey_send();
    30f6:	0e 94 95 24 	call	0x492a	; 0x492a <mousekey_send>
#endif
#ifdef EXTRAKEY_ENABLE
    host_system_send(0);
    30fa:	80 e0       	ldi	r24, 0x00	; 0
    30fc:	90 e0       	ldi	r25, 0x00	; 0
    30fe:	0e 94 07 13 	call	0x260e	; 0x260e <host_system_send>
    host_consumer_send(0);
    3102:	80 e0       	ldi	r24, 0x00	; 0
    3104:	90 e0       	ldi	r25, 0x00	; 0
    3106:	0c 94 1d 13 	jmp	0x263a	; 0x263a <host_consumer_send>

0000310a <clear_keyboard>:
    }
}

void clear_keyboard(void)
{
    clear_mods();
    310a:	0e 94 92 1e 	call	0x3d24	; 0x3d24 <clear_mods>
    clear_keyboard_but_mods();
    310e:	0c 94 73 18 	jmp	0x30e6	; 0x30e6 <clear_keyboard_but_mods>

00003112 <is_tap_key>:
#endif
}

bool is_tap_key(keypos_t key)
{
    action_t action = layer_switch_get_action(key);
    3112:	0e 94 a8 1d 	call	0x3b50	; 0x3b50 <layer_switch_get_action>

    switch (action.kind.id) {
    3116:	29 2f       	mov	r18, r25
    3118:	22 95       	swap	r18
    311a:	2f 70       	andi	r18, 0x0F	; 15
    311c:	30 e0       	ldi	r19, 0x00	; 0
    311e:	2c 30       	cpi	r18, 0x0C	; 12
    3120:	31 05       	cpc	r19, r1
    3122:	4c f4       	brge	.+18     	; 0x3136 <is_tap_key+0x24>
    3124:	2a 30       	cpi	r18, 0x0A	; 10
    3126:	31 05       	cpc	r19, r1
    3128:	6c f4       	brge	.+26     	; 0x3144 <is_tap_key+0x32>
    312a:	22 50       	subi	r18, 0x02	; 2
    312c:	31 09       	sbc	r19, r1
    312e:	22 30       	cpi	r18, 0x02	; 2
    3130:	31 05       	cpc	r19, r1
    3132:	70 f4       	brcc	.+28     	; 0x3150 <is_tap_key+0x3e>
    3134:	07 c0       	rjmp	.+14     	; 0x3144 <is_tap_key+0x32>
    3136:	2c 30       	cpi	r18, 0x0C	; 12
    3138:	31 05       	cpc	r19, r1
    313a:	31 f0       	breq	.+12     	; 0x3148 <is_tap_key+0x36>
    313c:	2f 30       	cpi	r18, 0x0F	; 15
    313e:	31 05       	cpc	r19, r1
    3140:	19 f0       	breq	.+6      	; 0x3148 <is_tap_key+0x36>
    3142:	06 c0       	rjmp	.+12     	; 0x3150 <is_tap_key+0x3e>
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            return true;
    3144:	81 e0       	ldi	r24, 0x01	; 1
    3146:	08 95       	ret
        case ACT_MACRO:
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
    3148:	93 fb       	bst	r25, 3
    314a:	88 27       	eor	r24, r24
    314c:	80 f9       	bld	r24, 0
    314e:	08 95       	ret
            return false;
    }
    return false;
    3150:	80 e0       	ldi	r24, 0x00	; 0
}
    3152:	08 95       	ret

00003154 <debug_event>:

/*
 * debug print
 */
void debug_event(keyevent_t event)
{
    3154:	cf 93       	push	r28
    3156:	df 93       	push	r29
    3158:	00 d0       	rcall	.+0      	; 0x315a <debug_event+0x6>
    315a:	00 d0       	rcall	.+0      	; 0x315c <debug_event+0x8>
    315c:	1f 92       	push	r1
    315e:	cd b7       	in	r28, 0x3d	; 61
    3160:	de b7       	in	r29, 0x3e	; 62
    dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.time);
}
    3162:	0f 90       	pop	r0
    3164:	0f 90       	pop	r0
    3166:	0f 90       	pop	r0
    3168:	0f 90       	pop	r0
    316a:	0f 90       	pop	r0
    316c:	df 91       	pop	r29
    316e:	cf 91       	pop	r28
    3170:	08 95       	ret

00003172 <debug_record>:

void debug_record(keyrecord_t record)
{
    3172:	cf 93       	push	r28
    3174:	df 93       	push	r29
    3176:	00 d0       	rcall	.+0      	; 0x3178 <debug_record+0x6>
    3178:	00 d0       	rcall	.+0      	; 0x317a <debug_record+0x8>
    317a:	00 d0       	rcall	.+0      	; 0x317c <debug_record+0xa>
    317c:	cd b7       	in	r28, 0x3d	; 61
    317e:	de b7       	in	r29, 0x3e	; 62
    debug_event(record.event);
#ifndef NO_ACTION_TAPPING
    dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
#endif
}
    3180:	26 96       	adiw	r28, 0x06	; 6
    3182:	0f b6       	in	r0, 0x3f	; 63
    3184:	f8 94       	cli
    3186:	de bf       	out	0x3e, r29	; 62
    3188:	0f be       	out	0x3f, r0	; 63
    318a:	cd bf       	out	0x3d, r28	; 61
    318c:	df 91       	pop	r29
    318e:	cf 91       	pop	r28
    3190:	08 95       	ret

00003192 <debug_waiting_buffer>:
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
}

static void debug_waiting_buffer(void)
{
    3192:	1f 93       	push	r17
    3194:	cf 93       	push	r28
    3196:	df 93       	push	r29
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3198:	c0 91 70 01 	lds	r28, 0x0170
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    319c:	16 e0       	ldi	r17, 0x06	; 6
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    319e:	80 91 71 01 	lds	r24, 0x0171
    31a2:	c8 17       	cp	r28, r24
    31a4:	99 f0       	breq	.+38     	; 0x31cc <debug_waiting_buffer+0x3a>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    31a6:	d0 e0       	ldi	r29, 0x00	; 0
    31a8:	1c 9f       	mul	r17, r28
    31aa:	f0 01       	movw	r30, r0
    31ac:	1d 9f       	mul	r17, r29
    31ae:	f0 0d       	add	r31, r0
    31b0:	11 24       	eor	r1, r1
    31b2:	ee 58       	subi	r30, 0x8E	; 142
    31b4:	fe 4f       	sbci	r31, 0xFE	; 254
    31b6:	40 81       	ld	r20, Z
    31b8:	51 81       	ldd	r21, Z+1	; 0x01
    31ba:	62 81       	ldd	r22, Z+2	; 0x02
    31bc:	73 81       	ldd	r23, Z+3	; 0x03
    31be:	84 81       	ldd	r24, Z+4	; 0x04
    31c0:	95 81       	ldd	r25, Z+5	; 0x05
    31c2:	0e 94 b9 18 	call	0x3172	; 0x3172 <debug_record>
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    31c6:	21 96       	adiw	r28, 0x01	; 1
    31c8:	c7 70       	andi	r28, 0x07	; 7
    31ca:	e9 cf       	rjmp	.-46     	; 0x319e <debug_waiting_buffer+0xc>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    }
    debug("}\n");
}
    31cc:	df 91       	pop	r29
    31ce:	cf 91       	pop	r28
    31d0:	1f 91       	pop	r17
    31d2:	08 95       	ret

000031d4 <debug_tapping_key>:
/*
 * debug print
 */
static void debug_tapping_key(void)
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
    31d4:	40 91 a2 01 	lds	r20, 0x01A2
    31d8:	50 91 a3 01 	lds	r21, 0x01A3
    31dc:	60 91 a4 01 	lds	r22, 0x01A4
    31e0:	70 91 a5 01 	lds	r23, 0x01A5
    31e4:	80 91 a6 01 	lds	r24, 0x01A6
    31e8:	90 91 a7 01 	lds	r25, 0x01A7
    31ec:	0c 94 b9 18 	jmp	0x3172	; 0x3172 <debug_record>

000031f0 <waiting_buffer_scan_tap>:
    return false;
}

/* scan buffer for tapping */
void waiting_buffer_scan_tap(void)
{
    31f0:	cf 93       	push	r28
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    31f2:	80 91 a7 01 	lds	r24, 0x01A7
    31f6:	82 95       	swap	r24
    31f8:	8f 70       	andi	r24, 0x0F	; 15
    31fa:	09 f0       	breq	.+2      	; 0x31fe <waiting_buffer_scan_tap+0xe>
    31fc:	5f c0       	rjmp	.+190    	; 0x32bc <waiting_buffer_scan_tap+0xcc>
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;
    31fe:	80 91 a4 01 	lds	r24, 0x01A4
    3202:	88 23       	and	r24, r24
    3204:	09 f4       	brne	.+2      	; 0x3208 <waiting_buffer_scan_tap+0x18>
    3206:	5a c0       	rjmp	.+180    	; 0x32bc <waiting_buffer_scan_tap+0xcc>

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3208:	20 91 70 01 	lds	r18, 0x0170
    320c:	a0 91 71 01 	lds	r26, 0x0171
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    3210:	60 91 a2 01 	lds	r22, 0x01A2
    3214:	70 91 a3 01 	lds	r23, 0x01A3
    3218:	80 91 a5 01 	lds	r24, 0x01A5
    321c:	90 91 a6 01 	lds	r25, 0x01A6
    3220:	31 e0       	ldi	r19, 0x01	; 1
    3222:	6f 3f       	cpi	r22, 0xFF	; 255
    3224:	09 f0       	breq	.+2      	; 0x3228 <waiting_buffer_scan_tap+0x38>
    3226:	30 e0       	ldi	r19, 0x00	; 0
    3228:	b3 2f       	mov	r27, r19
    322a:	c6 e0       	ldi	r28, 0x06	; 6
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    322c:	2a 17       	cp	r18, r26
    322e:	09 f4       	brne	.+2      	; 0x3232 <waiting_buffer_scan_tap+0x42>
    3230:	45 c0       	rjmp	.+138    	; 0x32bc <waiting_buffer_scan_tap+0xcc>
    3232:	00 97       	sbiw	r24, 0x00	; 0
    3234:	21 f0       	breq	.+8      	; 0x323e <waiting_buffer_scan_tap+0x4e>
    3236:	7f 3f       	cpi	r23, 0xFF	; 255
    3238:	21 f4       	brne	.+8      	; 0x3242 <waiting_buffer_scan_tap+0x52>
    323a:	4b 2f       	mov	r20, r27
    323c:	03 c0       	rjmp	.+6      	; 0x3244 <waiting_buffer_scan_tap+0x54>
    323e:	41 e0       	ldi	r20, 0x01	; 1
    3240:	01 c0       	rjmp	.+2      	; 0x3244 <waiting_buffer_scan_tap+0x54>
    3242:	40 e0       	ldi	r20, 0x00	; 0
    3244:	30 e0       	ldi	r19, 0x00	; 0
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    3246:	40 fd       	sbrc	r20, 0
    3248:	35 c0       	rjmp	.+106    	; 0x32b4 <waiting_buffer_scan_tap+0xc4>
    324a:	c2 9f       	mul	r28, r18
    324c:	f0 01       	movw	r30, r0
    324e:	c3 9f       	mul	r28, r19
    3250:	f0 0d       	add	r31, r0
    3252:	11 24       	eor	r1, r1
    3254:	ee 58       	subi	r30, 0x8E	; 142
    3256:	fe 4f       	sbci	r31, 0xFE	; 254
    3258:	41 81       	ldd	r20, Z+1	; 0x01
    325a:	74 13       	cpse	r23, r20
    325c:	2b c0       	rjmp	.+86     	; 0x32b4 <waiting_buffer_scan_tap+0xc4>
    325e:	40 81       	ld	r20, Z
    3260:	64 13       	cpse	r22, r20
    3262:	28 c0       	rjmp	.+80     	; 0x32b4 <waiting_buffer_scan_tap+0xc4>
    3264:	42 81       	ldd	r20, Z+2	; 0x02
    3266:	41 11       	cpse	r20, r1
    3268:	25 c0       	rjmp	.+74     	; 0x32b4 <waiting_buffer_scan_tap+0xc4>
                !waiting_buffer[i].event.pressed &&
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
    326a:	43 81       	ldd	r20, Z+3	; 0x03
    326c:	54 81       	ldd	r21, Z+4	; 0x04
    326e:	48 17       	cp	r20, r24
    3270:	59 07       	cpc	r21, r25
    3272:	10 f4       	brcc	.+4      	; 0x3278 <waiting_buffer_scan_tap+0x88>
    3274:	41 50       	subi	r20, 0x01	; 1
    3276:	51 09       	sbc	r21, r1
    3278:	48 1b       	sub	r20, r24
    327a:	59 0b       	sbc	r21, r25
    327c:	48 3c       	cpi	r20, 0xC8	; 200
    327e:	51 05       	cpc	r21, r1
    3280:	c8 f4       	brcc	.+50     	; 0x32b4 <waiting_buffer_scan_tap+0xc4>
            tapping_key.tap.count = 1;
    3282:	80 91 a7 01 	lds	r24, 0x01A7
    3286:	8f 70       	andi	r24, 0x0F	; 15
    3288:	80 61       	ori	r24, 0x10	; 16
    328a:	80 93 a7 01 	sts	0x01A7, r24
            waiting_buffer[i].tap.count = 1;
    328e:	86 e0       	ldi	r24, 0x06	; 6
    3290:	82 9f       	mul	r24, r18
    3292:	f0 01       	movw	r30, r0
    3294:	83 9f       	mul	r24, r19
    3296:	f0 0d       	add	r31, r0
    3298:	11 24       	eor	r1, r1
    329a:	e9 58       	subi	r30, 0x89	; 137
    329c:	fe 4f       	sbci	r31, 0xFE	; 254
    329e:	80 81       	ld	r24, Z
    32a0:	8f 70       	andi	r24, 0x0F	; 15
    32a2:	80 61       	ori	r24, 0x10	; 16
    32a4:	80 83       	st	Z, r24
            process_action(&tapping_key);
    32a6:	82 ea       	ldi	r24, 0xA2	; 162
    32a8:	91 e0       	ldi	r25, 0x01	; 1
    32aa:	0e 94 6d 15 	call	0x2ada	; 0x2ada <process_action>
            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
            return;
        }
    }
}
    32ae:	cf 91       	pop	r28
            tapping_key.tap.count = 1;
            waiting_buffer[i].tap.count = 1;
            process_action(&tapping_key);

            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
    32b0:	0c 94 c9 18 	jmp	0x3192	; 0x3192 <debug_waiting_buffer>
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    32b4:	2f 5f       	subi	r18, 0xFF	; 255
    32b6:	3f 4f       	sbci	r19, 0xFF	; 255
    32b8:	27 70       	andi	r18, 0x07	; 7
    32ba:	b8 cf       	rjmp	.-144    	; 0x322c <waiting_buffer_scan_tap+0x3c>
            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
            return;
        }
    }
}
    32bc:	cf 91       	pop	r28
    32be:	08 95       	ret

000032c0 <process_tapping>:
 * Rule: Tap key is typed(pressed and released) within TAPPING_TERM.
 *       (without interfering by typing other key)
 */
/* return true when key event is processed or consumed. */
bool process_tapping(keyrecord_t *keyp)
{
    32c0:	cf 92       	push	r12
    32c2:	df 92       	push	r13
    32c4:	ef 92       	push	r14
    32c6:	ff 92       	push	r15
    32c8:	0f 93       	push	r16
    32ca:	1f 93       	push	r17
    32cc:	cf 93       	push	r28
    32ce:	df 93       	push	r29
    32d0:	cd b7       	in	r28, 0x3d	; 61
    32d2:	de b7       	in	r29, 0x3e	; 62
    32d4:	62 97       	sbiw	r28, 0x12	; 18
    32d6:	0f b6       	in	r0, 0x3f	; 63
    32d8:	f8 94       	cli
    32da:	de bf       	out	0x3e, r29	; 62
    32dc:	0f be       	out	0x3f, r0	; 63
    32de:	cd bf       	out	0x3d, r28	; 61
    32e0:	8c 01       	movw	r16, r24
    keyevent_t event = keyp->event;
    32e2:	85 e0       	ldi	r24, 0x05	; 5
    32e4:	f8 01       	movw	r30, r16
    32e6:	de 01       	movw	r26, r28
    32e8:	1d 96       	adiw	r26, 0x0d	; 13
    32ea:	01 90       	ld	r0, Z+
    32ec:	0d 92       	st	X+, r0
    32ee:	8a 95       	dec	r24
    32f0:	e1 f7       	brne	.-8      	; 0x32ea <process_tapping+0x2a>
    32f2:	d8 01       	movw	r26, r16
    32f4:	4c 91       	ld	r20, X
    32f6:	11 96       	adiw	r26, 0x01	; 1
    32f8:	5c 91       	ld	r21, X
    32fa:	11 97       	sbiw	r26, 0x01	; 1
    32fc:	12 96       	adiw	r26, 0x02	; 2
    32fe:	6c 91       	ld	r22, X
    3300:	12 97       	sbiw	r26, 0x02	; 2
    3302:	13 96       	adiw	r26, 0x03	; 3
    3304:	ed 90       	ld	r14, X+
    3306:	fc 90       	ld	r15, X
    3308:	14 97       	sbiw	r26, 0x04	; 4

    // if tapping
    if (IS_TAPPING_PRESSED()) {
    330a:	70 91 a2 01 	lds	r23, 0x01A2
    330e:	e0 91 a3 01 	lds	r30, 0x01A3
    3312:	20 91 a5 01 	lds	r18, 0x01A5
    3316:	30 91 a6 01 	lds	r19, 0x01A6
    331a:	21 15       	cp	r18, r1
    331c:	31 05       	cpc	r19, r1
    331e:	31 f0       	breq	.+12     	; 0x332c <process_tapping+0x6c>
    3320:	ef 3f       	cpi	r30, 0xFF	; 255
    3322:	31 f4       	brne	.+12     	; 0x3330 <process_tapping+0x70>
    3324:	81 e0       	ldi	r24, 0x01	; 1
    3326:	7f 3f       	cpi	r23, 0xFF	; 255
    3328:	19 f4       	brne	.+6      	; 0x3330 <process_tapping+0x70>
    332a:	03 c0       	rjmp	.+6      	; 0x3332 <process_tapping+0x72>
    332c:	81 e0       	ldi	r24, 0x01	; 1
    332e:	01 c0       	rjmp	.+2      	; 0x3332 <process_tapping+0x72>
    3330:	80 e0       	ldi	r24, 0x00	; 0
    3332:	b8 2f       	mov	r27, r24
    3334:	b1 70       	andi	r27, 0x01	; 1
    3336:	cb 2e       	mov	r12, r27
    3338:	80 fd       	sbrc	r24, 0
    333a:	6c c1       	rjmp	.+728    	; 0x3614 <process_tapping+0x354>
    333c:	d0 90 a4 01 	lds	r13, 0x01A4
    3340:	dd 20       	and	r13, r13
    3342:	09 f4       	brne	.+2      	; 0x3346 <process_tapping+0x86>
    3344:	f5 c0       	rjmp	.+490    	; 0x3530 <process_tapping+0x270>
    3346:	f0 91 a7 01 	lds	r31, 0x01A7
        if (WITHIN_TAPPING_TERM(event)) {
    334a:	e2 16       	cp	r14, r18
    334c:	f3 06       	cpc	r15, r19
    334e:	38 f0       	brcs	.+14     	; 0x335e <process_tapping+0x9e>
    3350:	c7 01       	movw	r24, r14
    3352:	82 1b       	sub	r24, r18
    3354:	93 0b       	sbc	r25, r19
    3356:	88 3c       	cpi	r24, 0xC8	; 200
    3358:	91 05       	cpc	r25, r1
    335a:	48 f0       	brcs	.+18     	; 0x336e <process_tapping+0xae>
    335c:	9b c0       	rjmp	.+310    	; 0x3494 <process_tapping+0x1d4>
    335e:	20 95       	com	r18
    3360:	30 95       	com	r19
    3362:	2e 0d       	add	r18, r14
    3364:	3f 1d       	adc	r19, r15
    3366:	28 3c       	cpi	r18, 0xC8	; 200
    3368:	31 05       	cpc	r19, r1
    336a:	08 f0       	brcs	.+2      	; 0x336e <process_tapping+0xae>
    336c:	93 c0       	rjmp	.+294    	; 0x3494 <process_tapping+0x1d4>
            if (tapping_key.tap.count == 0) {
    336e:	8f 2f       	mov	r24, r31
    3370:	80 7f       	andi	r24, 0xF0	; 240
    3372:	09 f0       	breq	.+2      	; 0x3376 <process_tapping+0xb6>
    3374:	52 c0       	rjmp	.+164    	; 0x341a <process_tapping+0x15a>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    3376:	e5 13       	cpse	r30, r21
    3378:	14 c0       	rjmp	.+40     	; 0x33a2 <process_tapping+0xe2>
    337a:	74 13       	cpse	r23, r20
    337c:	12 c0       	rjmp	.+36     	; 0x33a2 <process_tapping+0xe2>
    337e:	d6 2e       	mov	r13, r22
    3380:	61 11       	cpse	r22, r1
    3382:	0f c0       	rjmp	.+30     	; 0x33a2 <process_tapping+0xe2>
                    // first tap!
                    debug("Tapping: First tap(0->1).\n");
                    tapping_key.tap.count = 1;
    3384:	ff 70       	andi	r31, 0x0F	; 15
    3386:	f0 61       	ori	r31, 0x10	; 16
    3388:	f0 93 a7 01 	sts	0x01A7, r31
                    debug_tapping_key();
    338c:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <debug_tapping_key>
                    process_action(&tapping_key);
    3390:	82 ea       	ldi	r24, 0xA2	; 162
    3392:	91 e0       	ldi	r25, 0x01	; 1
    3394:	0e 94 6d 15 	call	0x2ada	; 0x2ada <process_action>

                    // copy tapping state
                    keyp->tap = tapping_key.tap;
    3398:	80 91 a7 01 	lds	r24, 0x01A7
    339c:	f8 01       	movw	r30, r16
    339e:	85 83       	std	Z+5, r24	; 0x05
                    // enqueue
                    return false;
    33a0:	6c c1       	rjmp	.+728    	; 0x367a <process_tapping+0x3ba>
    33a2:	ef 28       	or	r14, r15
    33a4:	31 f0       	breq	.+12     	; 0x33b2 <process_tapping+0xf2>
    33a6:	5f 3f       	cpi	r21, 0xFF	; 255
    33a8:	31 f4       	brne	.+12     	; 0x33b6 <process_tapping+0xf6>
    33aa:	81 e0       	ldi	r24, 0x01	; 1
    33ac:	4f 3f       	cpi	r20, 0xFF	; 255
    33ae:	19 f4       	brne	.+6      	; 0x33b6 <process_tapping+0xf6>
    33b0:	03 c0       	rjmp	.+6      	; 0x33b8 <process_tapping+0xf8>
    33b2:	81 e0       	ldi	r24, 0x01	; 1
    33b4:	01 c0       	rjmp	.+2      	; 0x33b8 <process_tapping+0xf8>
    33b6:	80 e0       	ldi	r24, 0x00	; 0
static inline bool IS_PRESSED(keyevent_t event) { return (!IS_NOEVENT(event) && event.pressed); }
static inline bool IS_RELEASED(keyevent_t event) { return (!IS_NOEVENT(event) && !event.pressed); }
    33b8:	80 fd       	sbrc	r24, 0
    33ba:	03 c0       	rjmp	.+6      	; 0x33c2 <process_tapping+0x102>
    33bc:	81 e0       	ldi	r24, 0x01	; 1
    33be:	86 27       	eor	r24, r22
    33c0:	01 c0       	rjmp	.+2      	; 0x33c4 <process_tapping+0x104>
    33c2:	80 e0       	ldi	r24, 0x00	; 0
#endif
                /* Process release event of a key pressed before tapping starts
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
    33c4:	f8 2f       	mov	r31, r24
    33c6:	f1 70       	andi	r31, 0x01	; 1
    33c8:	ff 2e       	mov	r15, r31
    33ca:	80 ff       	sbrs	r24, 0
    33cc:	1c c0       	rjmp	.+56     	; 0x3406 <process_tapping+0x146>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    33ce:	80 91 70 01 	lds	r24, 0x0170
    33d2:	20 91 71 01 	lds	r18, 0x0171
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    33d6:	36 e0       	ldi	r19, 0x06	; 6
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    33d8:	82 17       	cp	r24, r18
    33da:	09 f4       	brne	.+2      	; 0x33de <process_tapping+0x11e>
    33dc:	28 c1       	rjmp	.+592    	; 0x362e <process_tapping+0x36e>
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    33de:	90 e0       	ldi	r25, 0x00	; 0
    33e0:	38 9f       	mul	r19, r24
    33e2:	f0 01       	movw	r30, r0
    33e4:	39 9f       	mul	r19, r25
    33e6:	f0 0d       	add	r31, r0
    33e8:	11 24       	eor	r1, r1
    33ea:	ee 58       	subi	r30, 0x8E	; 142
    33ec:	fe 4f       	sbci	r31, 0xFE	; 254
    33ee:	71 81       	ldd	r23, Z+1	; 0x01
    33f0:	57 13       	cpse	r21, r23
    33f2:	06 c0       	rjmp	.+12     	; 0x3400 <process_tapping+0x140>
    33f4:	70 81       	ld	r23, Z
    33f6:	47 13       	cpse	r20, r23
    33f8:	03 c0       	rjmp	.+6      	; 0x3400 <process_tapping+0x140>
    33fa:	72 81       	ldd	r23, Z+2	; 0x02
    33fc:	67 13       	cpse	r22, r23
    33fe:	03 c0       	rjmp	.+6      	; 0x3406 <process_tapping+0x146>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3400:	01 96       	adiw	r24, 0x01	; 1
    3402:	87 70       	andi	r24, 0x07	; 7
    3404:	e9 cf       	rjmp	.-46     	; 0x33d8 <process_tapping+0x118>
                    process_action(keyp);
                    return true;
                }
                else {
                    // set interrupted flag when other key preesed during tapping
                    if (event.pressed) {
    3406:	d6 2e       	mov	r13, r22
    3408:	66 23       	and	r22, r22
    340a:	09 f4       	brne	.+2      	; 0x340e <process_tapping+0x14e>
    340c:	36 c1       	rjmp	.+620    	; 0x367a <process_tapping+0x3ba>
                        tapping_key.tap.interrupted = true;
    340e:	80 91 a7 01 	lds	r24, 0x01A7
    3412:	81 60       	ori	r24, 0x01	; 1
    3414:	80 93 a7 01 	sts	0x01A7, r24
    3418:	53 c0       	rjmp	.+166    	; 0x34c0 <process_tapping+0x200>
                    return false;
                }
            }
            // tap_count > 0
            else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    341a:	e5 13       	cpse	r30, r21
    341c:	08 c0       	rjmp	.+16     	; 0x342e <process_tapping+0x16e>
    341e:	74 13       	cpse	r23, r20
    3420:	06 c0       	rjmp	.+12     	; 0x342e <process_tapping+0x16e>
    3422:	61 11       	cpse	r22, r1
    3424:	04 c0       	rjmp	.+8      	; 0x342e <process_tapping+0x16e>
                    debug("Tapping: Tap release("); debug_dec(tapping_key.tap.count); debug(")\n");
                    keyp->tap = tapping_key.tap;
    3426:	d8 01       	movw	r26, r16
    3428:	15 96       	adiw	r26, 0x05	; 5
    342a:	fc 93       	st	X, r31
    342c:	ae c0       	rjmp	.+348    	; 0x358a <process_tapping+0x2ca>
                    process_action(keyp);
                    tapping_key = *keyp;
                    debug_tapping_key();
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
    342e:	4d 87       	std	Y+13, r20	; 0x0d
    3430:	5e 87       	std	Y+14, r21	; 0x0e
    3432:	8d 85       	ldd	r24, Y+13	; 0x0d
    3434:	9e 85       	ldd	r25, Y+14	; 0x0e
    3436:	6a 8b       	std	Y+18, r22	; 0x12
    3438:	0e 94 89 18 	call	0x3112	; 0x3112 <is_tap_key>
    343c:	6a 89       	ldd	r22, Y+18	; 0x12
    343e:	88 23       	and	r24, r24
    3440:	29 f1       	breq	.+74     	; 0x348c <process_tapping+0x1cc>
    3442:	d6 2e       	mov	r13, r22
    3444:	66 23       	and	r22, r22
    3446:	11 f1       	breq	.+68     	; 0x348c <process_tapping+0x1cc>
                    if (tapping_key.tap.count > 1) {
    3448:	20 91 a7 01 	lds	r18, 0x01A7
    344c:	82 2f       	mov	r24, r18
    344e:	82 95       	swap	r24
    3450:	8f 70       	andi	r24, 0x0F	; 15
    3452:	90 e0       	ldi	r25, 0x00	; 0
    3454:	02 97       	sbiw	r24, 0x02	; 2
    3456:	0c f4       	brge	.+2      	; 0x345a <process_tapping+0x19a>
    3458:	60 c0       	rjmp	.+192    	; 0x351a <process_tapping+0x25a>
                        debug("Tapping: Start new tap with releasing last tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    345a:	80 91 a2 01 	lds	r24, 0x01A2
    345e:	90 91 a3 01 	lds	r25, 0x01A3
    3462:	98 87       	std	Y+8, r25	; 0x08
    3464:	8f 83       	std	Y+7, r24	; 0x07
    3466:	19 86       	std	Y+9, r1	; 0x09
    3468:	fb 86       	std	Y+11, r15	; 0x0b
    346a:	ea 86       	std	Y+10, r14	; 0x0a
    346c:	2c 87       	std	Y+12, r18	; 0x0c
    346e:	ce 01       	movw	r24, r28
    3470:	07 96       	adiw	r24, 0x07	; 7
    3472:	51 c0       	rjmp	.+162    	; 0x3516 <process_tapping+0x256>
                process_action(&tapping_key);
                tapping_key = (keyrecord_t){};
                debug_tapping_key();
                return false;
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    3474:	e5 17       	cp	r30, r21
    3476:	31 f1       	breq	.+76     	; 0x34c4 <process_tapping+0x204>
                    keyp->tap = tapping_key.tap;
                    process_action(keyp);
                    tapping_key = (keyrecord_t){};
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
    3478:	4d 87       	std	Y+13, r20	; 0x0d
    347a:	5e 87       	std	Y+14, r21	; 0x0e
    347c:	8d 85       	ldd	r24, Y+13	; 0x0d
    347e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3480:	6a 8b       	std	Y+18, r22	; 0x12
    3482:	0e 94 89 18 	call	0x3112	; 0x3112 <is_tap_key>
    3486:	6a 89       	ldd	r22, Y+18	; 0x12
    3488:	81 11       	cpse	r24, r1
    348a:	2e c0       	rjmp	.+92     	; 0x34e8 <process_tapping+0x228>
                }
                else {
                    if (!IS_NOEVENT(event)) {
                        debug("Tapping: key event while last tap(>0).\n");
                    }
                    process_action(keyp);
    348c:	c8 01       	movw	r24, r16
    348e:	0e 94 6d 15 	call	0x2ada	; 0x2ada <process_action>
    3492:	a4 c0       	rjmp	.+328    	; 0x35dc <process_tapping+0x31c>
                }
            }
        }
        // after TAPPING_TERM
        else {
            if (tapping_key.tap.count == 0) {
    3494:	8f 2f       	mov	r24, r31
    3496:	80 7f       	andi	r24, 0xF0	; 240
    3498:	69 f7       	brne	.-38     	; 0x3474 <process_tapping+0x1b4>
                debug("Tapping: End. Timeout. Not tap(0): ");
                debug_event(event); debug("\n");
    349a:	7e 2d       	mov	r23, r14
    349c:	f9 8a       	std	Y+17, r15	; 0x11
    349e:	e8 8a       	std	Y+16, r14	; 0x10
    34a0:	89 89       	ldd	r24, Y+17	; 0x11
    34a2:	0e 94 aa 18 	call	0x3154	; 0x3154 <debug_event>
                process_action(&tapping_key);
    34a6:	82 ea       	ldi	r24, 0xA2	; 162
    34a8:	91 e0       	ldi	r25, 0x01	; 1
    34aa:	0e 94 6d 15 	call	0x2ada	; 0x2ada <process_action>
                tapping_key = (keyrecord_t){};
    34ae:	e2 ea       	ldi	r30, 0xA2	; 162
    34b0:	f1 e0       	ldi	r31, 0x01	; 1
    34b2:	86 e0       	ldi	r24, 0x06	; 6
    34b4:	df 01       	movw	r26, r30
    34b6:	1d 92       	st	X+, r1
    34b8:	8a 95       	dec	r24
    34ba:	e9 f7       	brne	.-6      	; 0x34b6 <process_tapping+0x1f6>
                debug_tapping_key();
    34bc:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <debug_tapping_key>
                return false;
    34c0:	d1 2c       	mov	r13, r1
    34c2:	db c0       	rjmp	.+438    	; 0x367a <process_tapping+0x3ba>
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    34c4:	74 13       	cpse	r23, r20
    34c6:	d8 cf       	rjmp	.-80     	; 0x3478 <process_tapping+0x1b8>
    34c8:	61 11       	cpse	r22, r1
    34ca:	d6 cf       	rjmp	.-84     	; 0x3478 <process_tapping+0x1b8>
                    debug("Tapping: End. last timeout tap release(>0).");
                    keyp->tap = tapping_key.tap;
    34cc:	d8 01       	movw	r26, r16
    34ce:	15 96       	adiw	r26, 0x05	; 5
    34d0:	fc 93       	st	X, r31
                    process_action(keyp);
    34d2:	c8 01       	movw	r24, r16
    34d4:	0e 94 6d 15 	call	0x2ada	; 0x2ada <process_action>
                    tapping_key = (keyrecord_t){};
    34d8:	e2 ea       	ldi	r30, 0xA2	; 162
    34da:	f1 e0       	ldi	r31, 0x01	; 1
    34dc:	86 e0       	ldi	r24, 0x06	; 6
    34de:	df 01       	movw	r26, r30
    34e0:	1d 92       	st	X+, r1
    34e2:	8a 95       	dec	r24
    34e4:	e9 f7       	brne	.-6      	; 0x34e0 <process_tapping+0x220>
                    return true;
    34e6:	c9 c0       	rjmp	.+402    	; 0x367a <process_tapping+0x3ba>
                }
                else if (is_tap_key(event.key) && event.pressed) {
    34e8:	d6 2e       	mov	r13, r22
    34ea:	66 23       	and	r22, r22
    34ec:	79 f2       	breq	.-98     	; 0x348c <process_tapping+0x1cc>
                    if (tapping_key.tap.count > 1) {
    34ee:	20 91 a7 01 	lds	r18, 0x01A7
    34f2:	82 2f       	mov	r24, r18
    34f4:	82 95       	swap	r24
    34f6:	8f 70       	andi	r24, 0x0F	; 15
    34f8:	90 e0       	ldi	r25, 0x00	; 0
    34fa:	02 97       	sbiw	r24, 0x02	; 2
    34fc:	74 f0       	brlt	.+28     	; 0x351a <process_tapping+0x25a>
                        debug("Tapping: Start new tap with releasing last timeout tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    34fe:	80 91 a2 01 	lds	r24, 0x01A2
    3502:	90 91 a3 01 	lds	r25, 0x01A3
    3506:	9a 83       	std	Y+2, r25	; 0x02
    3508:	89 83       	std	Y+1, r24	; 0x01
    350a:	1b 82       	std	Y+3, r1	; 0x03
    350c:	fd 82       	std	Y+5, r15	; 0x05
    350e:	ec 82       	std	Y+4, r14	; 0x04
    3510:	2e 83       	std	Y+6, r18	; 0x06
    3512:	ce 01       	movw	r24, r28
    3514:	01 96       	adiw	r24, 0x01	; 1
    3516:	0e 94 6d 15 	call	0x2ada	; 0x2ada <process_action>
                                .event.pressed = false
                        });
                    } else {
                        debug("Tapping: Start while last timeout tap(1).\n");
                    }
                    tapping_key = *keyp;
    351a:	86 e0       	ldi	r24, 0x06	; 6
    351c:	f8 01       	movw	r30, r16
    351e:	a2 ea       	ldi	r26, 0xA2	; 162
    3520:	b1 e0       	ldi	r27, 0x01	; 1
    3522:	01 90       	ld	r0, Z+
    3524:	0d 92       	st	X+, r0
    3526:	8a 95       	dec	r24
    3528:	e1 f7       	brne	.-8      	; 0x3522 <process_tapping+0x262>
                    waiting_buffer_scan_tap();
    352a:	0e 94 f8 18 	call	0x31f0	; 0x31f0 <waiting_buffer_scan_tap>
    352e:	6f c0       	rjmp	.+222    	; 0x360e <process_tapping+0x34e>
                    return true;
                }
            }
        }
    } else if (IS_TAPPING_RELEASED()) {
        if (WITHIN_TAPPING_TERM(event)) {
    3530:	e2 16       	cp	r14, r18
    3532:	f3 06       	cpc	r15, r19
    3534:	28 f0       	brcs	.+10     	; 0x3540 <process_tapping+0x280>
    3536:	c7 01       	movw	r24, r14
    3538:	82 1b       	sub	r24, r18
    353a:	93 0b       	sbc	r25, r19
    353c:	9c 01       	movw	r18, r24
    353e:	04 c0       	rjmp	.+8      	; 0x3548 <process_tapping+0x288>
    3540:	20 95       	com	r18
    3542:	30 95       	com	r19
    3544:	2e 0d       	add	r18, r14
    3546:	3f 1d       	adc	r19, r15
    3548:	28 3c       	cpi	r18, 0xC8	; 200
    354a:	31 05       	cpc	r19, r1
    354c:	08 f0       	brcs	.+2      	; 0x3550 <process_tapping+0x290>
    354e:	52 c0       	rjmp	.+164    	; 0x35f4 <process_tapping+0x334>
            if (event.pressed) {
    3550:	d6 2e       	mov	r13, r22
    3552:	66 23       	and	r22, r22
    3554:	09 f4       	brne	.+2      	; 0x3558 <process_tapping+0x298>
    3556:	9a cf       	rjmp	.-204    	; 0x348c <process_tapping+0x1cc>
                if (IS_TAPPING_KEY(event.key)) {
    3558:	e5 13       	cpse	r30, r21
    355a:	2c c0       	rjmp	.+88     	; 0x35b4 <process_tapping+0x2f4>
    355c:	74 13       	cpse	r23, r20
    355e:	2a c0       	rjmp	.+84     	; 0x35b4 <process_tapping+0x2f4>
                    if (!tapping_key.tap.interrupted && tapping_key.tap.count > 0) {
    3560:	80 91 a7 01 	lds	r24, 0x01A7
    3564:	80 fd       	sbrc	r24, 0
    3566:	1d c0       	rjmp	.+58     	; 0x35a2 <process_tapping+0x2e2>
    3568:	98 2f       	mov	r25, r24
    356a:	92 95       	swap	r25
    356c:	9f 70       	andi	r25, 0x0F	; 15
    356e:	c9 f0       	breq	.+50     	; 0x35a2 <process_tapping+0x2e2>
                        // sequential tap.
                        keyp->tap = tapping_key.tap;
    3570:	d8 01       	movw	r26, r16
    3572:	15 96       	adiw	r26, 0x05	; 5
    3574:	8c 93       	st	X, r24
    3576:	15 97       	sbiw	r26, 0x05	; 5
                        if (keyp->tap.count < 15) keyp->tap.count += 1;
    3578:	9f 30       	cpi	r25, 0x0F	; 15
    357a:	39 f0       	breq	.+14     	; 0x358a <process_tapping+0x2ca>
    357c:	9f 5f       	subi	r25, 0xFF	; 255
    357e:	92 95       	swap	r25
    3580:	90 7f       	andi	r25, 0xF0	; 240
    3582:	8f 70       	andi	r24, 0x0F	; 15
    3584:	89 2b       	or	r24, r25
    3586:	15 96       	adiw	r26, 0x05	; 5
    3588:	8c 93       	st	X, r24
                        debug("Tapping: Tap press("); debug_dec(keyp->tap.count); debug(")\n");
                        process_action(keyp);
    358a:	c8 01       	movw	r24, r16
    358c:	0e 94 6d 15 	call	0x2ada	; 0x2ada <process_action>
                        tapping_key = *keyp;
    3590:	86 e0       	ldi	r24, 0x06	; 6
    3592:	f8 01       	movw	r30, r16
    3594:	a2 ea       	ldi	r26, 0xA2	; 162
    3596:	b1 e0       	ldi	r27, 0x01	; 1
    3598:	01 90       	ld	r0, Z+
    359a:	0d 92       	st	X+, r0
    359c:	8a 95       	dec	r24
    359e:	e1 f7       	brne	.-8      	; 0x3598 <process_tapping+0x2d8>
    35a0:	36 c0       	rjmp	.+108    	; 0x360e <process_tapping+0x34e>
                        debug_tapping_key();
                        return true;
                    } else {
                        // FIX: start new tap again
                        tapping_key = *keyp;
    35a2:	86 e0       	ldi	r24, 0x06	; 6
    35a4:	f8 01       	movw	r30, r16
    35a6:	a2 ea       	ldi	r26, 0xA2	; 162
    35a8:	b1 e0       	ldi	r27, 0x01	; 1
    35aa:	01 90       	ld	r0, Z+
    35ac:	0d 92       	st	X+, r0
    35ae:	8a 95       	dec	r24
    35b0:	e1 f7       	brne	.-8      	; 0x35aa <process_tapping+0x2ea>
                        return true;
    35b2:	63 c0       	rjmp	.+198    	; 0x367a <process_tapping+0x3ba>
                    }
                } else if (is_tap_key(event.key)) {
    35b4:	4d 87       	std	Y+13, r20	; 0x0d
    35b6:	5e 87       	std	Y+14, r21	; 0x0e
    35b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    35ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    35bc:	0e 94 89 18 	call	0x3112	; 0x3112 <is_tap_key>
    35c0:	88 23       	and	r24, r24
    35c2:	79 f0       	breq	.+30     	; 0x35e2 <process_tapping+0x322>
                    // Sequential tap can be interfered with other tap key.
                    debug("Tapping: Start with interfering other tap.\n");
                    tapping_key = *keyp;
    35c4:	86 e0       	ldi	r24, 0x06	; 6
    35c6:	f8 01       	movw	r30, r16
    35c8:	a2 ea       	ldi	r26, 0xA2	; 162
    35ca:	b1 e0       	ldi	r27, 0x01	; 1
    35cc:	01 90       	ld	r0, Z+
    35ce:	0d 92       	st	X+, r0
    35d0:	8a 95       	dec	r24
    35d2:	e1 f7       	brne	.-8      	; 0x35cc <process_tapping+0x30c>
                    waiting_buffer_scan_tap();
    35d4:	0e 94 f8 18 	call	0x31f0	; 0x31f0 <waiting_buffer_scan_tap>
                    debug_tapping_key();
    35d8:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <debug_tapping_key>
                    return true;
    35dc:	dd 24       	eor	r13, r13
    35de:	d3 94       	inc	r13
    35e0:	4c c0       	rjmp	.+152    	; 0x367a <process_tapping+0x3ba>
                } else {
                    // should none in buffer
                    // FIX: interrupted when other key is pressed
                    tapping_key.tap.interrupted = true;
    35e2:	80 91 a7 01 	lds	r24, 0x01A7
    35e6:	81 60       	ori	r24, 0x01	; 1
    35e8:	80 93 a7 01 	sts	0x01A7, r24
                    process_action(keyp);
    35ec:	c8 01       	movw	r24, r16
    35ee:	0e 94 6d 15 	call	0x2ada	; 0x2ada <process_action>
                    return true;
    35f2:	43 c0       	rjmp	.+134    	; 0x367a <process_tapping+0x3ba>
            }
        } else {
            // FIX: process_aciton here?
            // timeout. no sequential tap.
            debug("Tapping: End(Timeout after releasing last tap): ");
            debug_event(event); debug("\n");
    35f4:	7e 2d       	mov	r23, r14
    35f6:	f9 8a       	std	Y+17, r15	; 0x11
    35f8:	e8 8a       	std	Y+16, r14	; 0x10
    35fa:	89 89       	ldd	r24, Y+17	; 0x11
    35fc:	0e 94 aa 18 	call	0x3154	; 0x3154 <debug_event>
            tapping_key = (keyrecord_t){};
    3600:	e2 ea       	ldi	r30, 0xA2	; 162
    3602:	f1 e0       	ldi	r31, 0x01	; 1
    3604:	86 e0       	ldi	r24, 0x06	; 6
    3606:	df 01       	movw	r26, r30
    3608:	1d 92       	st	X+, r1
    360a:	8a 95       	dec	r24
    360c:	e9 f7       	brne	.-6      	; 0x3608 <process_tapping+0x348>
            debug_tapping_key();
    360e:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <debug_tapping_key>
            return false;
    3612:	33 c0       	rjmp	.+102    	; 0x367a <process_tapping+0x3ba>
        }
    }
    // not tapping state
    else {
        if (event.pressed && is_tap_key(event.key)) {
    3614:	66 23       	and	r22, r22
    3616:	09 f4       	brne	.+2      	; 0x361a <process_tapping+0x35a>
    3618:	39 cf       	rjmp	.-398    	; 0x348c <process_tapping+0x1cc>
    361a:	4d 87       	std	Y+13, r20	; 0x0d
    361c:	5e 87       	std	Y+14, r21	; 0x0e
    361e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3620:	9e 85       	ldd	r25, Y+14	; 0x0e
    3622:	0e 94 89 18 	call	0x3112	; 0x3112 <is_tap_key>
    3626:	88 23       	and	r24, r24
    3628:	09 f4       	brne	.+2      	; 0x362c <process_tapping+0x36c>
    362a:	30 cf       	rjmp	.-416    	; 0x348c <process_tapping+0x1cc>
    362c:	cb cf       	rjmp	.-106    	; 0x35c4 <process_tapping+0x304>
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
    362e:	4d 87       	std	Y+13, r20	; 0x0d
    3630:	5e 87       	std	Y+14, r21	; 0x0e
    3632:	8d 85       	ldd	r24, Y+13	; 0x0d
    3634:	9e 85       	ldd	r25, Y+14	; 0x0e
    3636:	0e 94 a8 1d 	call	0x3b50	; 0x3b50 <layer_switch_get_action>
                    switch (action.kind.id) {
    363a:	29 2f       	mov	r18, r25
    363c:	22 95       	swap	r18
    363e:	2f 70       	andi	r18, 0x0F	; 15
    3640:	30 e0       	ldi	r19, 0x00	; 0
    3642:	22 30       	cpi	r18, 0x02	; 2
    3644:	31 05       	cpc	r19, r1
    3646:	2c f4       	brge	.+10     	; 0x3652 <process_tapping+0x392>
                        case ACT_LMODS:
                        case ACT_RMODS:
                            if (action.key.mods && !action.key.code) return false;
    3648:	9f 70       	andi	r25, 0x0F	; 15
    364a:	41 f0       	breq	.+16     	; 0x365c <process_tapping+0x39c>
    364c:	81 11       	cpse	r24, r1
    364e:	06 c0       	rjmp	.+12     	; 0x365c <process_tapping+0x39c>
    3650:	0c c0       	rjmp	.+24     	; 0x366a <process_tapping+0x3aa>
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
                    switch (action.kind.id) {
    3652:	24 30       	cpi	r18, 0x04	; 4
    3654:	31 05       	cpc	r19, r1
    3656:	2c f4       	brge	.+10     	; 0x3662 <process_tapping+0x3a2>
                            if (action.key.mods && !action.key.code) return false;
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
    3658:	9f 70       	andi	r25, 0x0F	; 15
    365a:	49 f4       	brne	.+18     	; 0x366e <process_tapping+0x3ae>
                            if (IS_MOD(action.key.code)) return false;
    365c:	80 5e       	subi	r24, 0xE0	; 224
    365e:	88 30       	cpi	r24, 0x08	; 8
    3660:	20 f0       	brcs	.+8      	; 0x366a <process_tapping+0x3aa>
                            break;
                    }
                    // Release of key should be process immediately.
                    debug("Tapping: release event of a key pressed before tapping\n");
                    process_action(keyp);
    3662:	c8 01       	movw	r24, r16
    3664:	0e 94 6d 15 	call	0x2ada	; 0x2ada <process_action>
                    return true;
    3668:	cf 2c       	mov	r12, r15
    366a:	dc 2c       	mov	r13, r12
    366c:	06 c0       	rjmp	.+12     	; 0x367a <process_tapping+0x3ba>
                            if (action.key.mods && !action.key.code) return false;
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
    366e:	d8 01       	movw	r26, r16
    3670:	15 96       	adiw	r26, 0x05	; 5
    3672:	9c 91       	ld	r25, X
    3674:	90 7f       	andi	r25, 0xF0	; 240
    3676:	91 f7       	brne	.-28     	; 0x365c <process_tapping+0x39c>
    3678:	f8 cf       	rjmp	.-16     	; 0x366a <process_tapping+0x3aa>
        } else {
            process_action(keyp);
            return true;
        }
    }
}
    367a:	8d 2d       	mov	r24, r13
    367c:	62 96       	adiw	r28, 0x12	; 18
    367e:	0f b6       	in	r0, 0x3f	; 63
    3680:	f8 94       	cli
    3682:	de bf       	out	0x3e, r29	; 62
    3684:	0f be       	out	0x3f, r0	; 63
    3686:	cd bf       	out	0x3d, r28	; 61
    3688:	df 91       	pop	r29
    368a:	cf 91       	pop	r28
    368c:	1f 91       	pop	r17
    368e:	0f 91       	pop	r16
    3690:	ff 90       	pop	r15
    3692:	ef 90       	pop	r14
    3694:	df 90       	pop	r13
    3696:	cf 90       	pop	r12
    3698:	08 95       	ret

0000369a <action_tapping_process>:
static void debug_tapping_key(void);
static void debug_waiting_buffer(void);


void action_tapping_process(keyrecord_t record)
{
    369a:	1f 93       	push	r17
    369c:	cf 93       	push	r28
    369e:	df 93       	push	r29
    36a0:	cd b7       	in	r28, 0x3d	; 61
    36a2:	de b7       	in	r29, 0x3e	; 62
    36a4:	2c 97       	sbiw	r28, 0x0c	; 12
    36a6:	0f b6       	in	r0, 0x3f	; 63
    36a8:	f8 94       	cli
    36aa:	de bf       	out	0x3e, r29	; 62
    36ac:	0f be       	out	0x3f, r0	; 63
    36ae:	cd bf       	out	0x3d, r28	; 61
    36b0:	4f 83       	std	Y+7, r20	; 0x07
    36b2:	58 87       	std	Y+8, r21	; 0x08
    36b4:	69 87       	std	Y+9, r22	; 0x09
    36b6:	7a 87       	std	Y+10, r23	; 0x0a
    36b8:	8b 87       	std	Y+11, r24	; 0x0b
    36ba:	9c 87       	std	Y+12, r25	; 0x0c
    if (process_tapping(&record)) {
    36bc:	ce 01       	movw	r24, r28
    36be:	07 96       	adiw	r24, 0x07	; 7
    36c0:	0e 94 60 19 	call	0x32c0	; 0x32c0 <process_tapping>
    36c4:	88 23       	and	r24, r24
    36c6:	c1 f0       	breq	.+48     	; 0x36f8 <action_tapping_process+0x5e>
        if (!IS_NOEVENT(record.event)) {
    36c8:	2f 81       	ldd	r18, Y+7	; 0x07
    36ca:	38 85       	ldd	r19, Y+8	; 0x08

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    36cc:	8a 85       	ldd	r24, Y+10	; 0x0a
    36ce:	9b 85       	ldd	r25, Y+11	; 0x0b
    36d0:	89 2b       	or	r24, r25
    36d2:	31 f0       	breq	.+12     	; 0x36e0 <action_tapping_process+0x46>
    36d4:	3f 3f       	cpi	r19, 0xFF	; 255
    36d6:	11 f0       	breq	.+4      	; 0x36dc <action_tapping_process+0x42>
    36d8:	80 e0       	ldi	r24, 0x00	; 0
    36da:	03 c0       	rjmp	.+6      	; 0x36e2 <action_tapping_process+0x48>
    36dc:	2f 3f       	cpi	r18, 0xFF	; 255
    36de:	e1 f7       	brne	.-8      	; 0x36d8 <action_tapping_process+0x3e>
    36e0:	81 e0       	ldi	r24, 0x01	; 1
    36e2:	81 11       	cpse	r24, r1
    36e4:	47 c0       	rjmp	.+142    	; 0x3774 <action_tapping_process+0xda>
            debug("processed: "); debug_record(record); debug("\n");
    36e6:	4f 81       	ldd	r20, Y+7	; 0x07
    36e8:	58 85       	ldd	r21, Y+8	; 0x08
    36ea:	69 85       	ldd	r22, Y+9	; 0x09
    36ec:	7a 85       	ldd	r23, Y+10	; 0x0a
    36ee:	8b 85       	ldd	r24, Y+11	; 0x0b
    36f0:	9c 85       	ldd	r25, Y+12	; 0x0c
    36f2:	0e 94 b9 18 	call	0x3172	; 0x3172 <debug_record>
    36f6:	3e c0       	rjmp	.+124    	; 0x3774 <action_tapping_process+0xda>
    36f8:	86 e0       	ldi	r24, 0x06	; 6
    36fa:	fe 01       	movw	r30, r28
    36fc:	37 96       	adiw	r30, 0x07	; 7
    36fe:	de 01       	movw	r26, r28
    3700:	11 96       	adiw	r26, 0x01	; 1
    3702:	01 90       	ld	r0, Z+
    3704:	0d 92       	st	X+, r0
    3706:	8a 95       	dec	r24
    3708:	e1 f7       	brne	.-8      	; 0x3702 <action_tapping_process+0x68>
    370a:	ff 81       	ldd	r31, Y+7	; 0x07
    370c:	e8 85       	ldd	r30, Y+8	; 0x08
    370e:	4a 85       	ldd	r20, Y+10	; 0x0a
    3710:	5b 85       	ldd	r21, Y+11	; 0x0b
    3712:	41 15       	cp	r20, r1
    3714:	51 05       	cpc	r21, r1
    3716:	31 f0       	breq	.+12     	; 0x3724 <action_tapping_process+0x8a>
    3718:	ef 3f       	cpi	r30, 0xFF	; 255
    371a:	31 f4       	brne	.+12     	; 0x3728 <action_tapping_process+0x8e>
    371c:	81 e0       	ldi	r24, 0x01	; 1
    371e:	ff 3f       	cpi	r31, 0xFF	; 255
    3720:	19 f4       	brne	.+6      	; 0x3728 <action_tapping_process+0x8e>
    3722:	03 c0       	rjmp	.+6      	; 0x372a <action_tapping_process+0x90>
    3724:	81 e0       	ldi	r24, 0x01	; 1
    3726:	01 c0       	rjmp	.+2      	; 0x372a <action_tapping_process+0x90>
    3728:	80 e0       	ldi	r24, 0x00	; 0
/*
 * Waiting buffer
 */
bool waiting_buffer_enq(keyrecord_t record)
{
    if (IS_NOEVENT(record.event)) {
    372a:	80 fd       	sbrc	r24, 0
    372c:	23 c0       	rjmp	.+70     	; 0x3774 <action_tapping_process+0xda>
        return true;
    }

    if ((waiting_buffer_head + 1) % WAITING_BUFFER_SIZE == waiting_buffer_tail) {
    372e:	20 91 71 01 	lds	r18, 0x0171
    3732:	30 e0       	ldi	r19, 0x00	; 0
    3734:	c9 01       	movw	r24, r18
    3736:	01 96       	adiw	r24, 0x01	; 1
    3738:	87 70       	andi	r24, 0x07	; 7
    373a:	99 27       	eor	r25, r25
    373c:	60 91 70 01 	lds	r22, 0x0170
    3740:	70 e0       	ldi	r23, 0x00	; 0
    3742:	86 17       	cp	r24, r22
    3744:	97 07       	cpc	r25, r23
    3746:	f1 f1       	breq	.+124    	; 0x37c4 <action_tapping_process+0x12a>
        debug("waiting_buffer_enq: Over flow.\n");
        return false;
    }

    waiting_buffer[waiting_buffer_head] = record;
    3748:	f9 83       	std	Y+1, r31	; 0x01
    374a:	ea 83       	std	Y+2, r30	; 0x02
    374c:	5d 83       	std	Y+5, r21	; 0x05
    374e:	4c 83       	std	Y+4, r20	; 0x04
    3750:	96 e0       	ldi	r25, 0x06	; 6
    3752:	92 9f       	mul	r25, r18
    3754:	d0 01       	movw	r26, r0
    3756:	93 9f       	mul	r25, r19
    3758:	b0 0d       	add	r27, r0
    375a:	11 24       	eor	r1, r1
    375c:	ae 58       	subi	r26, 0x8E	; 142
    375e:	be 4f       	sbci	r27, 0xFE	; 254
    3760:	fe 01       	movw	r30, r28
    3762:	31 96       	adiw	r30, 0x01	; 1
    3764:	01 90       	ld	r0, Z+
    3766:	0d 92       	st	X+, r0
    3768:	9a 95       	dec	r25
    376a:	e1 f7       	brne	.-8      	; 0x3764 <action_tapping_process+0xca>
    waiting_buffer_head = (waiting_buffer_head + 1) % WAITING_BUFFER_SIZE;
    376c:	80 93 71 01 	sts	0x0171, r24

    debug("waiting_buffer_enq: "); debug_waiting_buffer();
    3770:	0e 94 c9 18 	call	0x3192	; 0x3192 <debug_waiting_buffer>
    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    3774:	16 e0       	ldi	r17, 0x06	; 6

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    3776:	80 91 70 01 	lds	r24, 0x0170
    377a:	90 91 71 01 	lds	r25, 0x0171
    377e:	89 17       	cp	r24, r25
    3780:	79 f1       	breq	.+94     	; 0x37e0 <action_tapping_process+0x146>
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    3782:	18 9f       	mul	r17, r24
    3784:	c0 01       	movw	r24, r0
    3786:	11 24       	eor	r1, r1
    3788:	8e 58       	subi	r24, 0x8E	; 142
    378a:	9e 4f       	sbci	r25, 0xFE	; 254
    378c:	0e 94 60 19 	call	0x32c0	; 0x32c0 <process_tapping>
    3790:	88 23       	and	r24, r24
    3792:	31 f1       	breq	.+76     	; 0x37e0 <action_tapping_process+0x146>
            debug("processed: waiting_buffer["); debug_dec(waiting_buffer_tail); debug("] = ");
            debug_record(waiting_buffer[waiting_buffer_tail]); debug("\n\n");
    3794:	e0 91 70 01 	lds	r30, 0x0170
    3798:	1e 9f       	mul	r17, r30
    379a:	f0 01       	movw	r30, r0
    379c:	11 24       	eor	r1, r1
    379e:	ee 58       	subi	r30, 0x8E	; 142
    37a0:	fe 4f       	sbci	r31, 0xFE	; 254
    37a2:	40 81       	ld	r20, Z
    37a4:	51 81       	ldd	r21, Z+1	; 0x01
    37a6:	62 81       	ldd	r22, Z+2	; 0x02
    37a8:	73 81       	ldd	r23, Z+3	; 0x03
    37aa:	84 81       	ldd	r24, Z+4	; 0x04
    37ac:	95 81       	ldd	r25, Z+5	; 0x05
    37ae:	0e 94 b9 18 	call	0x3172	; 0x3172 <debug_record>

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    37b2:	80 91 70 01 	lds	r24, 0x0170
    37b6:	90 e0       	ldi	r25, 0x00	; 0
    37b8:	01 96       	adiw	r24, 0x01	; 1
    37ba:	87 70       	andi	r24, 0x07	; 7
    37bc:	99 27       	eor	r25, r25
    37be:	80 93 70 01 	sts	0x0170, r24
    37c2:	d9 cf       	rjmp	.-78     	; 0x3776 <action_tapping_process+0xdc>
        }
    } else {
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
    37c4:	0e 94 85 18 	call	0x310a	; 0x310a <clear_keyboard>
    return true;
}

void waiting_buffer_clear(void)
{
    waiting_buffer_head = 0;
    37c8:	10 92 71 01 	sts	0x0171, r1
    waiting_buffer_tail = 0;
    37cc:	10 92 70 01 	sts	0x0170, r1
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
            waiting_buffer_clear();
            tapping_key = (keyrecord_t){};
    37d0:	e2 ea       	ldi	r30, 0xA2	; 162
    37d2:	f1 e0       	ldi	r31, 0x01	; 1
    37d4:	86 e0       	ldi	r24, 0x06	; 6
    37d6:	df 01       	movw	r26, r30
    37d8:	1d 92       	st	X+, r1
    37da:	8a 95       	dec	r24
    37dc:	e9 f7       	brne	.-6      	; 0x37d8 <action_tapping_process+0x13e>
    37de:	ca cf       	rjmp	.-108    	; 0x3774 <action_tapping_process+0xda>
        }
    }
    if (!IS_NOEVENT(record.event)) {
        debug("\n");
    }
}
    37e0:	2c 96       	adiw	r28, 0x0c	; 12
    37e2:	0f b6       	in	r0, 0x3f	; 63
    37e4:	f8 94       	cli
    37e6:	de bf       	out	0x3e, r29	; 62
    37e8:	0f be       	out	0x3f, r0	; 63
    37ea:	cd bf       	out	0x3d, r28	; 61
    37ec:	df 91       	pop	r29
    37ee:	cf 91       	pop	r28
    37f0:	1f 91       	pop	r17
    37f2:	08 95       	ret

000037f4 <action_macro_play>:

#ifndef NO_ACTION_MACRO

#define MACRO_READ()  (macro = MACRO_GET(macro_p++))
void action_macro_play(const macro_t *macro_p)
{
    37f4:	ef 92       	push	r14
    37f6:	ff 92       	push	r15
    37f8:	0f 93       	push	r16
    37fa:	1f 93       	push	r17
    37fc:	cf 93       	push	r28
    37fe:	df 93       	push	r29
    3800:	9c 01       	movw	r18, r24
    macro_t macro = END;
    uint8_t interval = 0;

    if (!macro_p) return;
    3802:	00 97       	sbiw	r24, 0x00	; 0
    3804:	09 f4       	brne	.+2      	; 0x3808 <action_macro_play+0x14>
    3806:	6f c0       	rjmp	.+222    	; 0x38e6 <action_macro_play+0xf2>
    3808:	f1 2c       	mov	r15, r1
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    add_weak_mods(MOD_BIT(macro));
    380a:	ee 24       	eor	r14, r14
    380c:	e3 94       	inc	r14
    macro_t macro = END;
    uint8_t interval = 0;

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
    380e:	e9 01       	movw	r28, r18
    3810:	21 96       	adiw	r28, 0x01	; 1
    3812:	f9 01       	movw	r30, r18
    3814:	84 91       	lpm	r24, Z
    3816:	84 37       	cpi	r24, 0x74	; 116
    3818:	40 f4       	brcc	.+16     	; 0x382a <action_macro_play+0x36>
    381a:	84 30       	cpi	r24, 0x04	; 4
    381c:	08 f0       	brcs	.+2      	; 0x3820 <action_macro_play+0x2c>
    381e:	54 c0       	rjmp	.+168    	; 0x38c8 <action_macro_play+0xd4>
    3820:	81 30       	cpi	r24, 0x01	; 1
    3822:	81 f0       	breq	.+32     	; 0x3844 <action_macro_play+0x50>
    3824:	82 30       	cpi	r24, 0x02	; 2
    3826:	21 f1       	breq	.+72     	; 0x3870 <action_macro_play+0x7c>
    3828:	5e c0       	rjmp	.+188    	; 0x38e6 <action_macro_play+0xf2>
    382a:	85 37       	cpi	r24, 0x75	; 117
    382c:	09 f4       	brne	.+2      	; 0x3830 <action_macro_play+0x3c>
    382e:	47 c0       	rjmp	.+142    	; 0x38be <action_macro_play+0xca>
    3830:	b0 f1       	brcs	.+108    	; 0x389e <action_macro_play+0xaa>
    3832:	9c e7       	ldi	r25, 0x7C	; 124
    3834:	98 0f       	add	r25, r24
    3836:	90 37       	cpi	r25, 0x70	; 112
    3838:	08 f0       	brcs	.+2      	; 0x383c <action_macro_play+0x48>
    383a:	55 c0       	rjmp	.+170    	; 0x38e6 <action_macro_play+0xf2>
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
                break;
            case 0x84 ... 0xF3:
                dprintf("UP(%02X)\n", macro);
                unregister_code(macro&0x7F);
    383c:	8f 77       	andi	r24, 0x7F	; 127
    383e:	0e 94 10 15 	call	0x2a20	; 0x2a20 <unregister_code>
                break;
    3842:	44 c0       	rjmp	.+136    	; 0x38cc <action_macro_play+0xd8>

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
    3844:	89 01       	movw	r16, r18
    3846:	0e 5f       	subi	r16, 0xFE	; 254
    3848:	1f 4f       	sbci	r17, 0xFF	; 255
    384a:	fe 01       	movw	r30, r28
    384c:	84 91       	lpm	r24, Z
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
    384e:	90 e2       	ldi	r25, 0x20	; 32
    3850:	98 0f       	add	r25, r24
    3852:	98 30       	cpi	r25, 0x08	; 8
    3854:	50 f4       	brcc	.+20     	; 0x386a <action_macro_play+0x76>
                    add_weak_mods(MOD_BIT(macro));
    3856:	87 70       	andi	r24, 0x07	; 7
    3858:	fe 2d       	mov	r31, r14
    385a:	01 c0       	rjmp	.+2      	; 0x385e <action_macro_play+0x6a>
    385c:	ff 0f       	add	r31, r31
    385e:	8a 95       	dec	r24
    3860:	ea f7       	brpl	.-6      	; 0x385c <action_macro_play+0x68>
    3862:	8f 2f       	mov	r24, r31
    3864:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <add_weak_mods>
    3868:	15 c0       	rjmp	.+42     	; 0x3894 <action_macro_play+0xa0>
                } else {
                    register_code(macro);
    386a:	0e 94 48 14 	call	0x2890	; 0x2890 <register_code>
    386e:	12 c0       	rjmp	.+36     	; 0x3894 <action_macro_play+0xa0>
                }
                break;
            case KEY_UP:
                MACRO_READ();
    3870:	89 01       	movw	r16, r18
    3872:	0e 5f       	subi	r16, 0xFE	; 254
    3874:	1f 4f       	sbci	r17, 0xFF	; 255
    3876:	fe 01       	movw	r30, r28
    3878:	84 91       	lpm	r24, Z
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
    387a:	90 e2       	ldi	r25, 0x20	; 32
    387c:	98 0f       	add	r25, r24
    387e:	98 30       	cpi	r25, 0x08	; 8
    3880:	58 f4       	brcc	.+22     	; 0x3898 <action_macro_play+0xa4>
                    del_weak_mods(MOD_BIT(macro));
    3882:	87 70       	andi	r24, 0x07	; 7
    3884:	fe 2d       	mov	r31, r14
    3886:	01 c0       	rjmp	.+2      	; 0x388a <action_macro_play+0x96>
    3888:	ff 0f       	add	r31, r31
    388a:	8a 95       	dec	r24
    388c:	ea f7       	brpl	.-6      	; 0x3888 <action_macro_play+0x94>
    388e:	8f 2f       	mov	r24, r31
    3890:	0e 94 9b 1e 	call	0x3d36	; 0x3d36 <del_weak_mods>
                } else {
                    register_code(macro);
                }
                break;
            case KEY_UP:
                MACRO_READ();
    3894:	e8 01       	movw	r28, r16
    3896:	1a c0       	rjmp	.+52     	; 0x38cc <action_macro_play+0xd8>
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    del_weak_mods(MOD_BIT(macro));
                } else {
                    unregister_code(macro);
    3898:	0e 94 10 15 	call	0x2a20	; 0x2a20 <unregister_code>
    389c:	fb cf       	rjmp	.-10     	; 0x3894 <action_macro_play+0xa0>
                }
                break;
            case WAIT:
                MACRO_READ();
    389e:	2e 5f       	subi	r18, 0xFE	; 254
    38a0:	3f 4f       	sbci	r19, 0xFF	; 255
    38a2:	fe 01       	movw	r30, r28
    38a4:	c4 91       	lpm	r28, Z
                dprintf("WAIT(%u)\n", macro);
                { uint8_t ms = macro; while (ms--) wait_ms(1); }
    38a6:	cc 23       	and	r28, r28
    38a8:	41 f0       	breq	.+16     	; 0x38ba <action_macro_play+0xc6>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    38aa:	8f e9       	ldi	r24, 0x9F	; 159
    38ac:	9f e0       	ldi	r25, 0x0F	; 15
    38ae:	01 97       	sbiw	r24, 0x01	; 1
    38b0:	f1 f7       	brne	.-4      	; 0x38ae <action_macro_play+0xba>
    38b2:	00 c0       	rjmp	.+0      	; 0x38b4 <action_macro_play+0xc0>
    38b4:	00 00       	nop
    38b6:	c1 50       	subi	r28, 0x01	; 1
    38b8:	f6 cf       	rjmp	.-20     	; 0x38a6 <action_macro_play+0xb2>
                } else {
                    unregister_code(macro);
                }
                break;
            case WAIT:
                MACRO_READ();
    38ba:	e9 01       	movw	r28, r18
    38bc:	07 c0       	rjmp	.+14     	; 0x38cc <action_macro_play+0xd8>
                dprintf("WAIT(%u)\n", macro);
                { uint8_t ms = macro; while (ms--) wait_ms(1); }
                break;
            case INTERVAL:
                interval = MACRO_READ();
    38be:	fe 01       	movw	r30, r28
    38c0:	f4 90       	lpm	r15, Z
    38c2:	e9 01       	movw	r28, r18
    38c4:	22 96       	adiw	r28, 0x02	; 2
                dprintf("INTERVAL(%u)\n", interval);
                break;
    38c6:	02 c0       	rjmp	.+4      	; 0x38cc <action_macro_play+0xd8>
            case 0x04 ... 0x73:
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
    38c8:	0e 94 48 14 	call	0x2890	; 0x2890 <register_code>
            case END:
            default:
                return;
        }
        // interval
        { uint8_t ms = interval; while (ms--) wait_ms(1); }
    38cc:	8f 2d       	mov	r24, r15
    38ce:	88 23       	and	r24, r24
    38d0:	41 f0       	breq	.+16     	; 0x38e2 <action_macro_play+0xee>
    38d2:	ef e9       	ldi	r30, 0x9F	; 159
    38d4:	ff e0       	ldi	r31, 0x0F	; 15
    38d6:	31 97       	sbiw	r30, 0x01	; 1
    38d8:	f1 f7       	brne	.-4      	; 0x38d6 <action_macro_play+0xe2>
    38da:	00 c0       	rjmp	.+0      	; 0x38dc <action_macro_play+0xe8>
    38dc:	00 00       	nop
    38de:	81 50       	subi	r24, 0x01	; 1
    38e0:	f6 cf       	rjmp	.-20     	; 0x38ce <action_macro_play+0xda>
    38e2:	9e 01       	movw	r18, r28
    38e4:	94 cf       	rjmp	.-216    	; 0x380e <action_macro_play+0x1a>
    }
}
    38e6:	df 91       	pop	r29
    38e8:	cf 91       	pop	r28
    38ea:	1f 91       	pop	r17
    38ec:	0f 91       	pop	r16
    38ee:	ff 90       	pop	r15
    38f0:	ef 90       	pop	r14
    38f2:	08 95       	ret

000038f4 <default_layer_debug>:
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
}

void default_layer_debug(void)
{
    38f4:	08 95       	ret

000038f6 <default_layer_set>:

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    38f6:	60 93 ac 01 	sts	0x01AC, r22
    38fa:	70 93 ad 01 	sts	0x01AD, r23
    38fe:	80 93 ae 01 	sts	0x01AE, r24
    3902:	90 93 af 01 	sts	0x01AF, r25
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    3906:	0c 94 73 18 	jmp	0x30e6	; 0x30e6 <clear_keyboard_but_mods>

0000390a <default_layer_or>:
    default_layer_state_set(state);
}

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    390a:	0f 93       	push	r16
    390c:	1f 93       	push	r17
    default_layer_state_set(default_layer_state | state);
    390e:	00 91 ac 01 	lds	r16, 0x01AC
    3912:	10 91 ad 01 	lds	r17, 0x01AD
    3916:	20 91 ae 01 	lds	r18, 0x01AE
    391a:	30 91 af 01 	lds	r19, 0x01AF
    391e:	06 2b       	or	r16, r22
    3920:	17 2b       	or	r17, r23
    3922:	28 2b       	or	r18, r24
    3924:	39 2b       	or	r19, r25

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    3926:	00 93 ac 01 	sts	0x01AC, r16
    392a:	10 93 ad 01 	sts	0x01AD, r17
    392e:	20 93 ae 01 	sts	0x01AE, r18
    3932:	30 93 af 01 	sts	0x01AF, r19

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    default_layer_state_set(default_layer_state | state);
}
    3936:	1f 91       	pop	r17
    3938:	0f 91       	pop	r16
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    393a:	0c 94 73 18 	jmp	0x30e6	; 0x30e6 <clear_keyboard_but_mods>

0000393e <default_layer_and>:
void default_layer_or(uint32_t state)
{
    default_layer_state_set(default_layer_state | state);
}
void default_layer_and(uint32_t state)
{
    393e:	0f 93       	push	r16
    3940:	1f 93       	push	r17
    default_layer_state_set(default_layer_state & state);
    3942:	00 91 ac 01 	lds	r16, 0x01AC
    3946:	10 91 ad 01 	lds	r17, 0x01AD
    394a:	20 91 ae 01 	lds	r18, 0x01AE
    394e:	30 91 af 01 	lds	r19, 0x01AF
    3952:	06 23       	and	r16, r22
    3954:	17 23       	and	r17, r23
    3956:	28 23       	and	r18, r24
    3958:	39 23       	and	r19, r25

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    395a:	00 93 ac 01 	sts	0x01AC, r16
    395e:	10 93 ad 01 	sts	0x01AD, r17
    3962:	20 93 ae 01 	sts	0x01AE, r18
    3966:	30 93 af 01 	sts	0x01AF, r19
    default_layer_state_set(default_layer_state | state);
}
void default_layer_and(uint32_t state)
{
    default_layer_state_set(default_layer_state & state);
}
    396a:	1f 91       	pop	r17
    396c:	0f 91       	pop	r16
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    396e:	0c 94 73 18 	jmp	0x30e6	; 0x30e6 <clear_keyboard_but_mods>

00003972 <default_layer_xor>:
void default_layer_and(uint32_t state)
{
    default_layer_state_set(default_layer_state & state);
}
void default_layer_xor(uint32_t state)
{
    3972:	0f 93       	push	r16
    3974:	1f 93       	push	r17
    default_layer_state_set(default_layer_state ^ state);
    3976:	00 91 ac 01 	lds	r16, 0x01AC
    397a:	10 91 ad 01 	lds	r17, 0x01AD
    397e:	20 91 ae 01 	lds	r18, 0x01AE
    3982:	30 91 af 01 	lds	r19, 0x01AF
    3986:	06 27       	eor	r16, r22
    3988:	17 27       	eor	r17, r23
    398a:	28 27       	eor	r18, r24
    398c:	39 27       	eor	r19, r25

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    398e:	00 93 ac 01 	sts	0x01AC, r16
    3992:	10 93 ad 01 	sts	0x01AD, r17
    3996:	20 93 ae 01 	sts	0x01AE, r18
    399a:	30 93 af 01 	sts	0x01AF, r19
    default_layer_state_set(default_layer_state & state);
}
void default_layer_xor(uint32_t state)
{
    default_layer_state_set(default_layer_state ^ state);
}
    399e:	1f 91       	pop	r17
    39a0:	0f 91       	pop	r16
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    39a2:	0c 94 73 18 	jmp	0x30e6	; 0x30e6 <clear_keyboard_but_mods>

000039a6 <layer_clear>:

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    39a6:	10 92 a8 01 	sts	0x01A8, r1
    39aa:	10 92 a9 01 	sts	0x01A9, r1
    39ae:	10 92 aa 01 	sts	0x01AA, r1
    39b2:	10 92 ab 01 	sts	0x01AB, r1
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    39b6:	0c 94 73 18 	jmp	0x30e6	; 0x30e6 <clear_keyboard_but_mods>

000039ba <layer_move>:
    layer_state_set(0);
}

void layer_move(uint8_t layer)
{
    layer_state_set(1UL<<layer);
    39ba:	41 e0       	ldi	r20, 0x01	; 1
    39bc:	50 e0       	ldi	r21, 0x00	; 0
    39be:	60 e0       	ldi	r22, 0x00	; 0
    39c0:	70 e0       	ldi	r23, 0x00	; 0
    39c2:	04 c0       	rjmp	.+8      	; 0x39cc <layer_move+0x12>
    39c4:	44 0f       	add	r20, r20
    39c6:	55 1f       	adc	r21, r21
    39c8:	66 1f       	adc	r22, r22
    39ca:	77 1f       	adc	r23, r23
    39cc:	8a 95       	dec	r24
    39ce:	d2 f7       	brpl	.-12     	; 0x39c4 <layer_move+0xa>

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    39d0:	40 93 a8 01 	sts	0x01A8, r20
    39d4:	50 93 a9 01 	sts	0x01A9, r21
    39d8:	60 93 aa 01 	sts	0x01AA, r22
    39dc:	70 93 ab 01 	sts	0x01AB, r23
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    39e0:	0c 94 73 18 	jmp	0x30e6	; 0x30e6 <clear_keyboard_but_mods>

000039e4 <layer_on>:
    layer_state_set(1UL<<layer);
}

void layer_on(uint8_t layer)
{
    layer_state_set(layer_state | (1UL<<layer));
    39e4:	41 e0       	ldi	r20, 0x01	; 1
    39e6:	50 e0       	ldi	r21, 0x00	; 0
    39e8:	60 e0       	ldi	r22, 0x00	; 0
    39ea:	70 e0       	ldi	r23, 0x00	; 0
    39ec:	04 c0       	rjmp	.+8      	; 0x39f6 <layer_on+0x12>
    39ee:	44 0f       	add	r20, r20
    39f0:	55 1f       	adc	r21, r21
    39f2:	66 1f       	adc	r22, r22
    39f4:	77 1f       	adc	r23, r23
    39f6:	8a 95       	dec	r24
    39f8:	d2 f7       	brpl	.-12     	; 0x39ee <layer_on+0xa>
    39fa:	80 91 a8 01 	lds	r24, 0x01A8
    39fe:	90 91 a9 01 	lds	r25, 0x01A9
    3a02:	a0 91 aa 01 	lds	r26, 0x01AA
    3a06:	b0 91 ab 01 	lds	r27, 0x01AB
    3a0a:	84 2b       	or	r24, r20
    3a0c:	95 2b       	or	r25, r21
    3a0e:	a6 2b       	or	r26, r22
    3a10:	b7 2b       	or	r27, r23

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    3a12:	80 93 a8 01 	sts	0x01A8, r24
    3a16:	90 93 a9 01 	sts	0x01A9, r25
    3a1a:	a0 93 aa 01 	sts	0x01AA, r26
    3a1e:	b0 93 ab 01 	sts	0x01AB, r27
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    3a22:	0c 94 73 18 	jmp	0x30e6	; 0x30e6 <clear_keyboard_but_mods>

00003a26 <layer_off>:
    layer_state_set(layer_state | (1UL<<layer));
}

void layer_off(uint8_t layer)
{
    layer_state_set(layer_state & ~(1UL<<layer));
    3a26:	41 e0       	ldi	r20, 0x01	; 1
    3a28:	50 e0       	ldi	r21, 0x00	; 0
    3a2a:	60 e0       	ldi	r22, 0x00	; 0
    3a2c:	70 e0       	ldi	r23, 0x00	; 0
    3a2e:	04 c0       	rjmp	.+8      	; 0x3a38 <layer_off+0x12>
    3a30:	44 0f       	add	r20, r20
    3a32:	55 1f       	adc	r21, r21
    3a34:	66 1f       	adc	r22, r22
    3a36:	77 1f       	adc	r23, r23
    3a38:	8a 95       	dec	r24
    3a3a:	d2 f7       	brpl	.-12     	; 0x3a30 <layer_off+0xa>
    3a3c:	40 95       	com	r20
    3a3e:	50 95       	com	r21
    3a40:	60 95       	com	r22
    3a42:	70 95       	com	r23
    3a44:	80 91 a8 01 	lds	r24, 0x01A8
    3a48:	90 91 a9 01 	lds	r25, 0x01A9
    3a4c:	a0 91 aa 01 	lds	r26, 0x01AA
    3a50:	b0 91 ab 01 	lds	r27, 0x01AB
    3a54:	84 23       	and	r24, r20
    3a56:	95 23       	and	r25, r21
    3a58:	a6 23       	and	r26, r22
    3a5a:	b7 23       	and	r27, r23

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    3a5c:	80 93 a8 01 	sts	0x01A8, r24
    3a60:	90 93 a9 01 	sts	0x01A9, r25
    3a64:	a0 93 aa 01 	sts	0x01AA, r26
    3a68:	b0 93 ab 01 	sts	0x01AB, r27
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    3a6c:	0c 94 73 18 	jmp	0x30e6	; 0x30e6 <clear_keyboard_but_mods>

00003a70 <layer_invert>:
    layer_state_set(layer_state & ~(1UL<<layer));
}

void layer_invert(uint8_t layer)
{
    layer_state_set(layer_state ^ (1UL<<layer));
    3a70:	41 e0       	ldi	r20, 0x01	; 1
    3a72:	50 e0       	ldi	r21, 0x00	; 0
    3a74:	60 e0       	ldi	r22, 0x00	; 0
    3a76:	70 e0       	ldi	r23, 0x00	; 0
    3a78:	04 c0       	rjmp	.+8      	; 0x3a82 <layer_invert+0x12>
    3a7a:	44 0f       	add	r20, r20
    3a7c:	55 1f       	adc	r21, r21
    3a7e:	66 1f       	adc	r22, r22
    3a80:	77 1f       	adc	r23, r23
    3a82:	8a 95       	dec	r24
    3a84:	d2 f7       	brpl	.-12     	; 0x3a7a <layer_invert+0xa>
    3a86:	80 91 a8 01 	lds	r24, 0x01A8
    3a8a:	90 91 a9 01 	lds	r25, 0x01A9
    3a8e:	a0 91 aa 01 	lds	r26, 0x01AA
    3a92:	b0 91 ab 01 	lds	r27, 0x01AB
    3a96:	84 27       	eor	r24, r20
    3a98:	95 27       	eor	r25, r21
    3a9a:	a6 27       	eor	r26, r22
    3a9c:	b7 27       	eor	r27, r23

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    3a9e:	80 93 a8 01 	sts	0x01A8, r24
    3aa2:	90 93 a9 01 	sts	0x01A9, r25
    3aa6:	a0 93 aa 01 	sts	0x01AA, r26
    3aaa:	b0 93 ab 01 	sts	0x01AB, r27
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    3aae:	0c 94 73 18 	jmp	0x30e6	; 0x30e6 <clear_keyboard_but_mods>

00003ab2 <layer_or>:
{
    layer_state_set(layer_state ^ (1UL<<layer));
}

void layer_or(uint32_t state)
{
    3ab2:	0f 93       	push	r16
    3ab4:	1f 93       	push	r17
    layer_state_set(layer_state | state);
    3ab6:	00 91 a8 01 	lds	r16, 0x01A8
    3aba:	10 91 a9 01 	lds	r17, 0x01A9
    3abe:	20 91 aa 01 	lds	r18, 0x01AA
    3ac2:	30 91 ab 01 	lds	r19, 0x01AB
    3ac6:	06 2b       	or	r16, r22
    3ac8:	17 2b       	or	r17, r23
    3aca:	28 2b       	or	r18, r24
    3acc:	39 2b       	or	r19, r25

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    3ace:	00 93 a8 01 	sts	0x01A8, r16
    3ad2:	10 93 a9 01 	sts	0x01A9, r17
    3ad6:	20 93 aa 01 	sts	0x01AA, r18
    3ada:	30 93 ab 01 	sts	0x01AB, r19
}

void layer_or(uint32_t state)
{
    layer_state_set(layer_state | state);
}
    3ade:	1f 91       	pop	r17
    3ae0:	0f 91       	pop	r16
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    3ae2:	0c 94 73 18 	jmp	0x30e6	; 0x30e6 <clear_keyboard_but_mods>

00003ae6 <layer_and>:
void layer_or(uint32_t state)
{
    layer_state_set(layer_state | state);
}
void layer_and(uint32_t state)
{
    3ae6:	0f 93       	push	r16
    3ae8:	1f 93       	push	r17
    layer_state_set(layer_state & state);
    3aea:	00 91 a8 01 	lds	r16, 0x01A8
    3aee:	10 91 a9 01 	lds	r17, 0x01A9
    3af2:	20 91 aa 01 	lds	r18, 0x01AA
    3af6:	30 91 ab 01 	lds	r19, 0x01AB
    3afa:	06 23       	and	r16, r22
    3afc:	17 23       	and	r17, r23
    3afe:	28 23       	and	r18, r24
    3b00:	39 23       	and	r19, r25

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    3b02:	00 93 a8 01 	sts	0x01A8, r16
    3b06:	10 93 a9 01 	sts	0x01A9, r17
    3b0a:	20 93 aa 01 	sts	0x01AA, r18
    3b0e:	30 93 ab 01 	sts	0x01AB, r19
    layer_state_set(layer_state | state);
}
void layer_and(uint32_t state)
{
    layer_state_set(layer_state & state);
}
    3b12:	1f 91       	pop	r17
    3b14:	0f 91       	pop	r16
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    3b16:	0c 94 73 18 	jmp	0x30e6	; 0x30e6 <clear_keyboard_but_mods>

00003b1a <layer_xor>:
void layer_and(uint32_t state)
{
    layer_state_set(layer_state & state);
}
void layer_xor(uint32_t state)
{
    3b1a:	0f 93       	push	r16
    3b1c:	1f 93       	push	r17
    layer_state_set(layer_state ^ state);
    3b1e:	00 91 a8 01 	lds	r16, 0x01A8
    3b22:	10 91 a9 01 	lds	r17, 0x01A9
    3b26:	20 91 aa 01 	lds	r18, 0x01AA
    3b2a:	30 91 ab 01 	lds	r19, 0x01AB
    3b2e:	06 27       	eor	r16, r22
    3b30:	17 27       	eor	r17, r23
    3b32:	28 27       	eor	r18, r24
    3b34:	39 27       	eor	r19, r25

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    3b36:	00 93 a8 01 	sts	0x01A8, r16
    3b3a:	10 93 a9 01 	sts	0x01A9, r17
    3b3e:	20 93 aa 01 	sts	0x01AA, r18
    3b42:	30 93 ab 01 	sts	0x01AB, r19
    layer_state_set(layer_state & state);
}
void layer_xor(uint32_t state)
{
    layer_state_set(layer_state ^ state);
}
    3b46:	1f 91       	pop	r17
    3b48:	0f 91       	pop	r16
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    3b4a:	0c 94 73 18 	jmp	0x30e6	; 0x30e6 <clear_keyboard_but_mods>

00003b4e <layer_debug>:
{
    layer_state_set(layer_state ^ state);
}

void layer_debug(void)
{
    3b4e:	08 95       	ret

00003b50 <layer_switch_get_action>:
#endif



action_t layer_switch_get_action(keypos_t key)
{
    3b50:	cf 92       	push	r12
    3b52:	df 92       	push	r13
    3b54:	ef 92       	push	r14
    3b56:	ff 92       	push	r15
    3b58:	0f 93       	push	r16
    3b5a:	1f 93       	push	r17
    3b5c:	cf 93       	push	r28
    3b5e:	df 93       	push	r29
    3b60:	ec 01       	movw	r28, r24
    action_t action;
    action.code = ACTION_TRANSPARENT;

#ifndef NO_ACTION_LAYER
    uint32_t layers = layer_state | default_layer_state;
    3b62:	c0 90 ac 01 	lds	r12, 0x01AC
    3b66:	d0 90 ad 01 	lds	r13, 0x01AD
    3b6a:	e0 90 ae 01 	lds	r14, 0x01AE
    3b6e:	f0 90 af 01 	lds	r15, 0x01AF
    3b72:	80 91 a8 01 	lds	r24, 0x01A8
    3b76:	90 91 a9 01 	lds	r25, 0x01A9
    3b7a:	a0 91 aa 01 	lds	r26, 0x01AA
    3b7e:	b0 91 ab 01 	lds	r27, 0x01AB
    3b82:	c8 2a       	or	r12, r24
    3b84:	d9 2a       	or	r13, r25
    3b86:	ea 2a       	or	r14, r26
    3b88:	fb 2a       	or	r15, r27
    3b8a:	0f e1       	ldi	r16, 0x1F	; 31
    3b8c:	10 e0       	ldi	r17, 0x00	; 0
    /* check top layer first */
    for (int8_t i = 31; i >= 0; i--) {
        if (layers & (1UL<<i)) {
    3b8e:	b7 01       	movw	r22, r14
    3b90:	a6 01       	movw	r20, r12
    3b92:	00 2e       	mov	r0, r16
    3b94:	04 c0       	rjmp	.+8      	; 0x3b9e <layer_switch_get_action+0x4e>
    3b96:	76 95       	lsr	r23
    3b98:	67 95       	ror	r22
    3b9a:	57 95       	ror	r21
    3b9c:	47 95       	ror	r20
    3b9e:	0a 94       	dec	r0
    3ba0:	d2 f7       	brpl	.-12     	; 0x3b96 <layer_switch_get_action+0x46>
    3ba2:	40 ff       	sbrs	r20, 0
    3ba4:	07 c0       	rjmp	.+14     	; 0x3bb4 <layer_switch_get_action+0x64>
            action = action_for_key(i, key);
    3ba6:	be 01       	movw	r22, r28
    3ba8:	80 2f       	mov	r24, r16
    3baa:	0e 94 86 1f 	call	0x3f0c	; 0x3f0c <action_for_key>
            if (action.code != ACTION_TRANSPARENT) {
    3bae:	81 30       	cpi	r24, 0x01	; 1
    3bb0:	91 05       	cpc	r25, r1
    3bb2:	39 f4       	brne	.+14     	; 0x3bc2 <layer_switch_get_action+0x72>
    3bb4:	01 50       	subi	r16, 0x01	; 1
    3bb6:	11 09       	sbc	r17, r1
    3bb8:	50 f7       	brcc	.-44     	; 0x3b8e <layer_switch_get_action+0x3e>
                return action;
            }
        }
    }
    /* fall back to layer 0 */
    action = action_for_key(0, key);
    3bba:	be 01       	movw	r22, r28
    3bbc:	80 e0       	ldi	r24, 0x00	; 0
    3bbe:	0e 94 86 1f 	call	0x3f0c	; 0x3f0c <action_for_key>
    return action;
#else
    action = action_for_key(biton32(default_layer_state), key);
    return action;
#endif
}
    3bc2:	df 91       	pop	r29
    3bc4:	cf 91       	pop	r28
    3bc6:	1f 91       	pop	r17
    3bc8:	0f 91       	pop	r16
    3bca:	ff 90       	pop	r15
    3bcc:	ef 90       	pop	r14
    3bce:	df 90       	pop	r13
    3bd0:	cf 90       	pop	r12
    3bd2:	08 95       	ret

00003bd4 <add_key>:

/* key */
void add_key(uint8_t key)
{
#ifdef NKRO_ENABLE
    if (keyboard_nkro) {
    3bd4:	90 91 0c 01 	lds	r25, 0x010C
    3bd8:	99 23       	and	r25, r25
    3bda:	41 f1       	breq	.+80     	; 0x3c2c <add_key+0x58>
}

#ifdef NKRO_ENABLE
static inline void add_key_bit(uint8_t code)
{
    if ((code>>3) < KEYBOARD_REPORT_BITS) {
    3bdc:	98 2f       	mov	r25, r24
    3bde:	96 95       	lsr	r25
    3be0:	96 95       	lsr	r25
    3be2:	96 95       	lsr	r25
    3be4:	9f 30       	cpi	r25, 0x0F	; 15
    3be6:	88 f4       	brcc	.+34     	; 0x3c0a <add_key+0x36>
        keyboard_report->nkro.bits[code>>3] |= 1<<(code&7);
    3be8:	e0 91 0d 01 	lds	r30, 0x010D
    3bec:	f0 91 0e 01 	lds	r31, 0x010E
    3bf0:	e9 0f       	add	r30, r25
    3bf2:	f1 1d       	adc	r31, r1
    3bf4:	87 70       	andi	r24, 0x07	; 7
    3bf6:	21 e0       	ldi	r18, 0x01	; 1
    3bf8:	30 e0       	ldi	r19, 0x00	; 0
    3bfa:	01 c0       	rjmp	.+2      	; 0x3bfe <add_key+0x2a>
    3bfc:	22 0f       	add	r18, r18
    3bfe:	8a 95       	dec	r24
    3c00:	ea f7       	brpl	.-6      	; 0x3bfc <add_key+0x28>
    3c02:	81 81       	ldd	r24, Z+1	; 0x01
    3c04:	82 2b       	or	r24, r18
    3c06:	81 83       	std	Z+1, r24	; 0x01
    3c08:	08 95       	ret
    } else {
        dprintf("add_key_bit: can't add: %02X\n", code);
    3c0a:	90 91 c3 01 	lds	r25, 0x01C3
    3c0e:	90 ff       	sbrs	r25, 0
    3c10:	2d c0       	rjmp	.+90     	; 0x3c6c <add_key+0x98>
    3c12:	1f 92       	push	r1
    3c14:	8f 93       	push	r24
    3c16:	86 e3       	ldi	r24, 0x36	; 54
    3c18:	95 e0       	ldi	r25, 0x05	; 5
    3c1a:	9f 93       	push	r25
    3c1c:	8f 93       	push	r24
    3c1e:	0e 94 1e 09 	call	0x123c	; 0x123c <__xprintf>
    3c22:	0f 90       	pop	r0
    3c24:	0f 90       	pop	r0
    3c26:	0f 90       	pop	r0
    3c28:	0f 90       	pop	r0
    3c2a:	08 95       	ret
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    3c2c:	40 91 0d 01 	lds	r20, 0x010D
    3c30:	50 91 0e 01 	lds	r21, 0x010E
    3c34:	20 e0       	ldi	r18, 0x00	; 0
    3c36:	30 e0       	ldi	r19, 0x00	; 0
    3c38:	9f ef       	ldi	r25, 0xFF	; 255
    3c3a:	fa 01       	movw	r30, r20
    3c3c:	e2 0f       	add	r30, r18
    3c3e:	f3 1f       	adc	r31, r19
    3c40:	62 81       	ldd	r22, Z+2	; 0x02
    3c42:	68 17       	cp	r22, r24
    3c44:	99 f0       	breq	.+38     	; 0x3c6c <add_key+0x98>
            break;
        }
        if (empty == -1 && keyboard_report->keys[i] == 0) {
    3c46:	9f 3f       	cpi	r25, 0xFF	; 255
    3c48:	19 f4       	brne	.+6      	; 0x3c50 <add_key+0x7c>
    3c4a:	61 11       	cpse	r22, r1
    3c4c:	01 c0       	rjmp	.+2      	; 0x3c50 <add_key+0x7c>
    3c4e:	92 2f       	mov	r25, r18
    3c50:	2f 5f       	subi	r18, 0xFF	; 255
    3c52:	3f 4f       	sbci	r19, 0xFF	; 255
    cb_tail = RO_INC(cb_tail);
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
    3c54:	2e 30       	cpi	r18, 0x0E	; 14
    3c56:	31 05       	cpc	r19, r1
    3c58:	81 f7       	brne	.-32     	; 0x3c3a <add_key+0x66>
        if (empty == -1 && keyboard_report->keys[i] == 0) {
            empty = i;
        }
    }
    if (i == KEYBOARD_REPORT_KEYS) {
        if (empty != -1) {
    3c5a:	9f 3f       	cpi	r25, 0xFF	; 255
    3c5c:	39 f0       	breq	.+14     	; 0x3c6c <add_key+0x98>
            keyboard_report->keys[empty] = code;
    3c5e:	fa 01       	movw	r30, r20
    3c60:	e9 0f       	add	r30, r25
    3c62:	f1 1d       	adc	r31, r1
    3c64:	97 fd       	sbrc	r25, 7
    3c66:	fa 95       	dec	r31
    3c68:	82 83       	std	Z+2, r24	; 0x02
    3c6a:	08 95       	ret
    3c6c:	08 95       	ret

00003c6e <del_key>:
}

void del_key(uint8_t key)
{
#ifdef NKRO_ENABLE
    if (keyboard_nkro) {
    3c6e:	90 91 0c 01 	lds	r25, 0x010C
    3c72:	99 23       	and	r25, r25
    3c74:	49 f1       	breq	.+82     	; 0x3cc8 <del_key+0x5a>
    }
}

static inline void del_key_bit(uint8_t code)
{
    if ((code>>3) < KEYBOARD_REPORT_BITS) {
    3c76:	98 2f       	mov	r25, r24
    3c78:	96 95       	lsr	r25
    3c7a:	96 95       	lsr	r25
    3c7c:	96 95       	lsr	r25
    3c7e:	9f 30       	cpi	r25, 0x0F	; 15
    3c80:	90 f4       	brcc	.+36     	; 0x3ca6 <del_key+0x38>
        keyboard_report->nkro.bits[code>>3] &= ~(1<<(code&7));
    3c82:	e0 91 0d 01 	lds	r30, 0x010D
    3c86:	f0 91 0e 01 	lds	r31, 0x010E
    3c8a:	e9 0f       	add	r30, r25
    3c8c:	f1 1d       	adc	r31, r1
    3c8e:	87 70       	andi	r24, 0x07	; 7
    3c90:	21 e0       	ldi	r18, 0x01	; 1
    3c92:	30 e0       	ldi	r19, 0x00	; 0
    3c94:	01 c0       	rjmp	.+2      	; 0x3c98 <del_key+0x2a>
    3c96:	22 0f       	add	r18, r18
    3c98:	8a 95       	dec	r24
    3c9a:	ea f7       	brpl	.-6      	; 0x3c96 <del_key+0x28>
    3c9c:	20 95       	com	r18
    3c9e:	81 81       	ldd	r24, Z+1	; 0x01
    3ca0:	28 23       	and	r18, r24
    3ca2:	21 83       	std	Z+1, r18	; 0x01
    3ca4:	08 95       	ret
    } else {
        dprintf("del_key_bit: can't del: %02X\n", code);
    3ca6:	90 91 c3 01 	lds	r25, 0x01C3
    3caa:	90 ff       	sbrs	r25, 0
    3cac:	1f c0       	rjmp	.+62     	; 0x3cec <del_key+0x7e>
    3cae:	1f 92       	push	r1
    3cb0:	8f 93       	push	r24
    3cb2:	88 e1       	ldi	r24, 0x18	; 24
    3cb4:	95 e0       	ldi	r25, 0x05	; 5
    3cb6:	9f 93       	push	r25
    3cb8:	8f 93       	push	r24
    3cba:	0e 94 1e 09 	call	0x123c	; 0x123c <__xprintf>
    3cbe:	0f 90       	pop	r0
    3cc0:	0f 90       	pop	r0
    3cc2:	0f 90       	pop	r0
    3cc4:	0f 90       	pop	r0
    3cc6:	08 95       	ret
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    3cc8:	40 91 0d 01 	lds	r20, 0x010D
    3ccc:	50 91 0e 01 	lds	r21, 0x010E
    3cd0:	20 e0       	ldi	r18, 0x00	; 0
    3cd2:	30 e0       	ldi	r19, 0x00	; 0
    3cd4:	fa 01       	movw	r30, r20
    3cd6:	e2 0f       	add	r30, r18
    3cd8:	f3 1f       	adc	r31, r19
    3cda:	92 81       	ldd	r25, Z+2	; 0x02
    3cdc:	98 13       	cpse	r25, r24
    3cde:	01 c0       	rjmp	.+2      	; 0x3ce2 <del_key+0x74>
            keyboard_report->keys[i] = 0;
    3ce0:	12 82       	std	Z+2, r1	; 0x02
    3ce2:	2f 5f       	subi	r18, 0xFF	; 255
    3ce4:	3f 4f       	sbci	r19, 0xFF	; 255
            }
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
    3ce6:	2e 30       	cpi	r18, 0x0E	; 14
    3ce8:	31 05       	cpc	r19, r1
    3cea:	a1 f7       	brne	.-24     	; 0x3cd4 <del_key+0x66>
    3cec:	08 95       	ret

00003cee <clear_keys>:
#endif
    del_key_byte(key);
}

void clear_keys(void)
{
    3cee:	81 e0       	ldi	r24, 0x01	; 1
    3cf0:	90 e0       	ldi	r25, 0x00	; 0
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        keyboard_report->raw[i] = 0;
    3cf2:	e0 91 0d 01 	lds	r30, 0x010D
    3cf6:	f0 91 0e 01 	lds	r31, 0x010E
    3cfa:	e8 0f       	add	r30, r24
    3cfc:	f9 1f       	adc	r31, r25
    3cfe:	10 82       	st	Z, r1
    3d00:	01 96       	adiw	r24, 0x01	; 1
}

void clear_keys(void)
{
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    3d02:	80 31       	cpi	r24, 0x10	; 16
    3d04:	91 05       	cpc	r25, r1
    3d06:	a9 f7       	brne	.-22     	; 0x3cf2 <clear_keys+0x4>
        keyboard_report->raw[i] = 0;
    }
}
    3d08:	08 95       	ret

00003d0a <add_mods>:


/* modifier */
uint8_t get_mods(void) { return real_mods; }
void add_mods(uint8_t mods) { real_mods |= mods; }
    3d0a:	90 91 c2 01 	lds	r25, 0x01C2
    3d0e:	98 2b       	or	r25, r24
    3d10:	90 93 c2 01 	sts	0x01C2, r25
    3d14:	08 95       	ret

00003d16 <del_mods>:
void del_mods(uint8_t mods) { real_mods &= ~mods; }
    3d16:	80 95       	com	r24
    3d18:	90 91 c2 01 	lds	r25, 0x01C2
    3d1c:	98 23       	and	r25, r24
    3d1e:	90 93 c2 01 	sts	0x01C2, r25
    3d22:	08 95       	ret

00003d24 <clear_mods>:
void set_mods(uint8_t mods) { real_mods = mods; }
void clear_mods(void) { real_mods = 0; }
    3d24:	10 92 c2 01 	sts	0x01C2, r1
    3d28:	08 95       	ret

00003d2a <add_weak_mods>:

/* weak modifier */
uint8_t get_weak_mods(void) { return weak_mods; }
void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
    3d2a:	90 91 c1 01 	lds	r25, 0x01C1
    3d2e:	98 2b       	or	r25, r24
    3d30:	90 93 c1 01 	sts	0x01C1, r25
    3d34:	08 95       	ret

00003d36 <del_weak_mods>:
void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
    3d36:	80 95       	com	r24
    3d38:	90 91 c1 01 	lds	r25, 0x01C1
    3d3c:	98 23       	and	r25, r24
    3d3e:	90 93 c1 01 	sts	0x01C1, r25
    3d42:	08 95       	ret

00003d44 <clear_weak_mods>:
void set_weak_mods(uint8_t mods) { weak_mods = mods; }
void clear_weak_mods(void) { weak_mods = 0; }
    3d44:	10 92 c1 01 	sts	0x01C1, r1
    3d48:	08 95       	ret

00003d4a <set_oneshot_mods>:

/* Oneshot modifier */
#ifndef NO_ACTION_ONESHOT
void set_oneshot_mods(uint8_t mods)
{
    oneshot_mods = mods;
    3d4a:	80 93 b0 01 	sts	0x01B0, r24
    3d4e:	08 95       	ret

00003d50 <clear_oneshot_mods>:
    oneshot_time = timer_read();
#endif
}
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    3d50:	10 92 b0 01 	sts	0x01B0, r1
    3d54:	08 95       	ret

00003d56 <has_anykey>:
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    3d56:	40 91 0d 01 	lds	r20, 0x010D
    3d5a:	50 91 0e 01 	lds	r21, 0x010E
    3d5e:	20 e0       	ldi	r18, 0x00	; 0
    3d60:	30 e0       	ldi	r19, 0x00	; 0
/*
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    3d62:	80 e0       	ldi	r24, 0x00	; 0
    3d64:	fa 01       	movw	r30, r20
    3d66:	e2 0f       	add	r30, r18
    3d68:	f3 1f       	adc	r31, r19
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    3d6a:	91 81       	ldd	r25, Z+1	; 0x01
    3d6c:	91 11       	cpse	r25, r1
            cnt++;
    3d6e:	8f 5f       	subi	r24, 0xFF	; 255
    3d70:	2f 5f       	subi	r18, 0xFF	; 255
    3d72:	3f 4f       	sbci	r19, 0xFF	; 255
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    3d74:	2f 30       	cpi	r18, 0x0F	; 15
    3d76:	31 05       	cpc	r19, r1
    3d78:	a9 f7       	brne	.-22     	; 0x3d64 <has_anykey+0xe>
        if (keyboard_report->raw[i])
            cnt++;
    }
    return cnt;
}
    3d7a:	08 95       	ret

00003d7c <send_keyboard_report>:
#endif
#endif


void send_keyboard_report(void) {
    keyboard_report->mods  = real_mods;
    3d7c:	e0 91 0d 01 	lds	r30, 0x010D
    3d80:	f0 91 0e 01 	lds	r31, 0x010E
    3d84:	80 91 c2 01 	lds	r24, 0x01C2
    3d88:	80 83       	st	Z, r24
    keyboard_report->mods |= weak_mods;
    3d8a:	e0 91 0d 01 	lds	r30, 0x010D
    3d8e:	f0 91 0e 01 	lds	r31, 0x010E
    3d92:	80 81       	ld	r24, Z
    3d94:	90 91 c1 01 	lds	r25, 0x01C1
    3d98:	89 2b       	or	r24, r25
    3d9a:	80 83       	st	Z, r24
#ifndef NO_ACTION_ONESHOT
    if (oneshot_mods) {
    3d9c:	90 91 b0 01 	lds	r25, 0x01B0
    3da0:	99 23       	and	r25, r25
    3da2:	61 f0       	breq	.+24     	; 0x3dbc <send_keyboard_report+0x40>
        if (TIMER_DIFF_16(timer_read(), oneshot_time) >= ONESHOT_TIMEOUT) {
            dprintf("Oneshot: timeout\n");
            clear_oneshot_mods();
        }
#endif
        keyboard_report->mods |= oneshot_mods;
    3da4:	e0 91 0d 01 	lds	r30, 0x010D
    3da8:	f0 91 0e 01 	lds	r31, 0x010E
    3dac:	80 81       	ld	r24, Z
    3dae:	89 2b       	or	r24, r25
    3db0:	80 83       	st	Z, r24
        if (has_anykey()) {
    3db2:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <has_anykey>
    3db6:	81 11       	cpse	r24, r1
    oneshot_time = timer_read();
#endif
}
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    3db8:	10 92 b0 01 	sts	0x01B0, r1
        if (has_anykey()) {
            clear_oneshot_mods();
        }
    }
#endif
    host_keyboard_send(keyboard_report);
    3dbc:	80 91 0d 01 	lds	r24, 0x010D
    3dc0:	90 91 0e 01 	lds	r25, 0x010E
    3dc4:	0c 94 b7 12 	jmp	0x256e	; 0x256e <host_keyboard_send>

00003dc8 <keycode_to_action>:

/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    action_t action;
    switch (keycode) {
    3dc8:	8b 3b       	cpi	r24, 0xBB	; 187
    3dca:	60 f4       	brcc	.+24     	; 0x3de4 <keycode_to_action+0x1c>
    3dcc:	88 3a       	cpi	r24, 0xA8	; 168
    3dce:	00 f5       	brcc	.+64     	; 0x3e10 <keycode_to_action+0x48>
    3dd0:	85 3a       	cpi	r24, 0xA5	; 165
    3dd2:	a8 f4       	brcc	.+42     	; 0x3dfe <keycode_to_action+0x36>
    3dd4:	84 30       	cpi	r24, 0x04	; 4
    3dd6:	88 f4       	brcc	.+34     	; 0x3dfa <keycode_to_action+0x32>
    3dd8:	81 30       	cpi	r24, 0x01	; 1
    3dda:	09 f0       	breq	.+2      	; 0x3dde <keycode_to_action+0x16>
    3ddc:	55 c0       	rjmp	.+170    	; 0x3e88 <keycode_to_action+0xc0>
            break;
        case KC_MS_UP ... KC_MS_ACCEL2:
            action.code = ACTION_MOUSEKEY(keycode);
            break;
        case KC_TRNS:
            action.code = ACTION_TRANSPARENT;
    3dde:	81 e0       	ldi	r24, 0x01	; 1
    3de0:	90 e0       	ldi	r25, 0x00	; 0
    3de2:	08 95       	ret

/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    action_t action;
    switch (keycode) {
    3de4:	80 3e       	cpi	r24, 0xE0	; 224
    3de6:	08 f4       	brcc	.+2      	; 0x3dea <keycode_to_action+0x22>
    3de8:	4f c0       	rjmp	.+158    	; 0x3e88 <keycode_to_action+0xc0>
    3dea:	88 3e       	cpi	r24, 0xE8	; 232
    3dec:	30 f0       	brcs	.+12     	; 0x3dfa <keycode_to_action+0x32>
    3dee:	80 3f       	cpi	r24, 0xF0	; 240
    3df0:	08 f4       	brcc	.+2      	; 0x3df4 <keycode_to_action+0x2c>
    3df2:	4a c0       	rjmp	.+148    	; 0x3e88 <keycode_to_action+0xc0>
            break;
        case KC_AUDIO_MUTE ... KC_WWW_FAVORITES:
            action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
            break;
        case KC_MS_UP ... KC_MS_ACCEL2:
            action.code = ACTION_MOUSEKEY(keycode);
    3df4:	90 e0       	ldi	r25, 0x00	; 0
    3df6:	90 65       	ori	r25, 0x50	; 80
            break;
    3df8:	08 95       	ret
{
    action_t action;
    switch (keycode) {
        case KC_A ... KC_EXSEL:
        case KC_LCTRL ... KC_RGUI:
            action.code = ACTION_KEY(keycode);
    3dfa:	90 e0       	ldi	r25, 0x00	; 0
            break;
    3dfc:	08 95       	ret
        case KC_SYSTEM_POWER ... KC_SYSTEM_WAKE:
            action.code = ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
    3dfe:	85 3a       	cpi	r24, 0xA5	; 165
    3e00:	09 f4       	brne	.+2      	; 0x3e04 <keycode_to_action+0x3c>
    3e02:	45 c0       	rjmp	.+138    	; 0x3e8e <keycode_to_action+0xc6>
    3e04:	86 3a       	cpi	r24, 0xA6	; 166
    3e06:	09 f0       	breq	.+2      	; 0x3e0a <keycode_to_action+0x42>
    3e08:	45 c0       	rjmp	.+138    	; 0x3e94 <keycode_to_action+0xcc>
    3e0a:	82 e8       	ldi	r24, 0x82	; 130
    3e0c:	90 e4       	ldi	r25, 0x40	; 64
    3e0e:	08 95       	ret
            break;
        case KC_AUDIO_MUTE ... KC_WWW_FAVORITES:
            action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
    3e10:	88 3a       	cpi	r24, 0xA8	; 168
    3e12:	09 f4       	brne	.+2      	; 0x3e16 <keycode_to_action+0x4e>
    3e14:	42 c0       	rjmp	.+132    	; 0x3e9a <keycode_to_action+0xd2>
    3e16:	89 3a       	cpi	r24, 0xA9	; 169
    3e18:	09 f4       	brne	.+2      	; 0x3e1c <keycode_to_action+0x54>
    3e1a:	42 c0       	rjmp	.+132    	; 0x3ea0 <keycode_to_action+0xd8>
    3e1c:	8a 3a       	cpi	r24, 0xAA	; 170
    3e1e:	09 f4       	brne	.+2      	; 0x3e22 <keycode_to_action+0x5a>
    3e20:	42 c0       	rjmp	.+132    	; 0x3ea6 <keycode_to_action+0xde>
    3e22:	8b 3a       	cpi	r24, 0xAB	; 171
    3e24:	09 f4       	brne	.+2      	; 0x3e28 <keycode_to_action+0x60>
    3e26:	42 c0       	rjmp	.+132    	; 0x3eac <keycode_to_action+0xe4>
    3e28:	8c 3a       	cpi	r24, 0xAC	; 172
    3e2a:	09 f4       	brne	.+2      	; 0x3e2e <keycode_to_action+0x66>
    3e2c:	42 c0       	rjmp	.+132    	; 0x3eb2 <keycode_to_action+0xea>
    3e2e:	8d 3a       	cpi	r24, 0xAD	; 173
    3e30:	09 f4       	brne	.+2      	; 0x3e34 <keycode_to_action+0x6c>
    3e32:	42 c0       	rjmp	.+132    	; 0x3eb8 <keycode_to_action+0xf0>
    3e34:	80 3b       	cpi	r24, 0xB0	; 176
    3e36:	09 f4       	brne	.+2      	; 0x3e3a <keycode_to_action+0x72>
    3e38:	42 c0       	rjmp	.+132    	; 0x3ebe <keycode_to_action+0xf6>
    3e3a:	8e 3a       	cpi	r24, 0xAE	; 174
    3e3c:	09 f4       	brne	.+2      	; 0x3e40 <keycode_to_action+0x78>
    3e3e:	42 c0       	rjmp	.+132    	; 0x3ec4 <keycode_to_action+0xfc>
    3e40:	8f 3a       	cpi	r24, 0xAF	; 175
    3e42:	09 f4       	brne	.+2      	; 0x3e46 <keycode_to_action+0x7e>
    3e44:	42 c0       	rjmp	.+132    	; 0x3eca <keycode_to_action+0x102>
    3e46:	81 3b       	cpi	r24, 0xB1	; 177
    3e48:	09 f4       	brne	.+2      	; 0x3e4c <keycode_to_action+0x84>
    3e4a:	42 c0       	rjmp	.+132    	; 0x3ed0 <keycode_to_action+0x108>
    3e4c:	82 3b       	cpi	r24, 0xB2	; 178
    3e4e:	09 f4       	brne	.+2      	; 0x3e52 <keycode_to_action+0x8a>
    3e50:	42 c0       	rjmp	.+132    	; 0x3ed6 <keycode_to_action+0x10e>
    3e52:	83 3b       	cpi	r24, 0xB3	; 179
    3e54:	09 f4       	brne	.+2      	; 0x3e58 <keycode_to_action+0x90>
    3e56:	42 c0       	rjmp	.+132    	; 0x3edc <keycode_to_action+0x114>
    3e58:	84 3b       	cpi	r24, 0xB4	; 180
    3e5a:	09 f4       	brne	.+2      	; 0x3e5e <keycode_to_action+0x96>
    3e5c:	42 c0       	rjmp	.+132    	; 0x3ee2 <keycode_to_action+0x11a>
    3e5e:	85 3b       	cpi	r24, 0xB5	; 181
    3e60:	09 f4       	brne	.+2      	; 0x3e64 <keycode_to_action+0x9c>
    3e62:	42 c0       	rjmp	.+132    	; 0x3ee8 <keycode_to_action+0x120>
    3e64:	86 3b       	cpi	r24, 0xB6	; 182
    3e66:	09 f4       	brne	.+2      	; 0x3e6a <keycode_to_action+0xa2>
    3e68:	42 c0       	rjmp	.+132    	; 0x3eee <keycode_to_action+0x126>
    3e6a:	87 3b       	cpi	r24, 0xB7	; 183
    3e6c:	09 f4       	brne	.+2      	; 0x3e70 <keycode_to_action+0xa8>
    3e6e:	42 c0       	rjmp	.+132    	; 0x3ef4 <keycode_to_action+0x12c>
    3e70:	88 3b       	cpi	r24, 0xB8	; 184
    3e72:	09 f4       	brne	.+2      	; 0x3e76 <keycode_to_action+0xae>
    3e74:	42 c0       	rjmp	.+132    	; 0x3efa <keycode_to_action+0x132>
    3e76:	89 3b       	cpi	r24, 0xB9	; 185
    3e78:	09 f4       	brne	.+2      	; 0x3e7c <keycode_to_action+0xb4>
    3e7a:	42 c0       	rjmp	.+132    	; 0x3f00 <keycode_to_action+0x138>
    3e7c:	8a 3b       	cpi	r24, 0xBA	; 186
    3e7e:	09 f0       	breq	.+2      	; 0x3e82 <keycode_to_action+0xba>
    3e80:	42 c0       	rjmp	.+132    	; 0x3f06 <keycode_to_action+0x13e>
    3e82:	8a e2       	ldi	r24, 0x2A	; 42
    3e84:	96 e4       	ldi	r25, 0x46	; 70
    3e86:	08 95       	ret
            break;
        case KC_TRNS:
            action.code = ACTION_TRANSPARENT;
            break;
        default:
            action.code = ACTION_NO;
    3e88:	80 e0       	ldi	r24, 0x00	; 0
    3e8a:	90 e0       	ldi	r25, 0x00	; 0
    3e8c:	08 95       	ret
        case KC_A ... KC_EXSEL:
        case KC_LCTRL ... KC_RGUI:
            action.code = ACTION_KEY(keycode);
            break;
        case KC_SYSTEM_POWER ... KC_SYSTEM_WAKE:
            action.code = ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
    3e8e:	81 e8       	ldi	r24, 0x81	; 129
    3e90:	90 e4       	ldi	r25, 0x40	; 64
    3e92:	08 95       	ret
    3e94:	83 e8       	ldi	r24, 0x83	; 131
    3e96:	90 e4       	ldi	r25, 0x40	; 64
    3e98:	08 95       	ret
            break;
        case KC_AUDIO_MUTE ... KC_WWW_FAVORITES:
            action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
    3e9a:	82 ee       	ldi	r24, 0xE2	; 226
    3e9c:	94 e4       	ldi	r25, 0x44	; 68
    3e9e:	08 95       	ret
    3ea0:	89 ee       	ldi	r24, 0xE9	; 233
    3ea2:	94 e4       	ldi	r25, 0x44	; 68
    3ea4:	08 95       	ret
    3ea6:	8a ee       	ldi	r24, 0xEA	; 234
    3ea8:	94 e4       	ldi	r25, 0x44	; 68
    3eaa:	08 95       	ret
    3eac:	85 eb       	ldi	r24, 0xB5	; 181
    3eae:	94 e4       	ldi	r25, 0x44	; 68
    3eb0:	08 95       	ret
    3eb2:	86 eb       	ldi	r24, 0xB6	; 182
    3eb4:	94 e4       	ldi	r25, 0x44	; 68
    3eb6:	08 95       	ret
    3eb8:	87 eb       	ldi	r24, 0xB7	; 183
    3eba:	94 e4       	ldi	r25, 0x44	; 68
    3ebc:	08 95       	ret
    3ebe:	8c ec       	ldi	r24, 0xCC	; 204
    3ec0:	94 e4       	ldi	r25, 0x44	; 68
    3ec2:	08 95       	ret
    3ec4:	8d ec       	ldi	r24, 0xCD	; 205
    3ec6:	94 e4       	ldi	r25, 0x44	; 68
    3ec8:	08 95       	ret
    3eca:	83 e8       	ldi	r24, 0x83	; 131
    3ecc:	95 e4       	ldi	r25, 0x45	; 69
    3ece:	08 95       	ret
    3ed0:	8a e8       	ldi	r24, 0x8A	; 138
    3ed2:	95 e4       	ldi	r25, 0x45	; 69
    3ed4:	08 95       	ret
    3ed6:	82 e9       	ldi	r24, 0x92	; 146
    3ed8:	95 e4       	ldi	r25, 0x45	; 69
    3eda:	08 95       	ret
    3edc:	84 e9       	ldi	r24, 0x94	; 148
    3ede:	95 e4       	ldi	r25, 0x45	; 69
    3ee0:	08 95       	ret
    3ee2:	81 e2       	ldi	r24, 0x21	; 33
    3ee4:	96 e4       	ldi	r25, 0x46	; 70
    3ee6:	08 95       	ret
    3ee8:	83 e2       	ldi	r24, 0x23	; 35
    3eea:	96 e4       	ldi	r25, 0x46	; 70
    3eec:	08 95       	ret
    3eee:	84 e2       	ldi	r24, 0x24	; 36
    3ef0:	96 e4       	ldi	r25, 0x46	; 70
    3ef2:	08 95       	ret
    3ef4:	85 e2       	ldi	r24, 0x25	; 37
    3ef6:	96 e4       	ldi	r25, 0x46	; 70
    3ef8:	08 95       	ret
    3efa:	86 e2       	ldi	r24, 0x26	; 38
    3efc:	96 e4       	ldi	r25, 0x46	; 70
    3efe:	08 95       	ret
    3f00:	87 e2       	ldi	r24, 0x27	; 39
    3f02:	96 e4       	ldi	r25, 0x46	; 70
    3f04:	08 95       	ret
    3f06:	80 e0       	ldi	r24, 0x00	; 0
    3f08:	94 e4       	ldi	r25, 0x44	; 68
        default:
            action.code = ACTION_NO;
            break;
    }
    return action;
}
    3f0a:	08 95       	ret

00003f0c <action_for_key>:

/* converts key to action */
__attribute__ ((weak))
action_t action_for_key(uint8_t layer, keypos_t key)
{
    uint8_t keycode = keymap_key_to_keycode(layer, key);
    3f0c:	0e 94 29 09 	call	0x1252	; 0x1252 <keymap_key_to_keycode>
    switch (keycode) {
    3f10:	80 3e       	cpi	r24, 0xE0	; 224
    3f12:	a8 f4       	brcc	.+42     	; 0x3f3e <action_for_key+0x32>
    3f14:	80 3c       	cpi	r24, 0xC0	; 192
    3f16:	00 f5       	brcc	.+64     	; 0x3f58 <action_for_key+0x4c>
    3f18:	81 33       	cpi	r24, 0x31	; 49
    3f1a:	09 f4       	brne	.+2      	; 0x3f1e <action_for_key+0x12>
    3f1c:	5c c0       	rjmp	.+184    	; 0x3fd6 <action_for_key+0xca>
    3f1e:	38 f4       	brcc	.+14     	; 0x3f2e <action_for_key+0x22>
    3f20:	89 32       	cpi	r24, 0x29	; 41
    3f22:	09 f4       	brne	.+2      	; 0x3f26 <action_for_key+0x1a>
    3f24:	52 c0       	rjmp	.+164    	; 0x3fca <action_for_key+0xbe>
    3f26:	8a 32       	cpi	r24, 0x2A	; 42
    3f28:	09 f4       	brne	.+2      	; 0x3f2c <action_for_key+0x20>
    3f2a:	5b c0       	rjmp	.+182    	; 0x3fe2 <action_for_key+0xd6>
    3f2c:	5f c0       	rjmp	.+190    	; 0x3fec <action_for_key+0xe0>
    3f2e:	89 33       	cpi	r24, 0x39	; 57
    3f30:	b1 f0       	breq	.+44     	; 0x3f5e <action_for_key+0x52>
    3f32:	82 38       	cpi	r24, 0x82	; 130
    3f34:	a1 f0       	breq	.+40     	; 0x3f5e <action_for_key+0x52>
    3f36:	85 33       	cpi	r24, 0x35	; 53
    3f38:	09 f4       	brne	.+2      	; 0x3f3c <action_for_key+0x30>
    3f3a:	41 c0       	rjmp	.+130    	; 0x3fbe <action_for_key+0xb2>
    3f3c:	57 c0       	rjmp	.+174    	; 0x3fec <action_for_key+0xe0>
    3f3e:	83 3e       	cpi	r24, 0xE3	; 227
    3f40:	41 f1       	breq	.+80     	; 0x3f92 <action_for_key+0x86>
    3f42:	28 f4       	brcc	.+10     	; 0x3f4e <action_for_key+0x42>
    3f44:	80 3e       	cpi	r24, 0xE0	; 224
    3f46:	99 f0       	breq	.+38     	; 0x3f6e <action_for_key+0x62>
    3f48:	82 3e       	cpi	r24, 0xE2	; 226
    3f4a:	b9 f0       	breq	.+46     	; 0x3f7a <action_for_key+0x6e>
    3f4c:	4f c0       	rjmp	.+158    	; 0x3fec <action_for_key+0xe0>
    3f4e:	86 3e       	cpi	r24, 0xE6	; 230
    3f50:	31 f1       	breq	.+76     	; 0x3f9e <action_for_key+0x92>
    3f52:	87 3e       	cpi	r24, 0xE7	; 231
    3f54:	71 f1       	breq	.+92     	; 0x3fb2 <action_for_key+0xa6>
    3f56:	4a c0       	rjmp	.+148    	; 0x3fec <action_for_key+0xe0>
        case KC_FN0 ... KC_FN31:
            return keymap_fn_to_action(keycode);
    3f58:	0e 94 3a 09 	call	0x1274	; 0x1274 <keymap_fn_to_action>
    3f5c:	08 95       	ret
#ifdef BOOTMAGIC_ENABLE
        case KC_CAPSLOCK:
        case KC_LOCKING_CAPS:
            if (keymap_config.swap_control_capslock || keymap_config.capslock_to_control) {
    3f5e:	90 91 d8 01 	lds	r25, 0x01D8
    3f62:	90 fd       	sbrc	r25, 0
    3f64:	02 c0       	rjmp	.+4      	; 0x3f6a <action_for_key+0x5e>
    3f66:	91 ff       	sbrs	r25, 1
    3f68:	41 c0       	rjmp	.+130    	; 0x3fec <action_for_key+0xe0>
                return keycode_to_action(KC_LCTL);
    3f6a:	80 ee       	ldi	r24, 0xE0	; 224
    3f6c:	3f c0       	rjmp	.+126    	; 0x3fec <action_for_key+0xe0>
            }
            return keycode_to_action(keycode);
        case KC_LCTL:
            if (keymap_config.swap_control_capslock) {
    3f6e:	80 91 d8 01 	lds	r24, 0x01D8
    3f72:	80 ff       	sbrs	r24, 0
    3f74:	fa cf       	rjmp	.-12     	; 0x3f6a <action_for_key+0x5e>
                return keycode_to_action(KC_CAPSLOCK);
    3f76:	89 e3       	ldi	r24, 0x39	; 57
    3f78:	39 c0       	rjmp	.+114    	; 0x3fec <action_for_key+0xe0>
            }
            return keycode_to_action(KC_LCTL);
        case KC_LALT:
            if (keymap_config.swap_lalt_lgui) {
    3f7a:	80 91 d8 01 	lds	r24, 0x01D8
    3f7e:	82 ff       	sbrs	r24, 2
    3f80:	0c c0       	rjmp	.+24     	; 0x3f9a <action_for_key+0x8e>
                if (keymap_config.no_gui) {
    3f82:	80 91 d8 01 	lds	r24, 0x01D8
    3f86:	84 ff       	sbrs	r24, 4
    3f88:	02 c0       	rjmp	.+4      	; 0x3f8e <action_for_key+0x82>
                    return keycode_to_action(ACTION_NO);
    3f8a:	80 e0       	ldi	r24, 0x00	; 0
    3f8c:	2f c0       	rjmp	.+94     	; 0x3fec <action_for_key+0xe0>
                }
                return keycode_to_action(KC_LGUI);
    3f8e:	83 ee       	ldi	r24, 0xE3	; 227
    3f90:	2d c0       	rjmp	.+90     	; 0x3fec <action_for_key+0xe0>
            }
            return keycode_to_action(KC_LALT);
        case KC_LGUI:
            if (keymap_config.swap_lalt_lgui) {
    3f92:	80 91 d8 01 	lds	r24, 0x01D8
    3f96:	82 ff       	sbrs	r24, 2
    3f98:	f4 cf       	rjmp	.-24     	; 0x3f82 <action_for_key+0x76>
                if (keymap_config.no_gui) {
                    return keycode_to_action(ACTION_NO);
                }
                return keycode_to_action(KC_LGUI);
            }
            return keycode_to_action(KC_LALT);
    3f9a:	82 ee       	ldi	r24, 0xE2	; 226
    3f9c:	27 c0       	rjmp	.+78     	; 0x3fec <action_for_key+0xe0>
            if (keymap_config.no_gui) {
                return keycode_to_action(ACTION_NO);
            }
            return keycode_to_action(KC_LGUI);
        case KC_RALT:
            if (keymap_config.swap_ralt_rgui) {
    3f9e:	80 91 d8 01 	lds	r24, 0x01D8
    3fa2:	83 ff       	sbrs	r24, 3
    3fa4:	0a c0       	rjmp	.+20     	; 0x3fba <action_for_key+0xae>
                if (keymap_config.no_gui) {
    3fa6:	80 91 d8 01 	lds	r24, 0x01D8
    3faa:	84 fd       	sbrc	r24, 4
    3fac:	ee cf       	rjmp	.-36     	; 0x3f8a <action_for_key+0x7e>
                    return keycode_to_action(ACTION_NO);
                }
                return keycode_to_action(KC_RGUI);
    3fae:	87 ee       	ldi	r24, 0xE7	; 231
    3fb0:	1d c0       	rjmp	.+58     	; 0x3fec <action_for_key+0xe0>
            }
            return keycode_to_action(KC_RALT);
        case KC_RGUI:
            if (keymap_config.swap_ralt_rgui) {
    3fb2:	80 91 d8 01 	lds	r24, 0x01D8
    3fb6:	83 ff       	sbrs	r24, 3
    3fb8:	f6 cf       	rjmp	.-20     	; 0x3fa6 <action_for_key+0x9a>
                if (keymap_config.no_gui) {
                    return keycode_to_action(ACTION_NO);
                }
                return keycode_to_action(KC_RGUI);
            }
            return keycode_to_action(KC_RALT);
    3fba:	86 ee       	ldi	r24, 0xE6	; 230
    3fbc:	17 c0       	rjmp	.+46     	; 0x3fec <action_for_key+0xe0>
            if (keymap_config.no_gui) {
                return keycode_to_action(ACTION_NO);
            }
            return keycode_to_action(KC_RGUI);
        case KC_GRAVE:
            if (keymap_config.swap_grave_esc) {
    3fbe:	80 91 d8 01 	lds	r24, 0x01D8
    3fc2:	85 ff       	sbrs	r24, 5
    3fc4:	06 c0       	rjmp	.+12     	; 0x3fd2 <action_for_key+0xc6>
                return keycode_to_action(KC_ESC);
    3fc6:	89 e2       	ldi	r24, 0x29	; 41
    3fc8:	11 c0       	rjmp	.+34     	; 0x3fec <action_for_key+0xe0>
            }
            return keycode_to_action(KC_GRAVE);
        case KC_ESC:
            if (keymap_config.swap_grave_esc) {
    3fca:	80 91 d8 01 	lds	r24, 0x01D8
    3fce:	85 ff       	sbrs	r24, 5
    3fd0:	fa cf       	rjmp	.-12     	; 0x3fc6 <action_for_key+0xba>
            return keycode_to_action(KC_RGUI);
        case KC_GRAVE:
            if (keymap_config.swap_grave_esc) {
                return keycode_to_action(KC_ESC);
            }
            return keycode_to_action(KC_GRAVE);
    3fd2:	85 e3       	ldi	r24, 0x35	; 53
    3fd4:	0b c0       	rjmp	.+22     	; 0x3fec <action_for_key+0xe0>
            if (keymap_config.swap_grave_esc) {
                return keycode_to_action(KC_GRAVE);
            }
            return keycode_to_action(KC_ESC);
        case KC_BSLASH:
            if (keymap_config.swap_backslash_backspace) {
    3fd6:	80 91 d8 01 	lds	r24, 0x01D8
    3fda:	86 ff       	sbrs	r24, 6
    3fdc:	06 c0       	rjmp	.+12     	; 0x3fea <action_for_key+0xde>
                return keycode_to_action(KC_BSPACE);
    3fde:	8a e2       	ldi	r24, 0x2A	; 42
    3fe0:	05 c0       	rjmp	.+10     	; 0x3fec <action_for_key+0xe0>
            }
            return keycode_to_action(KC_BSLASH);
        case KC_BSPACE:
            if (keymap_config.swap_backslash_backspace) {
    3fe2:	80 91 d8 01 	lds	r24, 0x01D8
    3fe6:	86 ff       	sbrs	r24, 6
    3fe8:	fa cf       	rjmp	.-12     	; 0x3fde <action_for_key+0xd2>
            return keycode_to_action(KC_ESC);
        case KC_BSLASH:
            if (keymap_config.swap_backslash_backspace) {
                return keycode_to_action(KC_BSPACE);
            }
            return keycode_to_action(KC_BSLASH);
    3fea:	81 e3       	ldi	r24, 0x31	; 49
                return keycode_to_action(KC_BSLASH);
            }
            return keycode_to_action(KC_BSPACE);
#endif
        default:
            return keycode_to_action(keycode);
    3fec:	0e 94 e4 1e 	call	0x3dc8	; 0x3dc8 <keycode_to_action>
    }
}
    3ff0:	08 95       	ret

00003ff2 <action_get_macro>:
/* Macro */
__attribute__ ((weak))
const macro_t *action_get_macro(keyrecord_t *record, uint8_t id, uint8_t opt)
{
    return MACRO_NONE;
}
    3ff2:	80 e0       	ldi	r24, 0x00	; 0
    3ff4:	90 e0       	ldi	r25, 0x00	; 0
    3ff6:	08 95       	ret

00003ff8 <action_function>:

/* Function */
__attribute__ ((weak))
void action_function(keyrecord_t *record, uint8_t id, uint8_t opt)
{
    3ff8:	08 95       	ret

00003ffa <print_set_sendchar>:
#define sendchar(c)    xputc(c)


void print_set_sendchar(int8_t (*sendchar_func)(uint8_t))
{
    xdev_out(sendchar_func);
    3ffa:	90 93 c6 01 	sts	0x01C6, r25
    3ffe:	80 93 c5 01 	sts	0x01C5, r24
    4002:	08 95       	ret

00004004 <biton32>:
    if (bits >> 1) { bits >>= 1; n += 1;}
    return n;
}

uint8_t biton32(uint32_t bits)
{
    4004:	cf 92       	push	r12
    4006:	df 92       	push	r13
    4008:	ef 92       	push	r14
    400a:	ff 92       	push	r15
    400c:	0f 93       	push	r16
    400e:	1f 93       	push	r17
    uint8_t n = 0;
    if (bits >>16) { bits >>=16; n +=16;}
    4010:	6c 01       	movw	r12, r24
    4012:	ee 24       	eor	r14, r14
    4014:	ff 24       	eor	r15, r15
    4016:	c1 14       	cp	r12, r1
    4018:	d1 04       	cpc	r13, r1
    401a:	e1 04       	cpc	r14, r1
    401c:	f1 04       	cpc	r15, r1
    401e:	21 f4       	brne	.+8      	; 0x4028 <biton32+0x24>
    4020:	6b 01       	movw	r12, r22
    4022:	7c 01       	movw	r14, r24
    return n;
}

uint8_t biton32(uint32_t bits)
{
    uint8_t n = 0;
    4024:	80 e0       	ldi	r24, 0x00	; 0
    4026:	01 c0       	rjmp	.+2      	; 0x402a <biton32+0x26>
    if (bits >>16) { bits >>=16; n +=16;}
    4028:	80 e1       	ldi	r24, 0x10	; 16
    if (bits >> 8) { bits >>= 8; n += 8;}
    402a:	33 27       	eor	r19, r19
    402c:	2f 2d       	mov	r18, r15
    402e:	1e 2d       	mov	r17, r14
    4030:	0d 2d       	mov	r16, r13
    4032:	01 15       	cp	r16, r1
    4034:	11 05       	cpc	r17, r1
    4036:	21 05       	cpc	r18, r1
    4038:	31 05       	cpc	r19, r1
    403a:	19 f0       	breq	.+6      	; 0x4042 <biton32+0x3e>
    403c:	88 5f       	subi	r24, 0xF8	; 248
    403e:	68 01       	movw	r12, r16
    4040:	79 01       	movw	r14, r18
    if (bits >> 4) { bits >>= 4; n += 4;}
    4042:	97 01       	movw	r18, r14
    4044:	86 01       	movw	r16, r12
    4046:	a4 e0       	ldi	r26, 0x04	; 4
    4048:	36 95       	lsr	r19
    404a:	27 95       	ror	r18
    404c:	17 95       	ror	r17
    404e:	07 95       	ror	r16
    4050:	aa 95       	dec	r26
    4052:	d1 f7       	brne	.-12     	; 0x4048 <biton32+0x44>
    4054:	01 15       	cp	r16, r1
    4056:	11 05       	cpc	r17, r1
    4058:	21 05       	cpc	r18, r1
    405a:	31 05       	cpc	r19, r1
    405c:	19 f0       	breq	.+6      	; 0x4064 <biton32+0x60>
    405e:	8c 5f       	subi	r24, 0xFC	; 252
    4060:	68 01       	movw	r12, r16
    4062:	79 01       	movw	r14, r18
    if (bits >> 2) { bits >>= 2; n += 2;}
    4064:	97 01       	movw	r18, r14
    4066:	86 01       	movw	r16, r12
    4068:	f2 e0       	ldi	r31, 0x02	; 2
    406a:	36 95       	lsr	r19
    406c:	27 95       	ror	r18
    406e:	17 95       	ror	r17
    4070:	07 95       	ror	r16
    4072:	fa 95       	dec	r31
    4074:	d1 f7       	brne	.-12     	; 0x406a <biton32+0x66>
    4076:	01 15       	cp	r16, r1
    4078:	11 05       	cpc	r17, r1
    407a:	21 05       	cpc	r18, r1
    407c:	31 05       	cpc	r19, r1
    407e:	19 f0       	breq	.+6      	; 0x4086 <biton32+0x82>
    4080:	8e 5f       	subi	r24, 0xFE	; 254
    4082:	68 01       	movw	r12, r16
    4084:	79 01       	movw	r14, r18
    if (bits >> 1) { bits >>= 1; n += 1;}
    4086:	b7 01       	movw	r22, r14
    4088:	a6 01       	movw	r20, r12
    408a:	76 95       	lsr	r23
    408c:	67 95       	ror	r22
    408e:	57 95       	ror	r21
    4090:	47 95       	ror	r20
    4092:	45 2b       	or	r20, r21
    4094:	46 2b       	or	r20, r22
    4096:	47 2b       	or	r20, r23
    4098:	09 f0       	breq	.+2      	; 0x409c <biton32+0x98>
    409a:	8f 5f       	subi	r24, 0xFF	; 255
    return n;
}
    409c:	1f 91       	pop	r17
    409e:	0f 91       	pop	r16
    40a0:	ff 90       	pop	r15
    40a2:	ef 90       	pop	r14
    40a4:	df 90       	pop	r13
    40a6:	cf 90       	pop	r12
    40a8:	08 95       	ret

000040aa <bitrev>:



uint8_t bitrev(uint8_t bits)
{
    bits = (bits & 0x0f)<<4 | (bits & 0xf0)>>4;
    40aa:	82 95       	swap	r24
    bits = (bits & 0b00110011)<<2 | (bits & 0b11001100)>>2;
    40ac:	98 2f       	mov	r25, r24
    40ae:	9c 7c       	andi	r25, 0xCC	; 204
    40b0:	96 95       	lsr	r25
    40b2:	96 95       	lsr	r25
    40b4:	83 73       	andi	r24, 0x33	; 51
    40b6:	44 e0       	ldi	r20, 0x04	; 4
    40b8:	84 9f       	mul	r24, r20
    40ba:	90 01       	movw	r18, r0
    40bc:	11 24       	eor	r1, r1
    40be:	92 2b       	or	r25, r18
    bits = (bits & 0b01010101)<<1 | (bits & 0b10101010)>>1;
    40c0:	89 2f       	mov	r24, r25
    40c2:	8a 7a       	andi	r24, 0xAA	; 170
    40c4:	86 95       	lsr	r24
    40c6:	95 75       	andi	r25, 0x55	; 85
    40c8:	99 0f       	add	r25, r25
    return bits;
}
    40ca:	89 2b       	or	r24, r25
    40cc:	08 95       	ret

000040ce <bitrev16>:

uint16_t bitrev16(uint16_t bits)
{
    40ce:	1f 93       	push	r17
    40d0:	cf 93       	push	r28
    40d2:	df 93       	push	r29
    40d4:	1f 92       	push	r1
    40d6:	cd b7       	in	r28, 0x3d	; 61
    40d8:	de b7       	in	r29, 0x3e	; 62
    bits = bitrev(bits & 0x00ff)<<8 | bitrev((bits & 0xff00)>>8);
    40da:	99 83       	std	Y+1, r25	; 0x01
    40dc:	0e 94 55 20 	call	0x40aa	; 0x40aa <bitrev>
    40e0:	18 2f       	mov	r17, r24
    40e2:	99 81       	ldd	r25, Y+1	; 0x01
    40e4:	89 2f       	mov	r24, r25
    40e6:	0e 94 55 20 	call	0x40aa	; 0x40aa <bitrev>
    40ea:	21 2f       	mov	r18, r17
    40ec:	30 e0       	ldi	r19, 0x00	; 0
    40ee:	32 2f       	mov	r19, r18
    40f0:	22 27       	eor	r18, r18
    return bits;
}
    40f2:	a9 01       	movw	r20, r18
    40f4:	48 2b       	or	r20, r24
    40f6:	ca 01       	movw	r24, r20
    40f8:	0f 90       	pop	r0
    40fa:	df 91       	pop	r29
    40fc:	cf 91       	pop	r28
    40fe:	1f 91       	pop	r17
    4100:	08 95       	ret

00004102 <suspend_power_down>:
 */
static uint8_t wdt_timeout = 0;
static void power_down(uint8_t wdto)
{
#ifdef PROTOCOL_LUFA
    if (USB_DeviceState == DEVICE_STATE_Configured) return;
    4102:	80 91 dd 01 	lds	r24, 0x01DD
    4106:	84 30       	cpi	r24, 0x04	; 4
    4108:	09 f1       	breq	.+66     	; 0x414c <suspend_power_down+0x4a>
#endif
    wdt_timeout = wdto;
    410a:	10 92 c4 01 	sts	0x01C4, r1

    // Watchdog Interrupt Mode
    wdt_intr_enable(wdto);
    410e:	20 e4       	ldi	r18, 0x40	; 64
    4110:	88 e1       	ldi	r24, 0x18	; 24
    4112:	90 e0       	ldi	r25, 0x00	; 0
    4114:	0f b6       	in	r0, 0x3f	; 63
    4116:	f8 94       	cli
    4118:	a8 95       	wdr
    411a:	80 93 60 00 	sts	0x0060, r24
    411e:	0f be       	out	0x3f, r0	; 63
    4120:	20 93 60 00 	sts	0x0060, r18
    // See PicoPower application note
    // - I/O port input with pullup
    // - prescale clock
    // - BOD disable
    // - Power Reduction Register PRR
    set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    4124:	83 b7       	in	r24, 0x33	; 51
    4126:	81 7f       	andi	r24, 0xF1	; 241
    4128:	84 60       	ori	r24, 0x04	; 4
    412a:	83 bf       	out	0x33, r24	; 51
    sleep_enable();
    412c:	83 b7       	in	r24, 0x33	; 51
    412e:	81 60       	ori	r24, 0x01	; 1
    4130:	83 bf       	out	0x33, r24	; 51
    sei();
    4132:	78 94       	sei
    sleep_cpu();
    4134:	88 95       	sleep
    sleep_disable();
    4136:	83 b7       	in	r24, 0x33	; 51
    4138:	8e 7f       	andi	r24, 0xFE	; 254
    413a:	83 bf       	out	0x33, r24	; 51

    // Disable watchdog after sleep
    wdt_disable();
    413c:	88 e1       	ldi	r24, 0x18	; 24
    413e:	0f b6       	in	r0, 0x3f	; 63
    4140:	f8 94       	cli
    4142:	80 93 60 00 	sts	0x0060, r24
    4146:	10 92 60 00 	sts	0x0060, r1
    414a:	0f be       	out	0x3f, r0	; 63
    414c:	08 95       	ret

0000414e <suspend_wakeup_condition>:
{
    power_down(WDTO_15MS);
}

bool suspend_wakeup_condition(void)
{
    414e:	cf 93       	push	r28
    matrix_power_up();
    4150:	0e 94 27 09 	call	0x124e	; 0x124e <matrix_power_up>
    matrix_scan();
    4154:	0e 94 69 09 	call	0x12d2	; 0x12d2 <matrix_scan>
    matrix_power_down();
    4158:	0e 94 28 09 	call	0x1250	; 0x1250 <matrix_power_down>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    415c:	c0 e0       	ldi	r28, 0x00	; 0
        if (matrix_get_row(r)) return true;
    415e:	8c 2f       	mov	r24, r28
    4160:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <matrix_get_row>
    4164:	89 2b       	or	r24, r25
    4166:	29 f4       	brne	.+10     	; 0x4172 <suspend_wakeup_condition+0x24>
bool suspend_wakeup_condition(void)
{
    matrix_power_up();
    matrix_scan();
    matrix_power_down();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    4168:	cf 5f       	subi	r28, 0xFF	; 255
    416a:	c5 30       	cpi	r28, 0x05	; 5
    416c:	c1 f7       	brne	.-16     	; 0x415e <suspend_wakeup_condition+0x10>
        if (matrix_get_row(r)) return true;
    }
    return false;
    416e:	80 e0       	ldi	r24, 0x00	; 0
    4170:	01 c0       	rjmp	.+2      	; 0x4174 <suspend_wakeup_condition+0x26>
{
    matrix_power_up();
    matrix_scan();
    matrix_power_down();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        if (matrix_get_row(r)) return true;
    4172:	81 e0       	ldi	r24, 0x01	; 1
    }
    return false;
}
    4174:	cf 91       	pop	r28
    4176:	08 95       	ret

00004178 <suspend_wakeup_init>:

// run immediately after wakeup
void suspend_wakeup_init(void)
{
    // clear keyboard state
    clear_keyboard();
    4178:	0c 94 85 18 	jmp	0x310a	; 0x310a <clear_keyboard>

0000417c <__vector_12>:
}

#ifndef NO_SUSPEND_POWER_DOWN
/* watchdog timeout */
ISR(WDT_vect)
{
    417c:	1f 92       	push	r1
    417e:	0f 92       	push	r0
    4180:	0f b6       	in	r0, 0x3f	; 63
    4182:	0f 92       	push	r0
    4184:	11 24       	eor	r1, r1
    4186:	8f 93       	push	r24
    4188:	9f 93       	push	r25
    418a:	af 93       	push	r26
    418c:	bf 93       	push	r27
    // compensate timer for sleep
    switch (wdt_timeout) {
    418e:	80 91 c4 01 	lds	r24, 0x01C4
    4192:	81 11       	cpse	r24, r1
    4194:	13 c0       	rjmp	.+38     	; 0x41bc <__vector_12+0x40>
        case WDTO_15MS:
            timer_count += 15 + 2;  // WDTO_15MS + 2(from observation)
    4196:	80 91 c7 01 	lds	r24, 0x01C7
    419a:	90 91 c8 01 	lds	r25, 0x01C8
    419e:	a0 91 c9 01 	lds	r26, 0x01C9
    41a2:	b0 91 ca 01 	lds	r27, 0x01CA
    41a6:	41 96       	adiw	r24, 0x11	; 17
    41a8:	a1 1d       	adc	r26, r1
    41aa:	b1 1d       	adc	r27, r1
    41ac:	80 93 c7 01 	sts	0x01C7, r24
    41b0:	90 93 c8 01 	sts	0x01C8, r25
    41b4:	a0 93 c9 01 	sts	0x01C9, r26
    41b8:	b0 93 ca 01 	sts	0x01CA, r27
            break;
        default:
            ;
    }
}
    41bc:	bf 91       	pop	r27
    41be:	af 91       	pop	r26
    41c0:	9f 91       	pop	r25
    41c2:	8f 91       	pop	r24
    41c4:	0f 90       	pop	r0
    41c6:	0f be       	out	0x3f, r0	; 63
    41c8:	0f 90       	pop	r0
    41ca:	1f 90       	pop	r1
    41cc:	18 95       	reti

000041ce <timer_init>:
volatile uint32_t timer_count = 0;

void timer_init(void)
{
    // Timer0 CTC mode
    TCCR0A = 0x02;
    41ce:	82 e0       	ldi	r24, 0x02	; 2
    41d0:	84 bd       	out	0x24, r24	; 36
#if TIMER_PRESCALER == 1
    TCCR0B = 0x01;
#elif TIMER_PRESCALER == 8
    TCCR0B = 0x02;
#elif TIMER_PRESCALER == 64
    TCCR0B = 0x03;
    41d2:	93 e0       	ldi	r25, 0x03	; 3
    41d4:	95 bd       	out	0x25, r25	; 37
    TCCR0B = 0x05;
#else
#   error "Timer prescaler value is NOT vaild."
#endif

    OCR0A = TIMER_RAW_TOP;
    41d6:	9a ef       	ldi	r25, 0xFA	; 250
    41d8:	97 bd       	out	0x27, r25	; 39
    TIMSK0 = (1<<OCIE0A);
    41da:	80 93 6e 00 	sts	0x006E, r24
    41de:	08 95       	ret

000041e0 <timer_read>:
inline
uint16_t timer_read(void)
{
    uint32_t t;

    uint8_t sreg = SREG;
    41e0:	2f b7       	in	r18, 0x3f	; 63
    cli();
    41e2:	f8 94       	cli
    t = timer_count;
    41e4:	80 91 c7 01 	lds	r24, 0x01C7
    41e8:	90 91 c8 01 	lds	r25, 0x01C8
    41ec:	a0 91 c9 01 	lds	r26, 0x01C9
    41f0:	b0 91 ca 01 	lds	r27, 0x01CA
    SREG = sreg;
    41f4:	2f bf       	out	0x3f, r18	; 63

    return (t & 0xFFFF);
}
    41f6:	08 95       	ret

000041f8 <timer_elapsed>:
    return t;
}

inline
uint16_t timer_elapsed(uint16_t last)
{
    41f8:	cf 92       	push	r12
    41fa:	df 92       	push	r13
    41fc:	ef 92       	push	r14
    41fe:	ff 92       	push	r15
    4200:	0f 93       	push	r16
    4202:	1f 93       	push	r17
    uint32_t t;

    uint8_t sreg = SREG;
    4204:	2f b7       	in	r18, 0x3f	; 63
    cli();
    4206:	f8 94       	cli
    t = timer_count;
    4208:	40 91 c7 01 	lds	r20, 0x01C7
    420c:	50 91 c8 01 	lds	r21, 0x01C8
    4210:	60 91 c9 01 	lds	r22, 0x01C9
    4214:	70 91 ca 01 	lds	r23, 0x01CA
    SREG = sreg;
    4218:	2f bf       	out	0x3f, r18	; 63

    return TIMER_DIFF_16((t & 0xFFFF), last);
    421a:	6a 01       	movw	r12, r20
    421c:	7b 01       	movw	r14, r22
    421e:	ee 24       	eor	r14, r14
    4220:	ff 24       	eor	r15, r15
    4222:	8c 01       	movw	r16, r24
    4224:	20 e0       	ldi	r18, 0x00	; 0
    4226:	30 e0       	ldi	r19, 0x00	; 0
    4228:	c0 16       	cp	r12, r16
    422a:	d1 06       	cpc	r13, r17
    422c:	e2 06       	cpc	r14, r18
    422e:	f3 06       	cpc	r15, r19
    4230:	10 f4       	brcc	.+4      	; 0x4236 <timer_elapsed+0x3e>
    4232:	41 50       	subi	r20, 0x01	; 1
    4234:	51 09       	sbc	r21, r1
    4236:	48 1b       	sub	r20, r24
    4238:	59 0b       	sbc	r21, r25
}
    423a:	ca 01       	movw	r24, r20
    423c:	1f 91       	pop	r17
    423e:	0f 91       	pop	r16
    4240:	ff 90       	pop	r15
    4242:	ef 90       	pop	r14
    4244:	df 90       	pop	r13
    4246:	cf 90       	pop	r12
    4248:	08 95       	ret

0000424a <__vector_21>:
    return TIMER_DIFF_32(t, last);
}

// excecuted once per 1ms.(excess for just timer count?)
ISR(TIMER0_COMPA_vect)
{
    424a:	1f 92       	push	r1
    424c:	0f 92       	push	r0
    424e:	0f b6       	in	r0, 0x3f	; 63
    4250:	0f 92       	push	r0
    4252:	11 24       	eor	r1, r1
    4254:	8f 93       	push	r24
    4256:	9f 93       	push	r25
    4258:	af 93       	push	r26
    425a:	bf 93       	push	r27
    timer_count++;
    425c:	80 91 c7 01 	lds	r24, 0x01C7
    4260:	90 91 c8 01 	lds	r25, 0x01C8
    4264:	a0 91 c9 01 	lds	r26, 0x01C9
    4268:	b0 91 ca 01 	lds	r27, 0x01CA
    426c:	01 96       	adiw	r24, 0x01	; 1
    426e:	a1 1d       	adc	r26, r1
    4270:	b1 1d       	adc	r27, r1
    4272:	80 93 c7 01 	sts	0x01C7, r24
    4276:	90 93 c8 01 	sts	0x01C8, r25
    427a:	a0 93 c9 01 	sts	0x01C9, r26
    427e:	b0 93 ca 01 	sts	0x01CA, r27
}
    4282:	bf 91       	pop	r27
    4284:	af 91       	pop	r26
    4286:	9f 91       	pop	r25
    4288:	8f 91       	pop	r24
    428a:	0f 90       	pop	r0
    428c:	0f be       	out	0x3f, r0	; 63
    428e:	0f 90       	pop	r0
    4290:	1f 90       	pop	r1
    4292:	18 95       	reti

00004294 <bootloader_jump>:
uint32_t reset_key  __attribute__ ((section (".noinit")));

/* initialize MCU status by watchdog reset */
void bootloader_jump(void) {
#ifdef PROTOCOL_LUFA
    USB_Disable();
    4294:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <USB_Disable>
    cli();
    4298:	f8 94       	cli
    429a:	2f ef       	ldi	r18, 0xFF	; 255
    429c:	87 ea       	ldi	r24, 0xA7	; 167
    429e:	91 e6       	ldi	r25, 0x61	; 97
    42a0:	21 50       	subi	r18, 0x01	; 1
    42a2:	80 40       	sbci	r24, 0x00	; 0
    42a4:	90 40       	sbci	r25, 0x00	; 0
    42a6:	e1 f7       	brne	.-8      	; 0x42a0 <bootloader_jump+0xc>
    42a8:	00 c0       	rjmp	.+0      	; 0x42aa <bootloader_jump+0x16>
    42aa:	00 00       	nop
    UCSR1B = 0;
    _delay_ms(5);
#endif

    // watchdog reset
    reset_key = BOOTLOADER_RESET_KEY;
    42ac:	87 e0       	ldi	r24, 0x07	; 7
    42ae:	90 eb       	ldi	r25, 0xB0	; 176
    42b0:	dc 01       	movw	r26, r24
    42b2:	80 93 e6 01 	sts	0x01E6, r24
    42b6:	90 93 e7 01 	sts	0x01E7, r25
    42ba:	a0 93 e8 01 	sts	0x01E8, r26
    42be:	b0 93 e9 01 	sts	0x01E9, r27
    wdt_enable(WDTO_250MS);
    42c2:	2c e0       	ldi	r18, 0x0C	; 12
    42c4:	88 e1       	ldi	r24, 0x18	; 24
    42c6:	90 e0       	ldi	r25, 0x00	; 0
    42c8:	0f b6       	in	r0, 0x3f	; 63
    42ca:	f8 94       	cli
    42cc:	a8 95       	wdr
    42ce:	80 93 60 00 	sts	0x0060, r24
    42d2:	0f be       	out	0x3f, r0	; 63
    42d4:	20 93 60 00 	sts	0x0060, r18
    42d8:	ff cf       	rjmp	.-2      	; 0x42d8 <bootloader_jump+0x44>

000042da <scan_keycode>:
        default_layer_set((uint32_t)default_layer);
    }
}

static bool scan_keycode(uint8_t keycode)
{
    42da:	cf 92       	push	r12
    42dc:	df 92       	push	r13
    42de:	ef 92       	push	r14
    42e0:	ff 92       	push	r15
    42e2:	0f 93       	push	r16
    42e4:	1f 93       	push	r17
    42e6:	cf 93       	push	r28
    42e8:	df 93       	push	r29
    42ea:	c8 2e       	mov	r12, r24
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    42ec:	d1 2c       	mov	r13, r1
        matrix_row_t matrix_row = matrix_get_row(r);
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
            if (matrix_row & ((matrix_row_t)1<<c)) {
    42ee:	01 e0       	ldi	r16, 0x01	; 1
    42f0:	10 e0       	ldi	r17, 0x00	; 0
}

static bool scan_keycode(uint8_t keycode)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row_t matrix_row = matrix_get_row(r);
    42f2:	8d 2d       	mov	r24, r13
    42f4:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <matrix_get_row>
    42f8:	7c 01       	movw	r14, r24
    42fa:	c0 e0       	ldi	r28, 0x00	; 0
    42fc:	d0 e0       	ldi	r29, 0x00	; 0
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
            if (matrix_row & ((matrix_row_t)1<<c)) {
    42fe:	98 01       	movw	r18, r16
    4300:	0c 2e       	mov	r0, r28
    4302:	02 c0       	rjmp	.+4      	; 0x4308 <scan_keycode+0x2e>
    4304:	22 0f       	add	r18, r18
    4306:	33 1f       	adc	r19, r19
    4308:	0a 94       	dec	r0
    430a:	e2 f7       	brpl	.-8      	; 0x4304 <scan_keycode+0x2a>
    430c:	2e 21       	and	r18, r14
    430e:	3f 21       	and	r19, r15
    4310:	23 2b       	or	r18, r19
    4312:	29 f4       	brne	.+10     	; 0x431e <scan_keycode+0x44>
    4314:	21 96       	adiw	r28, 0x01	; 1

static bool scan_keycode(uint8_t keycode)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row_t matrix_row = matrix_get_row(r);
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    4316:	cf 30       	cpi	r28, 0x0F	; 15
    4318:	d1 05       	cpc	r29, r1
    431a:	89 f7       	brne	.-30     	; 0x42fe <scan_keycode+0x24>
    431c:	09 c0       	rjmp	.+18     	; 0x4330 <scan_keycode+0x56>
            if (matrix_row & ((matrix_row_t)1<<c)) {
                if (keycode == keymap_key_to_keycode(0, (keypos_t){ .row = r, .col = c })) {
    431e:	6c 2f       	mov	r22, r28
    4320:	7d 2d       	mov	r23, r13
    4322:	80 e0       	ldi	r24, 0x00	; 0
    4324:	0e 94 29 09 	call	0x1252	; 0x1252 <keymap_key_to_keycode>
    4328:	c8 12       	cpse	r12, r24
    432a:	f4 cf       	rjmp	.-24     	; 0x4314 <scan_keycode+0x3a>
                    return true;
    432c:	81 e0       	ldi	r24, 0x01	; 1
    432e:	05 c0       	rjmp	.+10     	; 0x433a <scan_keycode+0x60>
    }
}

static bool scan_keycode(uint8_t keycode)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    4330:	d3 94       	inc	r13
    4332:	85 e0       	ldi	r24, 0x05	; 5
    4334:	d8 12       	cpse	r13, r24
    4336:	dd cf       	rjmp	.-70     	; 0x42f2 <scan_keycode+0x18>
                    return true;
                }
            }
        }
    }
    return false;
    4338:	80 e0       	ldi	r24, 0x00	; 0
}
    433a:	df 91       	pop	r29
    433c:	cf 91       	pop	r28
    433e:	1f 91       	pop	r17
    4340:	0f 91       	pop	r16
    4342:	ff 90       	pop	r15
    4344:	ef 90       	pop	r14
    4346:	df 90       	pop	r13
    4348:	cf 90       	pop	r12
    434a:	08 95       	ret

0000434c <bootmagic_scan_keycode>:

bool bootmagic_scan_keycode(uint8_t keycode)
{
    434c:	cf 93       	push	r28
    434e:	c8 2f       	mov	r28, r24
    if (!scan_keycode(BOOTMAGIC_KEY_SALT)) return false;
    4350:	8c e2       	ldi	r24, 0x2C	; 44
    4352:	0e 94 6d 21 	call	0x42da	; 0x42da <scan_keycode>
    4356:	88 23       	and	r24, r24
    4358:	21 f0       	breq	.+8      	; 0x4362 <bootmagic_scan_keycode+0x16>

    return scan_keycode(keycode);
    435a:	8c 2f       	mov	r24, r28
}
    435c:	cf 91       	pop	r28

bool bootmagic_scan_keycode(uint8_t keycode)
{
    if (!scan_keycode(BOOTMAGIC_KEY_SALT)) return false;

    return scan_keycode(keycode);
    435e:	0c 94 6d 21 	jmp	0x42da	; 0x42da <scan_keycode>
}
    4362:	80 e0       	ldi	r24, 0x00	; 0
    4364:	cf 91       	pop	r28
    4366:	08 95       	ret

00004368 <bootmagic>:
#include "eeconfig.h"
#include "bootmagic.h"


void bootmagic(void)
{
    4368:	cf 93       	push	r28
    /* check signature */
    if (!eeconfig_is_enabled()) {
    436a:	0e 94 01 23 	call	0x4602	; 0x4602 <eeconfig_is_enabled>
    436e:	81 11       	cpse	r24, r1
    4370:	02 c0       	rjmp	.+4      	; 0x4376 <bootmagic+0xe>
        eeconfig_init();
    4372:	0e 94 e7 22 	call	0x45ce	; 0x45ce <eeconfig_init>
    }

    /* do scans in case of bounce */
    print("boogmagic scan: ... ");
    4376:	8b e5       	ldi	r24, 0x5B	; 91
    4378:	95 e0       	ldi	r25, 0x05	; 5
    437a:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    uint8_t scan = 100;
    while (scan--) { matrix_scan(); _delay_ms(10); }
    437e:	c5 e6       	ldi	r28, 0x65	; 101
    4380:	c1 50       	subi	r28, 0x01	; 1
    4382:	49 f0       	breq	.+18     	; 0x4396 <bootmagic+0x2e>
    4384:	0e 94 69 09 	call	0x12d2	; 0x12d2 <matrix_scan>
    4388:	8f e3       	ldi	r24, 0x3F	; 63
    438a:	9c e9       	ldi	r25, 0x9C	; 156
    438c:	01 97       	sbiw	r24, 0x01	; 1
    438e:	f1 f7       	brne	.-4      	; 0x438c <bootmagic+0x24>
    4390:	00 c0       	rjmp	.+0      	; 0x4392 <bootmagic+0x2a>
    4392:	00 00       	nop
    4394:	f5 cf       	rjmp	.-22     	; 0x4380 <bootmagic+0x18>
    print("done.\n");
    4396:	84 e5       	ldi	r24, 0x54	; 84
    4398:	95 e0       	ldi	r25, 0x05	; 5
    439a:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>

    /* bootmagic skip */
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SKIP)) {
    439e:	89 e2       	ldi	r24, 0x29	; 41
    43a0:	0e 94 a6 21 	call	0x434c	; 0x434c <bootmagic_scan_keycode>
    43a4:	81 11       	cpse	r24, r1
    43a6:	11 c1       	rjmp	.+546    	; 0x45ca <bootmagic+0x262>
        return;
    }

    /* eeconfig clear */
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_EEPROM_CLEAR)) {
    43a8:	8a e2       	ldi	r24, 0x2A	; 42
    43aa:	0e 94 a6 21 	call	0x434c	; 0x434c <bootmagic_scan_keycode>
    43ae:	81 11       	cpse	r24, r1
        eeconfig_init();
    43b0:	0e 94 e7 22 	call	0x45ce	; 0x45ce <eeconfig_init>
    }

    /* bootloader */
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_BOOTLOADER)) {
    43b4:	85 e0       	ldi	r24, 0x05	; 5
    43b6:	0e 94 a6 21 	call	0x434c	; 0x434c <bootmagic_scan_keycode>
    43ba:	81 11       	cpse	r24, r1
        bootloader_jump();
    43bc:	0e 94 4a 21 	call	0x4294	; 0x4294 <bootloader_jump>
    }

    /* debug enable */
    debug_config.raw = eeconfig_read_debug();
    43c0:	0e 94 0c 23 	call	0x4618	; 0x4618 <eeconfig_read_debug>
    43c4:	80 93 c3 01 	sts	0x01C3, r24
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
    43c8:	87 e0       	ldi	r24, 0x07	; 7
    43ca:	0e 94 a6 21 	call	0x434c	; 0x434c <bootmagic_scan_keycode>
    43ce:	88 23       	and	r24, r24
    43d0:	99 f1       	breq	.+102    	; 0x4438 <bootmagic+0xd0>
        if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
    43d2:	8b e1       	ldi	r24, 0x1B	; 27
    43d4:	0e 94 a6 21 	call	0x434c	; 0x434c <bootmagic_scan_keycode>
    43d8:	88 23       	and	r24, r24
    43da:	51 f0       	breq	.+20     	; 0x43f0 <bootmagic+0x88>
            debug_config.matrix = !debug_config.matrix;
    43dc:	90 91 c3 01 	lds	r25, 0x01C3
    43e0:	91 fb       	bst	r25, 1
    43e2:	88 27       	eor	r24, r24
    43e4:	80 f9       	bld	r24, 0
    43e6:	21 e0       	ldi	r18, 0x01	; 1
    43e8:	82 27       	eor	r24, r18
    43ea:	80 fb       	bst	r24, 0
    43ec:	91 f9       	bld	r25, 1
    43ee:	22 c0       	rjmp	.+68     	; 0x4434 <bootmagic+0xcc>
        } else if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
    43f0:	8e e0       	ldi	r24, 0x0E	; 14
    43f2:	0e 94 a6 21 	call	0x434c	; 0x434c <bootmagic_scan_keycode>
    43f6:	88 23       	and	r24, r24
    43f8:	51 f0       	breq	.+20     	; 0x440e <bootmagic+0xa6>
            debug_config.keyboard = !debug_config.keyboard;
    43fa:	90 91 c3 01 	lds	r25, 0x01C3
    43fe:	92 fb       	bst	r25, 2
    4400:	88 27       	eor	r24, r24
    4402:	80 f9       	bld	r24, 0
    4404:	21 e0       	ldi	r18, 0x01	; 1
    4406:	82 27       	eor	r24, r18
    4408:	80 fb       	bst	r24, 0
    440a:	92 f9       	bld	r25, 2
    440c:	13 c0       	rjmp	.+38     	; 0x4434 <bootmagic+0xcc>
        } else if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
    440e:	80 e1       	ldi	r24, 0x10	; 16
    4410:	0e 94 a6 21 	call	0x434c	; 0x434c <bootmagic_scan_keycode>
    4414:	90 91 c3 01 	lds	r25, 0x01C3
    4418:	88 23       	and	r24, r24
    441a:	41 f0       	breq	.+16     	; 0x442c <bootmagic+0xc4>
            debug_config.mouse = !debug_config.mouse;
    441c:	93 fb       	bst	r25, 3
    441e:	88 27       	eor	r24, r24
    4420:	80 f9       	bld	r24, 0
    4422:	21 e0       	ldi	r18, 0x01	; 1
    4424:	82 27       	eor	r24, r18
    4426:	80 fb       	bst	r24, 0
    4428:	93 f9       	bld	r25, 3
    442a:	04 c0       	rjmp	.+8      	; 0x4434 <bootmagic+0xcc>
        } else {
            debug_config.enable = !debug_config.enable;
    442c:	89 2f       	mov	r24, r25
    442e:	80 95       	com	r24
    4430:	80 fb       	bst	r24, 0
    4432:	90 f9       	bld	r25, 0
    4434:	90 93 c3 01 	sts	0x01C3, r25
        }
    }
    eeconfig_write_debug(debug_config.raw);
    4438:	80 91 c3 01 	lds	r24, 0x01C3
    443c:	0e 94 10 23 	call	0x4620	; 0x4620 <eeconfig_write_debug>

    /* keymap config */
    keymap_config.raw = eeconfig_read_keymap();
    4440:	0e 94 1e 23 	call	0x463c	; 0x463c <eeconfig_read_keymap>
    4444:	80 93 d8 01 	sts	0x01D8, r24
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
    4448:	80 ee       	ldi	r24, 0xE0	; 224
    444a:	0e 94 a6 21 	call	0x434c	; 0x434c <bootmagic_scan_keycode>
    444e:	88 23       	and	r24, r24
    4450:	41 f0       	breq	.+16     	; 0x4462 <bootmagic+0xfa>
        keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
    4452:	80 91 d8 01 	lds	r24, 0x01D8
    4456:	98 2f       	mov	r25, r24
    4458:	90 95       	com	r25
    445a:	90 fb       	bst	r25, 0
    445c:	80 f9       	bld	r24, 0
    445e:	80 93 d8 01 	sts	0x01D8, r24
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_CAPSLOCK_TO_CONTROL)) {
    4462:	89 e3       	ldi	r24, 0x39	; 57
    4464:	0e 94 a6 21 	call	0x434c	; 0x434c <bootmagic_scan_keycode>
    4468:	88 23       	and	r24, r24
    446a:	59 f0       	breq	.+22     	; 0x4482 <bootmagic+0x11a>
        keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
    446c:	90 91 d8 01 	lds	r25, 0x01D8
    4470:	91 fb       	bst	r25, 1
    4472:	88 27       	eor	r24, r24
    4474:	80 f9       	bld	r24, 0
    4476:	21 e0       	ldi	r18, 0x01	; 1
    4478:	82 27       	eor	r24, r18
    447a:	80 fb       	bst	r24, 0
    447c:	91 f9       	bld	r25, 1
    447e:	90 93 d8 01 	sts	0x01D8, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_LALT_LGUI)) {
    4482:	82 ee       	ldi	r24, 0xE2	; 226
    4484:	0e 94 a6 21 	call	0x434c	; 0x434c <bootmagic_scan_keycode>
    4488:	88 23       	and	r24, r24
    448a:	59 f0       	breq	.+22     	; 0x44a2 <bootmagic+0x13a>
        keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
    448c:	90 91 d8 01 	lds	r25, 0x01D8
    4490:	92 fb       	bst	r25, 2
    4492:	88 27       	eor	r24, r24
    4494:	80 f9       	bld	r24, 0
    4496:	21 e0       	ldi	r18, 0x01	; 1
    4498:	82 27       	eor	r24, r18
    449a:	80 fb       	bst	r24, 0
    449c:	92 f9       	bld	r25, 2
    449e:	90 93 d8 01 	sts	0x01D8, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_RALT_RGUI)) {
    44a2:	86 ee       	ldi	r24, 0xE6	; 230
    44a4:	0e 94 a6 21 	call	0x434c	; 0x434c <bootmagic_scan_keycode>
    44a8:	88 23       	and	r24, r24
    44aa:	59 f0       	breq	.+22     	; 0x44c2 <bootmagic+0x15a>
        keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
    44ac:	90 91 d8 01 	lds	r25, 0x01D8
    44b0:	93 fb       	bst	r25, 3
    44b2:	88 27       	eor	r24, r24
    44b4:	80 f9       	bld	r24, 0
    44b6:	21 e0       	ldi	r18, 0x01	; 1
    44b8:	82 27       	eor	r24, r18
    44ba:	80 fb       	bst	r24, 0
    44bc:	93 f9       	bld	r25, 3
    44be:	90 93 d8 01 	sts	0x01D8, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_NO_GUI)) {
    44c2:	83 ee       	ldi	r24, 0xE3	; 227
    44c4:	0e 94 a6 21 	call	0x434c	; 0x434c <bootmagic_scan_keycode>
    44c8:	88 23       	and	r24, r24
    44ca:	59 f0       	breq	.+22     	; 0x44e2 <bootmagic+0x17a>
        keymap_config.no_gui = !keymap_config.no_gui;
    44cc:	90 91 d8 01 	lds	r25, 0x01D8
    44d0:	94 fb       	bst	r25, 4
    44d2:	88 27       	eor	r24, r24
    44d4:	80 f9       	bld	r24, 0
    44d6:	21 e0       	ldi	r18, 0x01	; 1
    44d8:	82 27       	eor	r24, r18
    44da:	80 fb       	bst	r24, 0
    44dc:	94 f9       	bld	r25, 4
    44de:	90 93 d8 01 	sts	0x01D8, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_GRAVE_ESC)) {
    44e2:	85 e3       	ldi	r24, 0x35	; 53
    44e4:	0e 94 a6 21 	call	0x434c	; 0x434c <bootmagic_scan_keycode>
    44e8:	88 23       	and	r24, r24
    44ea:	59 f0       	breq	.+22     	; 0x4502 <bootmagic+0x19a>
        keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
    44ec:	90 91 d8 01 	lds	r25, 0x01D8
    44f0:	95 fb       	bst	r25, 5
    44f2:	88 27       	eor	r24, r24
    44f4:	80 f9       	bld	r24, 0
    44f6:	21 e0       	ldi	r18, 0x01	; 1
    44f8:	82 27       	eor	r24, r18
    44fa:	80 fb       	bst	r24, 0
    44fc:	95 f9       	bld	r25, 5
    44fe:	90 93 d8 01 	sts	0x01D8, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_BACKSLASH_BACKSPACE)) {
    4502:	81 e3       	ldi	r24, 0x31	; 49
    4504:	0e 94 a6 21 	call	0x434c	; 0x434c <bootmagic_scan_keycode>
    4508:	88 23       	and	r24, r24
    450a:	59 f0       	breq	.+22     	; 0x4522 <bootmagic+0x1ba>
        keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
    450c:	90 91 d8 01 	lds	r25, 0x01D8
    4510:	96 fb       	bst	r25, 6
    4512:	88 27       	eor	r24, r24
    4514:	80 f9       	bld	r24, 0
    4516:	21 e0       	ldi	r18, 0x01	; 1
    4518:	82 27       	eor	r24, r18
    451a:	80 fb       	bst	r24, 0
    451c:	96 f9       	bld	r25, 6
    451e:	90 93 d8 01 	sts	0x01D8, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_HOST_NKRO)) {
    4522:	81 e1       	ldi	r24, 0x11	; 17
    4524:	0e 94 a6 21 	call	0x434c	; 0x434c <bootmagic_scan_keycode>
    4528:	88 23       	and	r24, r24
    452a:	59 f0       	breq	.+22     	; 0x4542 <bootmagic+0x1da>
        keymap_config.nkro = !keymap_config.nkro;
    452c:	90 91 d8 01 	lds	r25, 0x01D8
    4530:	97 fb       	bst	r25, 7
    4532:	88 27       	eor	r24, r24
    4534:	80 f9       	bld	r24, 0
    4536:	21 e0       	ldi	r18, 0x01	; 1
    4538:	82 27       	eor	r24, r18
    453a:	80 fb       	bst	r24, 0
    453c:	97 f9       	bld	r25, 7
    453e:	90 93 d8 01 	sts	0x01D8, r25
    }
    eeconfig_write_keymap(keymap_config.raw);
    4542:	80 91 d8 01 	lds	r24, 0x01D8
    4546:	0e 94 22 23 	call	0x4644	; 0x4644 <eeconfig_write_keymap>

#ifdef NKRO_ENABLE
    keyboard_nkro = keymap_config.nkro;
    454a:	80 91 d8 01 	lds	r24, 0x01D8
    454e:	87 fb       	bst	r24, 7
    4550:	88 27       	eor	r24, r24
    4552:	80 f9       	bld	r24, 0
    4554:	80 93 0c 01 	sts	0x010C, r24
#endif

    /* default layer */
    uint8_t default_layer = 0;
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_0)) { default_layer |= (1<<0); }
    4558:	87 e2       	ldi	r24, 0x27	; 39
    455a:	0e 94 a6 21 	call	0x434c	; 0x434c <bootmagic_scan_keycode>
    455e:	c8 2f       	mov	r28, r24
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
    4560:	8e e1       	ldi	r24, 0x1E	; 30
    4562:	0e 94 a6 21 	call	0x434c	; 0x434c <bootmagic_scan_keycode>
    4566:	81 11       	cpse	r24, r1
    4568:	c2 60       	ori	r28, 0x02	; 2
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
    456a:	8f e1       	ldi	r24, 0x1F	; 31
    456c:	0e 94 a6 21 	call	0x434c	; 0x434c <bootmagic_scan_keycode>
    4570:	81 11       	cpse	r24, r1
    4572:	c4 60       	ori	r28, 0x04	; 4
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
    4574:	80 e2       	ldi	r24, 0x20	; 32
    4576:	0e 94 a6 21 	call	0x434c	; 0x434c <bootmagic_scan_keycode>
    457a:	81 11       	cpse	r24, r1
    457c:	c8 60       	ori	r28, 0x08	; 8
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
    457e:	81 e2       	ldi	r24, 0x21	; 33
    4580:	0e 94 a6 21 	call	0x434c	; 0x434c <bootmagic_scan_keycode>
    4584:	81 11       	cpse	r24, r1
    4586:	c0 61       	ori	r28, 0x10	; 16
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
    4588:	82 e2       	ldi	r24, 0x22	; 34
    458a:	0e 94 a6 21 	call	0x434c	; 0x434c <bootmagic_scan_keycode>
    458e:	81 11       	cpse	r24, r1
    4590:	c0 62       	ori	r28, 0x20	; 32
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
    4592:	83 e2       	ldi	r24, 0x23	; 35
    4594:	0e 94 a6 21 	call	0x434c	; 0x434c <bootmagic_scan_keycode>
    4598:	81 11       	cpse	r24, r1
    459a:	c0 64       	ori	r28, 0x40	; 64
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
    459c:	84 e2       	ldi	r24, 0x24	; 36
    459e:	0e 94 a6 21 	call	0x434c	; 0x434c <bootmagic_scan_keycode>
    45a2:	88 23       	and	r24, r24
    45a4:	11 f0       	breq	.+4      	; 0x45aa <bootmagic+0x242>
    45a6:	c0 68       	ori	r28, 0x80	; 128
    45a8:	02 c0       	rjmp	.+4      	; 0x45ae <bootmagic+0x246>
    if (default_layer) {
    45aa:	cc 23       	and	r28, r28
    45ac:	29 f0       	breq	.+10     	; 0x45b8 <bootmagic+0x250>
        eeconfig_write_default_layer(default_layer);
    45ae:	8c 2f       	mov	r24, r28
    45b0:	0e 94 19 23 	call	0x4632	; 0x4632 <eeconfig_write_default_layer>
        default_layer_set((uint32_t)default_layer);
    45b4:	6c 2f       	mov	r22, r28
    45b6:	03 c0       	rjmp	.+6      	; 0x45be <bootmagic+0x256>
    } else {
        default_layer = eeconfig_read_default_layer();
    45b8:	0e 94 15 23 	call	0x462a	; 0x462a <eeconfig_read_default_layer>
        default_layer_set((uint32_t)default_layer);
    45bc:	68 2f       	mov	r22, r24
    45be:	70 e0       	ldi	r23, 0x00	; 0
    45c0:	80 e0       	ldi	r24, 0x00	; 0
    45c2:	90 e0       	ldi	r25, 0x00	; 0
    }
}
    45c4:	cf 91       	pop	r28
    if (default_layer) {
        eeconfig_write_default_layer(default_layer);
        default_layer_set((uint32_t)default_layer);
    } else {
        default_layer = eeconfig_read_default_layer();
        default_layer_set((uint32_t)default_layer);
    45c6:	0c 94 7b 1c 	jmp	0x38f6	; 0x38f6 <default_layer_set>
    }
}
    45ca:	cf 91       	pop	r28
    45cc:	08 95       	ret

000045ce <eeconfig_init>:
#include <avr/eeprom.h>
#include "eeconfig.h"

void eeconfig_init(void)
{
    eeprom_write_word(EECONFIG_MAGIC,          EECONFIG_MAGIC_NUMBER);
    45ce:	6d ee       	ldi	r22, 0xED	; 237
    45d0:	7e ef       	ldi	r23, 0xFE	; 254
    45d2:	80 e0       	ldi	r24, 0x00	; 0
    45d4:	90 e0       	ldi	r25, 0x00	; 0
    45d6:	0e 94 de 2d 	call	0x5bbc	; 0x5bbc <__eewr_word_m32u4>
    eeprom_write_byte(EECONFIG_DEBUG,          0);
    45da:	60 e0       	ldi	r22, 0x00	; 0
    45dc:	82 e0       	ldi	r24, 0x02	; 2
    45de:	90 e0       	ldi	r25, 0x00	; 0
    45e0:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <__eewr_byte_m32u4>
    eeprom_write_byte(EECONFIG_DEFAULT_LAYER,  0);
    45e4:	60 e0       	ldi	r22, 0x00	; 0
    45e6:	83 e0       	ldi	r24, 0x03	; 3
    45e8:	90 e0       	ldi	r25, 0x00	; 0
    45ea:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <__eewr_byte_m32u4>
    eeprom_write_byte(EECONFIG_KEYMAP,         0);
    45ee:	60 e0       	ldi	r22, 0x00	; 0
    45f0:	84 e0       	ldi	r24, 0x04	; 4
    45f2:	90 e0       	ldi	r25, 0x00	; 0
    45f4:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <__eewr_byte_m32u4>
    eeprom_write_byte(EECONFIG_MOUSEKEY_ACCEL, 0);
    45f8:	60 e0       	ldi	r22, 0x00	; 0
    45fa:	85 e0       	ldi	r24, 0x05	; 5
    45fc:	90 e0       	ldi	r25, 0x00	; 0
    45fe:	0c 94 d0 2d 	jmp	0x5ba0	; 0x5ba0 <__eewr_byte_m32u4>

00004602 <eeconfig_is_enabled>:
    eeprom_write_word(EECONFIG_MAGIC, 0xFFFF);
}

bool eeconfig_is_enabled(void)
{
    return (eeprom_read_word(EECONFIG_MAGIC) == EECONFIG_MAGIC_NUMBER);
    4602:	80 e0       	ldi	r24, 0x00	; 0
    4604:	90 e0       	ldi	r25, 0x00	; 0
    4606:	0e 94 ca 2d 	call	0x5b94	; 0x5b94 <__eerd_word_m32u4>
    460a:	21 e0       	ldi	r18, 0x01	; 1
    460c:	8d 3e       	cpi	r24, 0xED	; 237
    460e:	9e 4f       	sbci	r25, 0xFE	; 254
    4610:	09 f0       	breq	.+2      	; 0x4614 <eeconfig_is_enabled+0x12>
    4612:	20 e0       	ldi	r18, 0x00	; 0
}
    4614:	82 2f       	mov	r24, r18
    4616:	08 95       	ret

00004618 <eeconfig_read_debug>:

uint8_t eeconfig_read_debug(void)      { return eeprom_read_byte(EECONFIG_DEBUG); }
    4618:	82 e0       	ldi	r24, 0x02	; 2
    461a:	90 e0       	ldi	r25, 0x00	; 0
    461c:	0c 94 c2 2d 	jmp	0x5b84	; 0x5b84 <__eerd_byte_m32u4>

00004620 <eeconfig_write_debug>:
void eeconfig_write_debug(uint8_t val) { eeprom_write_byte(EECONFIG_DEBUG, val); }
    4620:	68 2f       	mov	r22, r24
    4622:	82 e0       	ldi	r24, 0x02	; 2
    4624:	90 e0       	ldi	r25, 0x00	; 0
    4626:	0c 94 d0 2d 	jmp	0x5ba0	; 0x5ba0 <__eewr_byte_m32u4>

0000462a <eeconfig_read_default_layer>:

uint8_t eeconfig_read_default_layer(void)      { return eeprom_read_byte(EECONFIG_DEFAULT_LAYER); }
    462a:	83 e0       	ldi	r24, 0x03	; 3
    462c:	90 e0       	ldi	r25, 0x00	; 0
    462e:	0c 94 c2 2d 	jmp	0x5b84	; 0x5b84 <__eerd_byte_m32u4>

00004632 <eeconfig_write_default_layer>:
void eeconfig_write_default_layer(uint8_t val) { eeprom_write_byte(EECONFIG_DEFAULT_LAYER, val); }
    4632:	68 2f       	mov	r22, r24
    4634:	83 e0       	ldi	r24, 0x03	; 3
    4636:	90 e0       	ldi	r25, 0x00	; 0
    4638:	0c 94 d0 2d 	jmp	0x5ba0	; 0x5ba0 <__eewr_byte_m32u4>

0000463c <eeconfig_read_keymap>:

uint8_t eeconfig_read_keymap(void)      { return eeprom_read_byte(EECONFIG_KEYMAP); }
    463c:	84 e0       	ldi	r24, 0x04	; 4
    463e:	90 e0       	ldi	r25, 0x00	; 0
    4640:	0c 94 c2 2d 	jmp	0x5b84	; 0x5b84 <__eerd_byte_m32u4>

00004644 <eeconfig_write_keymap>:
void eeconfig_write_keymap(uint8_t val) { eeprom_write_byte(EECONFIG_KEYMAP, val); }
    4644:	68 2f       	mov	r22, r24
    4646:	84 e0       	ldi	r24, 0x04	; 4
    4648:	90 e0       	ldi	r25, 0x00	; 0
    464a:	0c 94 d0 2d 	jmp	0x5ba0	; 0x5ba0 <__eewr_byte_m32u4>

0000464e <move_unit>:


static uint8_t move_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    464e:	80 91 cd 01 	lds	r24, 0x01CD
    4652:	80 ff       	sbrs	r24, 0
    4654:	0b c0       	rjmp	.+22     	; 0x466c <move_unit+0x1e>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/4;
    4656:	60 91 12 01 	lds	r22, 0x0112
    465a:	85 e0       	ldi	r24, 0x05	; 5
    465c:	68 9f       	mul	r22, r24
    465e:	b0 01       	movw	r22, r0
    4660:	11 24       	eor	r1, r1
    4662:	75 95       	asr	r23
    4664:	67 95       	ror	r22
    4666:	75 95       	asr	r23
    4668:	67 95       	ror	r22
    466a:	2a c0       	rjmp	.+84     	; 0x46c0 <move_unit+0x72>
    } else if (mousekey_accel & (1<<1)) {
    466c:	81 ff       	sbrs	r24, 1
    466e:	09 c0       	rjmp	.+18     	; 0x4682 <move_unit+0x34>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    4670:	60 91 12 01 	lds	r22, 0x0112
    4674:	85 e0       	ldi	r24, 0x05	; 5
    4676:	68 9f       	mul	r22, r24
    4678:	b0 01       	movw	r22, r0
    467a:	11 24       	eor	r1, r1
    467c:	75 95       	asr	r23
    467e:	67 95       	ror	r22
    4680:	1f c0       	rjmp	.+62     	; 0x46c0 <move_unit+0x72>
    } else if (mousekey_accel & (1<<2)) {
    4682:	82 ff       	sbrs	r24, 2
    4684:	07 c0       	rjmp	.+14     	; 0x4694 <move_unit+0x46>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    4686:	60 91 12 01 	lds	r22, 0x0112
    468a:	85 e0       	ldi	r24, 0x05	; 5
    468c:	68 9f       	mul	r22, r24
    468e:	b0 01       	movw	r22, r0
    4690:	11 24       	eor	r1, r1
    4692:	16 c0       	rjmp	.+44     	; 0x46c0 <move_unit+0x72>
    } else if (mousekey_repeat == 0) {
    4694:	40 91 ce 01 	lds	r20, 0x01CE
    4698:	44 23       	and	r20, r20
    469a:	c9 f0       	breq	.+50     	; 0x46ce <move_unit+0x80>
        unit = MOUSEKEY_MOVE_DELTA;
    } else if (mousekey_repeat >= mk_time_to_max) {
    469c:	60 91 11 01 	lds	r22, 0x0111
    46a0:	46 17       	cp	r20, r22
    46a2:	88 f7       	brcc	.-30     	; 0x4686 <move_unit+0x38>
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    46a4:	20 91 12 01 	lds	r18, 0x0112
    46a8:	85 e0       	ldi	r24, 0x05	; 5
    46aa:	28 9f       	mul	r18, r24
    46ac:	90 01       	movw	r18, r0
    46ae:	11 24       	eor	r1, r1
    46b0:	42 9f       	mul	r20, r18
    46b2:	c0 01       	movw	r24, r0
    46b4:	43 9f       	mul	r20, r19
    46b6:	90 0d       	add	r25, r0
    46b8:	11 24       	eor	r1, r1
    46ba:	70 e0       	ldi	r23, 0x00	; 0
    46bc:	0e 94 94 2d 	call	0x5b28	; 0x5b28 <__divmodhi4>
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    46c0:	60 38       	cpi	r22, 0x80	; 128
    46c2:	71 05       	cpc	r23, r1
    46c4:	40 f4       	brcc	.+16     	; 0x46d6 <move_unit+0x88>
    46c6:	61 15       	cp	r22, r1
    46c8:	71 05       	cpc	r23, r1
    46ca:	39 f0       	breq	.+14     	; 0x46da <move_unit+0x8c>
    46cc:	02 c0       	rjmp	.+4      	; 0x46d2 <move_unit+0x84>
    } else if (mousekey_accel & (1<<1)) {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    } else if (mousekey_accel & (1<<2)) {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    } else if (mousekey_repeat == 0) {
        unit = MOUSEKEY_MOVE_DELTA;
    46ce:	65 e0       	ldi	r22, 0x05	; 5
    46d0:	70 e0       	ldi	r23, 0x00	; 0
    } else if (mousekey_repeat >= mk_time_to_max) {
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    46d2:	86 2f       	mov	r24, r22
    46d4:	08 95       	ret
    46d6:	8f e7       	ldi	r24, 0x7F	; 127
    46d8:	08 95       	ret
    46da:	81 e0       	ldi	r24, 0x01	; 1
}
    46dc:	08 95       	ret

000046de <wheel_unit>:

static uint8_t wheel_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    46de:	80 91 cd 01 	lds	r24, 0x01CD
    46e2:	80 ff       	sbrs	r24, 0
    46e4:	08 c0       	rjmp	.+16     	; 0x46f6 <wheel_unit+0x18>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/4;
    46e6:	60 91 10 01 	lds	r22, 0x0110
    46ea:	70 e0       	ldi	r23, 0x00	; 0
    46ec:	75 95       	asr	r23
    46ee:	67 95       	ror	r22
    46f0:	75 95       	asr	r23
    46f2:	67 95       	ror	r22
    46f4:	21 c0       	rjmp	.+66     	; 0x4738 <wheel_unit+0x5a>
    } else if (mousekey_accel & (1<<1)) {
    46f6:	81 ff       	sbrs	r24, 1
    46f8:	06 c0       	rjmp	.+12     	; 0x4706 <wheel_unit+0x28>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    46fa:	60 91 10 01 	lds	r22, 0x0110
    46fe:	70 e0       	ldi	r23, 0x00	; 0
    4700:	75 95       	asr	r23
    4702:	67 95       	ror	r22
    4704:	19 c0       	rjmp	.+50     	; 0x4738 <wheel_unit+0x5a>
    } else if (mousekey_accel & (1<<2)) {
    4706:	82 ff       	sbrs	r24, 2
    4708:	04 c0       	rjmp	.+8      	; 0x4712 <wheel_unit+0x34>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    470a:	60 91 10 01 	lds	r22, 0x0110
    470e:	70 e0       	ldi	r23, 0x00	; 0
    4710:	10 c0       	rjmp	.+32     	; 0x4732 <wheel_unit+0x54>
    } else if (mousekey_repeat == 0) {
    4712:	80 91 ce 01 	lds	r24, 0x01CE
    4716:	88 23       	and	r24, r24
    4718:	c1 f0       	breq	.+48     	; 0x474a <wheel_unit+0x6c>
        unit = MOUSEKEY_WHEEL_DELTA;
    } else if (mousekey_repeat >= mk_wheel_time_to_max) {
    471a:	60 91 0f 01 	lds	r22, 0x010F
    471e:	86 17       	cp	r24, r22
    4720:	a0 f7       	brcc	.-24     	; 0x470a <wheel_unit+0x2c>
        unit = MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed;
    } else {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed * mousekey_repeat) / mk_wheel_time_to_max;
    4722:	90 91 10 01 	lds	r25, 0x0110
    4726:	98 9f       	mul	r25, r24
    4728:	c0 01       	movw	r24, r0
    472a:	11 24       	eor	r1, r1
    472c:	70 e0       	ldi	r23, 0x00	; 0
    472e:	0e 94 94 2d 	call	0x5b28	; 0x5b28 <__divmodhi4>
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
    4732:	60 38       	cpi	r22, 0x80	; 128
    4734:	71 05       	cpc	r23, r1
    4736:	28 f4       	brcc	.+10     	; 0x4742 <wheel_unit+0x64>
    4738:	61 15       	cp	r22, r1
    473a:	71 05       	cpc	r23, r1
    473c:	21 f0       	breq	.+8      	; 0x4746 <wheel_unit+0x68>
    473e:	86 2f       	mov	r24, r22
    4740:	08 95       	ret
    4742:	8f e7       	ldi	r24, 0x7F	; 127
    4744:	08 95       	ret
    4746:	81 e0       	ldi	r24, 0x01	; 1
    4748:	08 95       	ret
    } else if (mousekey_accel & (1<<1)) {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    } else if (mousekey_accel & (1<<2)) {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    } else if (mousekey_repeat == 0) {
        unit = MOUSEKEY_WHEEL_DELTA;
    474a:	61 e0       	ldi	r22, 0x01	; 1
    474c:	70 e0       	ldi	r23, 0x00	; 0
    474e:	f4 cf       	rjmp	.-24     	; 0x4738 <wheel_unit+0x5a>

00004750 <mousekey_on>:
    mousekey_send();
}

void mousekey_on(uint8_t code)
{
    if      (code == KC_MS_UP)       mouse_report.y = move_unit() * -1;
    4750:	80 3f       	cpi	r24, 0xF0	; 240
    4752:	21 f4       	brne	.+8      	; 0x475c <mousekey_on+0xc>
    4754:	0e 94 27 23 	call	0x464e	; 0x464e <move_unit>
    4758:	81 95       	neg	r24
    475a:	04 c0       	rjmp	.+8      	; 0x4764 <mousekey_on+0x14>
    else if (code == KC_MS_DOWN)     mouse_report.y = move_unit();
    475c:	81 3f       	cpi	r24, 0xF1	; 241
    475e:	29 f4       	brne	.+10     	; 0x476a <mousekey_on+0x1a>
    4760:	0e 94 27 23 	call	0x464e	; 0x464e <move_unit>
    4764:	80 93 d1 01 	sts	0x01D1, r24
    4768:	08 95       	ret
    else if (code == KC_MS_LEFT)     mouse_report.x = move_unit() * -1;
    476a:	82 3f       	cpi	r24, 0xF2	; 242
    476c:	21 f4       	brne	.+8      	; 0x4776 <mousekey_on+0x26>
    476e:	0e 94 27 23 	call	0x464e	; 0x464e <move_unit>
    4772:	81 95       	neg	r24
    4774:	04 c0       	rjmp	.+8      	; 0x477e <mousekey_on+0x2e>
    else if (code == KC_MS_RIGHT)    mouse_report.x = move_unit();
    4776:	83 3f       	cpi	r24, 0xF3	; 243
    4778:	29 f4       	brne	.+10     	; 0x4784 <mousekey_on+0x34>
    477a:	0e 94 27 23 	call	0x464e	; 0x464e <move_unit>
    477e:	80 93 d0 01 	sts	0x01D0, r24
    4782:	08 95       	ret
    else if (code == KC_MS_WH_UP)    mouse_report.v = wheel_unit();
    4784:	89 3f       	cpi	r24, 0xF9	; 249
    4786:	19 f4       	brne	.+6      	; 0x478e <mousekey_on+0x3e>
    4788:	0e 94 6f 23 	call	0x46de	; 0x46de <wheel_unit>
    478c:	05 c0       	rjmp	.+10     	; 0x4798 <mousekey_on+0x48>
    else if (code == KC_MS_WH_DOWN)  mouse_report.v = wheel_unit() * -1;
    478e:	8a 3f       	cpi	r24, 0xFA	; 250
    4790:	31 f4       	brne	.+12     	; 0x479e <mousekey_on+0x4e>
    4792:	0e 94 6f 23 	call	0x46de	; 0x46de <wheel_unit>
    4796:	81 95       	neg	r24
    4798:	80 93 d2 01 	sts	0x01D2, r24
    479c:	08 95       	ret
    else if (code == KC_MS_WH_LEFT)  mouse_report.h = wheel_unit() * -1;
    479e:	8b 3f       	cpi	r24, 0xFB	; 251
    47a0:	21 f4       	brne	.+8      	; 0x47aa <mousekey_on+0x5a>
    47a2:	0e 94 6f 23 	call	0x46de	; 0x46de <wheel_unit>
    47a6:	81 95       	neg	r24
    47a8:	04 c0       	rjmp	.+8      	; 0x47b2 <mousekey_on+0x62>
    else if (code == KC_MS_WH_RIGHT) mouse_report.h = wheel_unit();
    47aa:	8c 3f       	cpi	r24, 0xFC	; 252
    47ac:	29 f4       	brne	.+10     	; 0x47b8 <mousekey_on+0x68>
    47ae:	0e 94 6f 23 	call	0x46de	; 0x46de <wheel_unit>
    47b2:	80 93 d3 01 	sts	0x01D3, r24
    47b6:	08 95       	ret
    else if (code == KC_MS_BTN1)     mouse_report.buttons |= MOUSE_BTN1;
    47b8:	84 3f       	cpi	r24, 0xF4	; 244
    47ba:	21 f4       	brne	.+8      	; 0x47c4 <mousekey_on+0x74>
    47bc:	80 91 cf 01 	lds	r24, 0x01CF
    47c0:	81 60       	ori	r24, 0x01	; 1
    47c2:	17 c0       	rjmp	.+46     	; 0x47f2 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN2)     mouse_report.buttons |= MOUSE_BTN2;
    47c4:	85 3f       	cpi	r24, 0xF5	; 245
    47c6:	21 f4       	brne	.+8      	; 0x47d0 <mousekey_on+0x80>
    47c8:	80 91 cf 01 	lds	r24, 0x01CF
    47cc:	82 60       	ori	r24, 0x02	; 2
    47ce:	11 c0       	rjmp	.+34     	; 0x47f2 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN3)     mouse_report.buttons |= MOUSE_BTN3;
    47d0:	86 3f       	cpi	r24, 0xF6	; 246
    47d2:	21 f4       	brne	.+8      	; 0x47dc <mousekey_on+0x8c>
    47d4:	80 91 cf 01 	lds	r24, 0x01CF
    47d8:	84 60       	ori	r24, 0x04	; 4
    47da:	0b c0       	rjmp	.+22     	; 0x47f2 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN4)     mouse_report.buttons |= MOUSE_BTN4;
    47dc:	87 3f       	cpi	r24, 0xF7	; 247
    47de:	21 f4       	brne	.+8      	; 0x47e8 <mousekey_on+0x98>
    47e0:	80 91 cf 01 	lds	r24, 0x01CF
    47e4:	88 60       	ori	r24, 0x08	; 8
    47e6:	05 c0       	rjmp	.+10     	; 0x47f2 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN5)     mouse_report.buttons |= MOUSE_BTN5;
    47e8:	88 3f       	cpi	r24, 0xF8	; 248
    47ea:	31 f4       	brne	.+12     	; 0x47f8 <mousekey_on+0xa8>
    47ec:	80 91 cf 01 	lds	r24, 0x01CF
    47f0:	80 61       	ori	r24, 0x10	; 16
    47f2:	80 93 cf 01 	sts	0x01CF, r24
    47f6:	08 95       	ret
    else if (code == KC_MS_ACCEL0)   mousekey_accel |= (1<<0);
    47f8:	8d 3f       	cpi	r24, 0xFD	; 253
    47fa:	21 f4       	brne	.+8      	; 0x4804 <mousekey_on+0xb4>
    47fc:	80 91 cd 01 	lds	r24, 0x01CD
    4800:	81 60       	ori	r24, 0x01	; 1
    4802:	0b c0       	rjmp	.+22     	; 0x481a <mousekey_on+0xca>
    else if (code == KC_MS_ACCEL1)   mousekey_accel |= (1<<1);
    4804:	8e 3f       	cpi	r24, 0xFE	; 254
    4806:	21 f4       	brne	.+8      	; 0x4810 <mousekey_on+0xc0>
    4808:	80 91 cd 01 	lds	r24, 0x01CD
    480c:	82 60       	ori	r24, 0x02	; 2
    480e:	05 c0       	rjmp	.+10     	; 0x481a <mousekey_on+0xca>
    else if (code == KC_MS_ACCEL2)   mousekey_accel |= (1<<2);
    4810:	8f 3f       	cpi	r24, 0xFF	; 255
    4812:	29 f4       	brne	.+10     	; 0x481e <mousekey_on+0xce>
    4814:	80 91 cd 01 	lds	r24, 0x01CD
    4818:	84 60       	ori	r24, 0x04	; 4
    481a:	80 93 cd 01 	sts	0x01CD, r24
    481e:	08 95       	ret

00004820 <mousekey_off>:
}

void mousekey_off(uint8_t code)
{
    if      (code == KC_MS_UP       && mouse_report.y < 0) mouse_report.y = 0;
    4820:	80 3f       	cpi	r24, 0xF0	; 240
    4822:	39 f4       	brne	.+14     	; 0x4832 <mousekey_off+0x12>
    4824:	80 91 d1 01 	lds	r24, 0x01D1
    4828:	87 ff       	sbrs	r24, 7
    482a:	6c c0       	rjmp	.+216    	; 0x4904 <mousekey_off+0xe4>
    482c:	10 92 d1 01 	sts	0x01D1, r1
    4830:	69 c0       	rjmp	.+210    	; 0x4904 <mousekey_off+0xe4>
    else if (code == KC_MS_DOWN     && mouse_report.y > 0) mouse_report.y = 0;
    4832:	81 3f       	cpi	r24, 0xF1	; 241
    4834:	29 f4       	brne	.+10     	; 0x4840 <mousekey_off+0x20>
    4836:	80 91 d1 01 	lds	r24, 0x01D1
    483a:	18 16       	cp	r1, r24
    483c:	bc f3       	brlt	.-18     	; 0x482c <mousekey_off+0xc>
    483e:	62 c0       	rjmp	.+196    	; 0x4904 <mousekey_off+0xe4>
    4840:	90 91 d0 01 	lds	r25, 0x01D0
    else if (code == KC_MS_LEFT     && mouse_report.x < 0) mouse_report.x = 0;
    4844:	82 3f       	cpi	r24, 0xF2	; 242
    4846:	29 f4       	brne	.+10     	; 0x4852 <mousekey_off+0x32>
    4848:	97 ff       	sbrs	r25, 7
    484a:	5c c0       	rjmp	.+184    	; 0x4904 <mousekey_off+0xe4>
    484c:	10 92 d0 01 	sts	0x01D0, r1
    4850:	59 c0       	rjmp	.+178    	; 0x4904 <mousekey_off+0xe4>
    else if (code == KC_MS_RIGHT    && mouse_report.x > 0) mouse_report.x = 0;
    4852:	83 3f       	cpi	r24, 0xF3	; 243
    4854:	19 f4       	brne	.+6      	; 0x485c <mousekey_off+0x3c>
    4856:	19 16       	cp	r1, r25
    4858:	cc f3       	brlt	.-14     	; 0x484c <mousekey_off+0x2c>
    485a:	54 c0       	rjmp	.+168    	; 0x4904 <mousekey_off+0xe4>
    else if (code == KC_MS_WH_UP    && mouse_report.v > 0) mouse_report.v = 0;
    485c:	89 3f       	cpi	r24, 0xF9	; 249
    485e:	41 f4       	brne	.+16     	; 0x4870 <mousekey_off+0x50>
    4860:	80 91 d2 01 	lds	r24, 0x01D2
    4864:	18 16       	cp	r1, r24
    4866:	0c f0       	brlt	.+2      	; 0x486a <mousekey_off+0x4a>
    4868:	4d c0       	rjmp	.+154    	; 0x4904 <mousekey_off+0xe4>
    486a:	10 92 d2 01 	sts	0x01D2, r1
    486e:	4a c0       	rjmp	.+148    	; 0x4904 <mousekey_off+0xe4>
    else if (code == KC_MS_WH_DOWN  && mouse_report.v < 0) mouse_report.v = 0;
    4870:	8a 3f       	cpi	r24, 0xFA	; 250
    4872:	29 f4       	brne	.+10     	; 0x487e <mousekey_off+0x5e>
    4874:	80 91 d2 01 	lds	r24, 0x01D2
    4878:	87 ff       	sbrs	r24, 7
    487a:	44 c0       	rjmp	.+136    	; 0x4904 <mousekey_off+0xe4>
    487c:	f6 cf       	rjmp	.-20     	; 0x486a <mousekey_off+0x4a>
    else if (code == KC_MS_WH_LEFT  && mouse_report.h < 0) mouse_report.h = 0;
    487e:	8b 3f       	cpi	r24, 0xFB	; 251
    4880:	39 f4       	brne	.+14     	; 0x4890 <mousekey_off+0x70>
    4882:	80 91 d3 01 	lds	r24, 0x01D3
    4886:	87 ff       	sbrs	r24, 7
    4888:	3d c0       	rjmp	.+122    	; 0x4904 <mousekey_off+0xe4>
    488a:	10 92 d3 01 	sts	0x01D3, r1
    488e:	3a c0       	rjmp	.+116    	; 0x4904 <mousekey_off+0xe4>
    else if (code == KC_MS_WH_RIGHT && mouse_report.h > 0) mouse_report.h = 0;
    4890:	8c 3f       	cpi	r24, 0xFC	; 252
    4892:	29 f4       	brne	.+10     	; 0x489e <mousekey_off+0x7e>
    4894:	80 91 d3 01 	lds	r24, 0x01D3
    4898:	18 16       	cp	r1, r24
    489a:	bc f3       	brlt	.-18     	; 0x488a <mousekey_off+0x6a>
    489c:	33 c0       	rjmp	.+102    	; 0x4904 <mousekey_off+0xe4>
    else if (code == KC_MS_BTN1) mouse_report.buttons &= ~MOUSE_BTN1;
    489e:	84 3f       	cpi	r24, 0xF4	; 244
    48a0:	21 f4       	brne	.+8      	; 0x48aa <mousekey_off+0x8a>
    48a2:	80 91 cf 01 	lds	r24, 0x01CF
    48a6:	8e 7f       	andi	r24, 0xFE	; 254
    48a8:	17 c0       	rjmp	.+46     	; 0x48d8 <mousekey_off+0xb8>
    else if (code == KC_MS_BTN2) mouse_report.buttons &= ~MOUSE_BTN2;
    48aa:	85 3f       	cpi	r24, 0xF5	; 245
    48ac:	21 f4       	brne	.+8      	; 0x48b6 <mousekey_off+0x96>
    48ae:	80 91 cf 01 	lds	r24, 0x01CF
    48b2:	8d 7f       	andi	r24, 0xFD	; 253
    48b4:	11 c0       	rjmp	.+34     	; 0x48d8 <mousekey_off+0xb8>
    else if (code == KC_MS_BTN3) mouse_report.buttons &= ~MOUSE_BTN3;
    48b6:	86 3f       	cpi	r24, 0xF6	; 246
    48b8:	21 f4       	brne	.+8      	; 0x48c2 <mousekey_off+0xa2>
    48ba:	80 91 cf 01 	lds	r24, 0x01CF
    48be:	8b 7f       	andi	r24, 0xFB	; 251
    48c0:	0b c0       	rjmp	.+22     	; 0x48d8 <mousekey_off+0xb8>
    else if (code == KC_MS_BTN4) mouse_report.buttons &= ~MOUSE_BTN4;
    48c2:	87 3f       	cpi	r24, 0xF7	; 247
    48c4:	21 f4       	brne	.+8      	; 0x48ce <mousekey_off+0xae>
    48c6:	80 91 cf 01 	lds	r24, 0x01CF
    48ca:	87 7f       	andi	r24, 0xF7	; 247
    48cc:	05 c0       	rjmp	.+10     	; 0x48d8 <mousekey_off+0xb8>
    else if (code == KC_MS_BTN5) mouse_report.buttons &= ~MOUSE_BTN5;
    48ce:	88 3f       	cpi	r24, 0xF8	; 248
    48d0:	31 f4       	brne	.+12     	; 0x48de <mousekey_off+0xbe>
    48d2:	80 91 cf 01 	lds	r24, 0x01CF
    48d6:	8f 7e       	andi	r24, 0xEF	; 239
    48d8:	80 93 cf 01 	sts	0x01CF, r24
    48dc:	13 c0       	rjmp	.+38     	; 0x4904 <mousekey_off+0xe4>
    else if (code == KC_MS_ACCEL0) mousekey_accel &= ~(1<<0);
    48de:	8d 3f       	cpi	r24, 0xFD	; 253
    48e0:	21 f4       	brne	.+8      	; 0x48ea <mousekey_off+0xca>
    48e2:	80 91 cd 01 	lds	r24, 0x01CD
    48e6:	8e 7f       	andi	r24, 0xFE	; 254
    48e8:	0b c0       	rjmp	.+22     	; 0x4900 <mousekey_off+0xe0>
    else if (code == KC_MS_ACCEL1) mousekey_accel &= ~(1<<1);
    48ea:	8e 3f       	cpi	r24, 0xFE	; 254
    48ec:	21 f4       	brne	.+8      	; 0x48f6 <mousekey_off+0xd6>
    48ee:	80 91 cd 01 	lds	r24, 0x01CD
    48f2:	8d 7f       	andi	r24, 0xFD	; 253
    48f4:	05 c0       	rjmp	.+10     	; 0x4900 <mousekey_off+0xe0>
    else if (code == KC_MS_ACCEL2) mousekey_accel &= ~(1<<2);
    48f6:	8f 3f       	cpi	r24, 0xFF	; 255
    48f8:	29 f4       	brne	.+10     	; 0x4904 <mousekey_off+0xe4>
    48fa:	80 91 cd 01 	lds	r24, 0x01CD
    48fe:	8b 7f       	andi	r24, 0xFB	; 251
    4900:	80 93 cd 01 	sts	0x01CD, r24

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    4904:	80 91 d0 01 	lds	r24, 0x01D0
    4908:	81 11       	cpse	r24, r1
    490a:	0e c0       	rjmp	.+28     	; 0x4928 <mousekey_off+0x108>
    490c:	80 91 d1 01 	lds	r24, 0x01D1
    4910:	81 11       	cpse	r24, r1
    4912:	0a c0       	rjmp	.+20     	; 0x4928 <mousekey_off+0x108>
    4914:	80 91 d2 01 	lds	r24, 0x01D2
    4918:	81 11       	cpse	r24, r1
    491a:	06 c0       	rjmp	.+12     	; 0x4928 <mousekey_off+0x108>
    491c:	80 91 d3 01 	lds	r24, 0x01D3
    4920:	81 11       	cpse	r24, r1
    4922:	02 c0       	rjmp	.+4      	; 0x4928 <mousekey_off+0x108>
        mousekey_repeat = 0;
    4924:	10 92 ce 01 	sts	0x01CE, r1
    4928:	08 95       	ret

0000492a <mousekey_send>:
    mousekey_accel = 0;
}

static void mousekey_debug(void)
{
    if (!debug_mouse) return;
    492a:	80 91 c3 01 	lds	r24, 0x01C3
    492e:	83 ff       	sbrs	r24, 3
    4930:	7e c0       	rjmp	.+252    	; 0x4a2e <mousekey_send+0x104>
    print("mousekey [btn|x y v h](rep/acl): [");
    4932:	87 e9       	ldi	r24, 0x97	; 151
    4934:	95 e0       	ldi	r25, 0x05	; 5
    4936:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    phex(mouse_report.buttons); print("|");
    493a:	80 91 cf 01 	lds	r24, 0x01CF
    493e:	1f 92       	push	r1
    4940:	8f 93       	push	r24
    4942:	82 e9       	ldi	r24, 0x92	; 146
    4944:	95 e0       	ldi	r25, 0x05	; 5
    4946:	9f 93       	push	r25
    4948:	8f 93       	push	r24
    494a:	0e 94 1e 09 	call	0x123c	; 0x123c <__xprintf>
    494e:	80 e9       	ldi	r24, 0x90	; 144
    4950:	95 e0       	ldi	r25, 0x05	; 5
    4952:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    print_decs(mouse_report.x); print(" ");
    4956:	20 91 d0 01 	lds	r18, 0x01D0
    495a:	82 2f       	mov	r24, r18
    495c:	99 27       	eor	r25, r25
    495e:	87 fd       	sbrc	r24, 7
    4960:	90 95       	com	r25
    4962:	9f 93       	push	r25
    4964:	2f 93       	push	r18
    4966:	8d e8       	ldi	r24, 0x8D	; 141
    4968:	95 e0       	ldi	r25, 0x05	; 5
    496a:	9f 93       	push	r25
    496c:	8f 93       	push	r24
    496e:	0e 94 1e 09 	call	0x123c	; 0x123c <__xprintf>
    4972:	8b e8       	ldi	r24, 0x8B	; 139
    4974:	95 e0       	ldi	r25, 0x05	; 5
    4976:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    print_decs(mouse_report.y); print(" ");
    497a:	20 91 d1 01 	lds	r18, 0x01D1
    497e:	82 2f       	mov	r24, r18
    4980:	99 27       	eor	r25, r25
    4982:	87 fd       	sbrc	r24, 7
    4984:	90 95       	com	r25
    4986:	9f 93       	push	r25
    4988:	2f 93       	push	r18
    498a:	88 e8       	ldi	r24, 0x88	; 136
    498c:	95 e0       	ldi	r25, 0x05	; 5
    498e:	9f 93       	push	r25
    4990:	8f 93       	push	r24
    4992:	0e 94 1e 09 	call	0x123c	; 0x123c <__xprintf>
    4996:	86 e8       	ldi	r24, 0x86	; 134
    4998:	95 e0       	ldi	r25, 0x05	; 5
    499a:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    print_decs(mouse_report.v); print(" ");
    499e:	20 91 d2 01 	lds	r18, 0x01D2
    49a2:	82 2f       	mov	r24, r18
    49a4:	99 27       	eor	r25, r25
    49a6:	87 fd       	sbrc	r24, 7
    49a8:	90 95       	com	r25
    49aa:	9f 93       	push	r25
    49ac:	2f 93       	push	r18
    49ae:	83 e8       	ldi	r24, 0x83	; 131
    49b0:	95 e0       	ldi	r25, 0x05	; 5
    49b2:	9f 93       	push	r25
    49b4:	8f 93       	push	r24
    49b6:	0e 94 1e 09 	call	0x123c	; 0x123c <__xprintf>
    49ba:	81 e8       	ldi	r24, 0x81	; 129
    49bc:	95 e0       	ldi	r25, 0x05	; 5
    49be:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    print_decs(mouse_report.h); print("](");
    49c2:	20 91 d3 01 	lds	r18, 0x01D3
    49c6:	82 2f       	mov	r24, r18
    49c8:	99 27       	eor	r25, r25
    49ca:	87 fd       	sbrc	r24, 7
    49cc:	90 95       	com	r25
    49ce:	9f 93       	push	r25
    49d0:	2f 93       	push	r18
    49d2:	8e e7       	ldi	r24, 0x7E	; 126
    49d4:	95 e0       	ldi	r25, 0x05	; 5
    49d6:	9f 93       	push	r25
    49d8:	8f 93       	push	r24
    49da:	0e 94 1e 09 	call	0x123c	; 0x123c <__xprintf>
    49de:	8b e7       	ldi	r24, 0x7B	; 123
    49e0:	95 e0       	ldi	r25, 0x05	; 5
    49e2:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    print_dec(mousekey_repeat); print("/");
    49e6:	80 91 ce 01 	lds	r24, 0x01CE
    49ea:	1f 92       	push	r1
    49ec:	8f 93       	push	r24
    49ee:	88 e7       	ldi	r24, 0x78	; 120
    49f0:	95 e0       	ldi	r25, 0x05	; 5
    49f2:	9f 93       	push	r25
    49f4:	8f 93       	push	r24
    49f6:	0e 94 1e 09 	call	0x123c	; 0x123c <__xprintf>
    49fa:	86 e7       	ldi	r24, 0x76	; 118
    49fc:	95 e0       	ldi	r25, 0x05	; 5
    49fe:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    print_dec(mousekey_accel); print(")\n");
    4a02:	80 91 cd 01 	lds	r24, 0x01CD
    4a06:	1f 92       	push	r1
    4a08:	8f 93       	push	r24
    4a0a:	83 e7       	ldi	r24, 0x73	; 115
    4a0c:	95 e0       	ldi	r25, 0x05	; 5
    4a0e:	9f 93       	push	r25
    4a10:	8f 93       	push	r24
    4a12:	0e 94 1e 09 	call	0x123c	; 0x123c <__xprintf>
    4a16:	80 e7       	ldi	r24, 0x70	; 112
    4a18:	95 e0       	ldi	r25, 0x05	; 5
    4a1a:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    4a1e:	8d b7       	in	r24, 0x3d	; 61
    4a20:	9e b7       	in	r25, 0x3e	; 62
    4a22:	4c 96       	adiw	r24, 0x1c	; 28
    4a24:	0f b6       	in	r0, 0x3f	; 63
    4a26:	f8 94       	cli
    4a28:	9e bf       	out	0x3e, r25	; 62
    4a2a:	0f be       	out	0x3f, r0	; 63
    4a2c:	8d bf       	out	0x3d, r24	; 61
}

void mousekey_send(void)
{
    mousekey_debug();
    host_mouse_send(&mouse_report);
    4a2e:	8f ec       	ldi	r24, 0xCF	; 207
    4a30:	91 e0       	ldi	r25, 0x01	; 1
    4a32:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <host_mouse_send>
    last_timer = timer_read();
    4a36:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <timer_read>
    4a3a:	90 93 cc 01 	sts	0x01CC, r25
    4a3e:	80 93 cb 01 	sts	0x01CB, r24
    4a42:	08 95       	ret

00004a44 <mousekey_task>:
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
}

void mousekey_task(void)
{
    4a44:	1f 93       	push	r17
    4a46:	cf 93       	push	r28
    4a48:	df 93       	push	r29
    if (timer_elapsed(last_timer) < (mousekey_repeat ? mk_interval : mk_delay*10))
    4a4a:	80 91 cb 01 	lds	r24, 0x01CB
    4a4e:	90 91 cc 01 	lds	r25, 0x01CC
    4a52:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <timer_elapsed>
    4a56:	40 91 ce 01 	lds	r20, 0x01CE
    4a5a:	44 23       	and	r20, r20
    4a5c:	21 f0       	breq	.+8      	; 0x4a66 <mousekey_task+0x22>
    4a5e:	20 91 13 01 	lds	r18, 0x0113
    4a62:	30 e0       	ldi	r19, 0x00	; 0
    4a64:	06 c0       	rjmp	.+12     	; 0x4a72 <mousekey_task+0x2e>
    4a66:	20 91 14 01 	lds	r18, 0x0114
    4a6a:	5a e0       	ldi	r21, 0x0A	; 10
    4a6c:	25 9f       	mul	r18, r21
    4a6e:	90 01       	movw	r18, r0
    4a70:	11 24       	eor	r1, r1
    4a72:	82 17       	cp	r24, r18
    4a74:	93 07       	cpc	r25, r19
    4a76:	08 f4       	brcc	.+2      	; 0x4a7a <mousekey_task+0x36>
    4a78:	82 c0       	rjmp	.+260    	; 0x4b7e <mousekey_task+0x13a>
        return;

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    4a7a:	80 91 d0 01 	lds	r24, 0x01D0
    4a7e:	10 91 d1 01 	lds	r17, 0x01D1
    4a82:	d0 91 d2 01 	lds	r29, 0x01D2
    4a86:	c0 91 d3 01 	lds	r28, 0x01D3
    4a8a:	81 11       	cpse	r24, r1
    4a8c:	07 c0       	rjmp	.+14     	; 0x4a9c <mousekey_task+0x58>
    4a8e:	11 11       	cpse	r17, r1
    4a90:	05 c0       	rjmp	.+10     	; 0x4a9c <mousekey_task+0x58>
    4a92:	d1 11       	cpse	r29, r1
    4a94:	03 c0       	rjmp	.+6      	; 0x4a9c <mousekey_task+0x58>
    4a96:	cc 23       	and	r28, r28
    4a98:	09 f4       	brne	.+2      	; 0x4a9c <mousekey_task+0x58>
    4a9a:	71 c0       	rjmp	.+226    	; 0x4b7e <mousekey_task+0x13a>
        return;

    if (mousekey_repeat != UINT8_MAX)
    4a9c:	4f 3f       	cpi	r20, 0xFF	; 255
    4a9e:	19 f0       	breq	.+6      	; 0x4aa6 <mousekey_task+0x62>
        mousekey_repeat++;
    4aa0:	4f 5f       	subi	r20, 0xFF	; 255
    4aa2:	40 93 ce 01 	sts	0x01CE, r20


    if (mouse_report.x > 0) mouse_report.x = move_unit();
    4aa6:	18 16       	cp	r1, r24
    4aa8:	24 f4       	brge	.+8      	; 0x4ab2 <mousekey_task+0x6e>
    4aaa:	0e 94 27 23 	call	0x464e	; 0x464e <move_unit>
    4aae:	80 93 d0 01 	sts	0x01D0, r24
    if (mouse_report.x < 0) mouse_report.x = move_unit() * -1;
    4ab2:	80 91 d0 01 	lds	r24, 0x01D0
    4ab6:	87 ff       	sbrs	r24, 7
    4ab8:	05 c0       	rjmp	.+10     	; 0x4ac4 <mousekey_task+0x80>
    4aba:	0e 94 27 23 	call	0x464e	; 0x464e <move_unit>
    4abe:	81 95       	neg	r24
    4ac0:	80 93 d0 01 	sts	0x01D0, r24
    if (mouse_report.y > 0) mouse_report.y = move_unit();
    4ac4:	11 16       	cp	r1, r17
    4ac6:	24 f4       	brge	.+8      	; 0x4ad0 <mousekey_task+0x8c>
    4ac8:	0e 94 27 23 	call	0x464e	; 0x464e <move_unit>
    4acc:	80 93 d1 01 	sts	0x01D1, r24
    if (mouse_report.y < 0) mouse_report.y = move_unit() * -1;
    4ad0:	80 91 d1 01 	lds	r24, 0x01D1
    4ad4:	87 ff       	sbrs	r24, 7
    4ad6:	05 c0       	rjmp	.+10     	; 0x4ae2 <mousekey_task+0x9e>
    4ad8:	0e 94 27 23 	call	0x464e	; 0x464e <move_unit>
    4adc:	81 95       	neg	r24
    4ade:	80 93 d1 01 	sts	0x01D1, r24

    /* diagonal move [1/sqrt(2) = 0.7] */
    if (mouse_report.x && mouse_report.y) {
    4ae2:	60 91 d0 01 	lds	r22, 0x01D0
    4ae6:	66 23       	and	r22, r22
    4ae8:	39 f1       	breq	.+78     	; 0x4b38 <mousekey_task+0xf4>
    4aea:	10 91 d1 01 	lds	r17, 0x01D1
    4aee:	11 23       	and	r17, r17
    4af0:	19 f1       	breq	.+70     	; 0x4b38 <mousekey_task+0xf4>
        mouse_report.x *= 0.7;
    4af2:	77 27       	eor	r23, r23
    4af4:	67 fd       	sbrc	r22, 7
    4af6:	70 95       	com	r23
    4af8:	87 2f       	mov	r24, r23
    4afa:	97 2f       	mov	r25, r23
    4afc:	0e 94 a5 2c 	call	0x594a	; 0x594a <__floatsisf>
    4b00:	23 e3       	ldi	r18, 0x33	; 51
    4b02:	33 e3       	ldi	r19, 0x33	; 51
    4b04:	43 e3       	ldi	r20, 0x33	; 51
    4b06:	5f e3       	ldi	r21, 0x3F	; 63
    4b08:	0e 94 09 2d 	call	0x5a12	; 0x5a12 <__mulsf3>
    4b0c:	0e 94 72 2c 	call	0x58e4	; 0x58e4 <__fixsfsi>
    4b10:	60 93 d0 01 	sts	0x01D0, r22
        mouse_report.y *= 0.7;
    4b14:	61 2f       	mov	r22, r17
    4b16:	77 27       	eor	r23, r23
    4b18:	67 fd       	sbrc	r22, 7
    4b1a:	70 95       	com	r23
    4b1c:	87 2f       	mov	r24, r23
    4b1e:	97 2f       	mov	r25, r23
    4b20:	0e 94 a5 2c 	call	0x594a	; 0x594a <__floatsisf>
    4b24:	23 e3       	ldi	r18, 0x33	; 51
    4b26:	33 e3       	ldi	r19, 0x33	; 51
    4b28:	43 e3       	ldi	r20, 0x33	; 51
    4b2a:	5f e3       	ldi	r21, 0x3F	; 63
    4b2c:	0e 94 09 2d 	call	0x5a12	; 0x5a12 <__mulsf3>
    4b30:	0e 94 72 2c 	call	0x58e4	; 0x58e4 <__fixsfsi>
    4b34:	60 93 d1 01 	sts	0x01D1, r22
    }

    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    4b38:	1d 16       	cp	r1, r29
    4b3a:	24 f4       	brge	.+8      	; 0x4b44 <mousekey_task+0x100>
    4b3c:	0e 94 6f 23 	call	0x46de	; 0x46de <wheel_unit>
    4b40:	80 93 d2 01 	sts	0x01D2, r24
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    4b44:	80 91 d2 01 	lds	r24, 0x01D2
    4b48:	87 ff       	sbrs	r24, 7
    4b4a:	05 c0       	rjmp	.+10     	; 0x4b56 <mousekey_task+0x112>
    4b4c:	0e 94 6f 23 	call	0x46de	; 0x46de <wheel_unit>
    4b50:	81 95       	neg	r24
    4b52:	80 93 d2 01 	sts	0x01D2, r24
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    4b56:	1c 16       	cp	r1, r28
    4b58:	24 f4       	brge	.+8      	; 0x4b62 <mousekey_task+0x11e>
    4b5a:	0e 94 6f 23 	call	0x46de	; 0x46de <wheel_unit>
    4b5e:	80 93 d3 01 	sts	0x01D3, r24
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;
    4b62:	80 91 d3 01 	lds	r24, 0x01D3
    4b66:	87 ff       	sbrs	r24, 7
    4b68:	05 c0       	rjmp	.+10     	; 0x4b74 <mousekey_task+0x130>
    4b6a:	0e 94 6f 23 	call	0x46de	; 0x46de <wheel_unit>
    4b6e:	81 95       	neg	r24
    4b70:	80 93 d3 01 	sts	0x01D3, r24

    mousekey_send();
}
    4b74:	df 91       	pop	r29
    4b76:	cf 91       	pop	r28
    4b78:	1f 91       	pop	r17
    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;

    mousekey_send();
    4b7a:	0c 94 95 24 	jmp	0x492a	; 0x492a <mousekey_send>
}
    4b7e:	df 91       	pop	r29
    4b80:	cf 91       	pop	r28
    4b82:	1f 91       	pop	r17
    4b84:	08 95       	ret

00004b86 <mousekey_clear>:
    last_timer = timer_read();
}

void mousekey_clear(void)
{
    mouse_report = (report_mouse_t){};
    4b86:	ef ec       	ldi	r30, 0xCF	; 207
    4b88:	f1 e0       	ldi	r31, 0x01	; 1
    4b8a:	85 e0       	ldi	r24, 0x05	; 5
    4b8c:	df 01       	movw	r26, r30
    4b8e:	1d 92       	st	X+, r1
    4b90:	8a 95       	dec	r24
    4b92:	e9 f7       	brne	.-6      	; 0x4b8e <mousekey_clear+0x8>
    mousekey_repeat = 0;
    4b94:	10 92 ce 01 	sts	0x01CE, r1
    mousekey_accel = 0;
    4b98:	10 92 cd 01 	sts	0x01CD, r1
    4b9c:	08 95       	ret

00004b9e <command_console_help>:
/***********************************************************
 * Command console
 ***********************************************************/
static void command_console_help(void)
{
    print("\n\n----- Console Help -----\n");
    4b9e:	86 e6       	ldi	r24, 0x66	; 102
    4ba0:	9a e0       	ldi	r25, 0x0A	; 10
    4ba2:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    print("ESC/q:	quit\n");
    4ba6:	89 e5       	ldi	r24, 0x59	; 89
    4ba8:	9a e0       	ldi	r25, 0x0A	; 10
    4baa:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
#ifdef MOUSEKEY_ENABLE
    print("m:	mousekey\n");
    4bae:	8c e4       	ldi	r24, 0x4C	; 76
    4bb0:	9a e0       	ldi	r25, 0x0A	; 10
    4bb2:	0c 94 85 08 	jmp	0x110a	; 0x110a <xputs>

00004bb6 <mousekey_console_help>:
    }
}

static void mousekey_console_help(void)
{
    print("\n\n----- Mousekey Parameters Help -----\n");
    4bb6:	89 ec       	ldi	r24, 0xC9	; 201
    4bb8:	99 e0       	ldi	r25, 0x09	; 9
    4bba:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    print("ESC/q:	quit\n");
    4bbe:	8c eb       	ldi	r24, 0xBC	; 188
    4bc0:	99 e0       	ldi	r25, 0x09	; 9
    4bc2:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    print("1:	select mk_delay(*10ms)\n");
    4bc6:	81 ea       	ldi	r24, 0xA1	; 161
    4bc8:	99 e0       	ldi	r25, 0x09	; 9
    4bca:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    print("2:	select mk_interval(ms)\n");
    4bce:	86 e8       	ldi	r24, 0x86	; 134
    4bd0:	99 e0       	ldi	r25, 0x09	; 9
    4bd2:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    print("3:	select mk_max_speed\n");
    4bd6:	8e e6       	ldi	r24, 0x6E	; 110
    4bd8:	99 e0       	ldi	r25, 0x09	; 9
    4bda:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    print("4:	select mk_time_to_max\n");
    4bde:	84 e5       	ldi	r24, 0x54	; 84
    4be0:	99 e0       	ldi	r25, 0x09	; 9
    4be2:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    print("5:	select mk_wheel_max_speed\n");
    4be6:	86 e3       	ldi	r24, 0x36	; 54
    4be8:	99 e0       	ldi	r25, 0x09	; 9
    4bea:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    print("6:	select mk_wheel_time_to_max\n");
    4bee:	86 e1       	ldi	r24, 0x16	; 22
    4bf0:	99 e0       	ldi	r25, 0x09	; 9
    4bf2:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    print("p:	print parameters\n");
    4bf6:	81 e0       	ldi	r24, 0x01	; 1
    4bf8:	99 e0       	ldi	r25, 0x09	; 9
    4bfa:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    print("d:	set default values\n");
    4bfe:	8a ee       	ldi	r24, 0xEA	; 234
    4c00:	98 e0       	ldi	r25, 0x08	; 8
    4c02:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    print("up:	increase parameters(+1)\n");
    4c06:	8d ec       	ldi	r24, 0xCD	; 205
    4c08:	98 e0       	ldi	r25, 0x08	; 8
    4c0a:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    print("down:	decrease parameters(-1)\n");
    4c0e:	8e ea       	ldi	r24, 0xAE	; 174
    4c10:	98 e0       	ldi	r25, 0x08	; 8
    4c12:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    print("pgup:	increase parameters(+10)\n");
    4c16:	8e e8       	ldi	r24, 0x8E	; 142
    4c18:	98 e0       	ldi	r25, 0x08	; 8
    4c1a:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    print("pgdown:	decrease parameters(-10)\n");
    4c1e:	8c e6       	ldi	r24, 0x6C	; 108
    4c20:	98 e0       	ldi	r25, 0x08	; 8
    4c22:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    print("\nspeed = delta * max_speed * (repeat / time_to_max)\n");
    4c26:	87 e3       	ldi	r24, 0x37	; 55
    4c28:	98 e0       	ldi	r25, 0x08	; 8
    4c2a:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    print("where delta: cursor="); pdec(MOUSEKEY_MOVE_DELTA);
    4c2e:	82 e2       	ldi	r24, 0x22	; 34
    4c30:	98 e0       	ldi	r25, 0x08	; 8
    4c32:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    4c36:	1f 92       	push	r1
    4c38:	85 e0       	ldi	r24, 0x05	; 5
    4c3a:	8f 93       	push	r24
    4c3c:	8f e1       	ldi	r24, 0x1F	; 31
    4c3e:	98 e0       	ldi	r25, 0x08	; 8
    4c40:	9f 93       	push	r25
    4c42:	8f 93       	push	r24
    4c44:	0e 94 1e 09 	call	0x123c	; 0x123c <__xprintf>
    print(", wheel="); pdec(MOUSEKEY_WHEEL_DELTA); print("\n");
    4c48:	86 e1       	ldi	r24, 0x16	; 22
    4c4a:	98 e0       	ldi	r25, 0x08	; 8
    4c4c:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    4c50:	1f 92       	push	r1
    4c52:	81 e0       	ldi	r24, 0x01	; 1
    4c54:	8f 93       	push	r24
    4c56:	83 e1       	ldi	r24, 0x13	; 19
    4c58:	98 e0       	ldi	r25, 0x08	; 8
    4c5a:	9f 93       	push	r25
    4c5c:	8f 93       	push	r24
    4c5e:	0e 94 1e 09 	call	0x123c	; 0x123c <__xprintf>
    4c62:	81 e1       	ldi	r24, 0x11	; 17
    4c64:	98 e0       	ldi	r25, 0x08	; 8
    4c66:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    print("See http://en.wikipedia.org/wiki/Mouse_keys\n");
    4c6a:	8d b7       	in	r24, 0x3d	; 61
    4c6c:	9e b7       	in	r25, 0x3e	; 62
    4c6e:	08 96       	adiw	r24, 0x08	; 8
    4c70:	0f b6       	in	r0, 0x3f	; 63
    4c72:	f8 94       	cli
    4c74:	9e bf       	out	0x3e, r25	; 62
    4c76:	0f be       	out	0x3f, r0	; 63
    4c78:	8d bf       	out	0x3d, r24	; 61
    4c7a:	84 ee       	ldi	r24, 0xE4	; 228
    4c7c:	97 e0       	ldi	r25, 0x07	; 7
    4c7e:	0c 94 85 08 	jmp	0x110a	; 0x110a <xputs>

00004c82 <mousekey_param_inc>:
}

#define PRINT_SET_VAL(v)  print(#v " = "); print_dec(v); print("\n");
static void mousekey_param_inc(uint8_t param, uint8_t inc)
{
    switch (param) {
    4c82:	83 30       	cpi	r24, 0x03	; 3
    4c84:	09 f4       	brne	.+2      	; 0x4c88 <mousekey_param_inc+0x6>
    4c86:	59 c0       	rjmp	.+178    	; 0x4d3a <mousekey_param_inc+0xb8>
    4c88:	28 f4       	brcc	.+10     	; 0x4c94 <mousekey_param_inc+0x12>
    4c8a:	81 30       	cpi	r24, 0x01	; 1
    4c8c:	61 f0       	breq	.+24     	; 0x4ca6 <mousekey_param_inc+0x24>
    4c8e:	82 30       	cpi	r24, 0x02	; 2
    4c90:	79 f1       	breq	.+94     	; 0x4cf0 <mousekey_param_inc+0x6e>
    4c92:	08 95       	ret
    4c94:	85 30       	cpi	r24, 0x05	; 5
    4c96:	09 f4       	brne	.+2      	; 0x4c9a <mousekey_param_inc+0x18>
    4c98:	9a c0       	rjmp	.+308    	; 0x4dce <mousekey_param_inc+0x14c>
    4c9a:	08 f4       	brcc	.+2      	; 0x4c9e <mousekey_param_inc+0x1c>
    4c9c:	73 c0       	rjmp	.+230    	; 0x4d84 <mousekey_param_inc+0x102>
    4c9e:	86 30       	cpi	r24, 0x06	; 6
    4ca0:	09 f4       	brne	.+2      	; 0x4ca4 <mousekey_param_inc+0x22>
    4ca2:	ba c0       	rjmp	.+372    	; 0x4e18 <mousekey_param_inc+0x196>
    4ca4:	08 95       	ret
        case 1:
            if (mk_delay + inc < UINT8_MAX)
    4ca6:	20 91 14 01 	lds	r18, 0x0114
    4caa:	86 2f       	mov	r24, r22
    4cac:	90 e0       	ldi	r25, 0x00	; 0
    4cae:	82 0f       	add	r24, r18
    4cb0:	91 1d       	adc	r25, r1
    4cb2:	8f 3f       	cpi	r24, 0xFF	; 255
    4cb4:	91 05       	cpc	r25, r1
    4cb6:	20 f4       	brcc	.+8      	; 0x4cc0 <mousekey_param_inc+0x3e>
                mk_delay += inc;
    4cb8:	62 0f       	add	r22, r18
    4cba:	60 93 14 01 	sts	0x0114, r22
    4cbe:	03 c0       	rjmp	.+6      	; 0x4cc6 <mousekey_param_inc+0x44>
            else
                mk_delay = UINT8_MAX;
    4cc0:	8f ef       	ldi	r24, 0xFF	; 255
    4cc2:	80 93 14 01 	sts	0x0114, r24
            PRINT_SET_VAL(mk_delay);
    4cc6:	80 ec       	ldi	r24, 0xC0	; 192
    4cc8:	96 e0       	ldi	r25, 0x06	; 6
    4cca:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    4cce:	80 91 14 01 	lds	r24, 0x0114
    4cd2:	1f 92       	push	r1
    4cd4:	8f 93       	push	r24
    4cd6:	8d eb       	ldi	r24, 0xBD	; 189
    4cd8:	96 e0       	ldi	r25, 0x06	; 6
    4cda:	9f 93       	push	r25
    4cdc:	8f 93       	push	r24
    4cde:	0e 94 1e 09 	call	0x123c	; 0x123c <__xprintf>
    4ce2:	0f 90       	pop	r0
    4ce4:	0f 90       	pop	r0
    4ce6:	0f 90       	pop	r0
    4ce8:	0f 90       	pop	r0
    4cea:	8b eb       	ldi	r24, 0xBB	; 187
    4cec:	96 e0       	ldi	r25, 0x06	; 6
    4cee:	b8 c0       	rjmp	.+368    	; 0x4e60 <mousekey_param_inc+0x1de>
            break;
        case 2:
            if (mk_interval + inc < UINT8_MAX)
    4cf0:	20 91 13 01 	lds	r18, 0x0113
    4cf4:	86 2f       	mov	r24, r22
    4cf6:	90 e0       	ldi	r25, 0x00	; 0
    4cf8:	82 0f       	add	r24, r18
    4cfa:	91 1d       	adc	r25, r1
    4cfc:	8f 3f       	cpi	r24, 0xFF	; 255
    4cfe:	91 05       	cpc	r25, r1
    4d00:	20 f4       	brcc	.+8      	; 0x4d0a <mousekey_param_inc+0x88>
                mk_interval += inc;
    4d02:	62 0f       	add	r22, r18
    4d04:	60 93 13 01 	sts	0x0113, r22
    4d08:	03 c0       	rjmp	.+6      	; 0x4d10 <mousekey_param_inc+0x8e>
            else
                mk_interval = UINT8_MAX;
    4d0a:	8f ef       	ldi	r24, 0xFF	; 255
    4d0c:	80 93 13 01 	sts	0x0113, r24
            PRINT_SET_VAL(mk_interval);
    4d10:	8c ea       	ldi	r24, 0xAC	; 172
    4d12:	96 e0       	ldi	r25, 0x06	; 6
    4d14:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    4d18:	80 91 13 01 	lds	r24, 0x0113
    4d1c:	1f 92       	push	r1
    4d1e:	8f 93       	push	r24
    4d20:	89 ea       	ldi	r24, 0xA9	; 169
    4d22:	96 e0       	ldi	r25, 0x06	; 6
    4d24:	9f 93       	push	r25
    4d26:	8f 93       	push	r24
    4d28:	0e 94 1e 09 	call	0x123c	; 0x123c <__xprintf>
    4d2c:	0f 90       	pop	r0
    4d2e:	0f 90       	pop	r0
    4d30:	0f 90       	pop	r0
    4d32:	0f 90       	pop	r0
    4d34:	87 ea       	ldi	r24, 0xA7	; 167
    4d36:	96 e0       	ldi	r25, 0x06	; 6
    4d38:	93 c0       	rjmp	.+294    	; 0x4e60 <mousekey_param_inc+0x1de>
            break;
        case 3:
            if (mk_max_speed + inc < UINT8_MAX)
    4d3a:	20 91 12 01 	lds	r18, 0x0112
    4d3e:	86 2f       	mov	r24, r22
    4d40:	90 e0       	ldi	r25, 0x00	; 0
    4d42:	82 0f       	add	r24, r18
    4d44:	91 1d       	adc	r25, r1
    4d46:	8f 3f       	cpi	r24, 0xFF	; 255
    4d48:	91 05       	cpc	r25, r1
    4d4a:	20 f4       	brcc	.+8      	; 0x4d54 <mousekey_param_inc+0xd2>
                mk_max_speed += inc;
    4d4c:	62 0f       	add	r22, r18
    4d4e:	60 93 12 01 	sts	0x0112, r22
    4d52:	03 c0       	rjmp	.+6      	; 0x4d5a <mousekey_param_inc+0xd8>
            else
                mk_max_speed = UINT8_MAX;
    4d54:	8f ef       	ldi	r24, 0xFF	; 255
    4d56:	80 93 12 01 	sts	0x0112, r24
            PRINT_SET_VAL(mk_max_speed);
    4d5a:	87 e9       	ldi	r24, 0x97	; 151
    4d5c:	96 e0       	ldi	r25, 0x06	; 6
    4d5e:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    4d62:	80 91 12 01 	lds	r24, 0x0112
    4d66:	1f 92       	push	r1
    4d68:	8f 93       	push	r24
    4d6a:	84 e9       	ldi	r24, 0x94	; 148
    4d6c:	96 e0       	ldi	r25, 0x06	; 6
    4d6e:	9f 93       	push	r25
    4d70:	8f 93       	push	r24
    4d72:	0e 94 1e 09 	call	0x123c	; 0x123c <__xprintf>
    4d76:	0f 90       	pop	r0
    4d78:	0f 90       	pop	r0
    4d7a:	0f 90       	pop	r0
    4d7c:	0f 90       	pop	r0
    4d7e:	82 e9       	ldi	r24, 0x92	; 146
    4d80:	96 e0       	ldi	r25, 0x06	; 6
    4d82:	6e c0       	rjmp	.+220    	; 0x4e60 <mousekey_param_inc+0x1de>
            break;
        case 4:
            if (mk_time_to_max + inc < UINT8_MAX)
    4d84:	20 91 11 01 	lds	r18, 0x0111
    4d88:	86 2f       	mov	r24, r22
    4d8a:	90 e0       	ldi	r25, 0x00	; 0
    4d8c:	82 0f       	add	r24, r18
    4d8e:	91 1d       	adc	r25, r1
    4d90:	8f 3f       	cpi	r24, 0xFF	; 255
    4d92:	91 05       	cpc	r25, r1
    4d94:	20 f4       	brcc	.+8      	; 0x4d9e <mousekey_param_inc+0x11c>
                mk_time_to_max += inc;
    4d96:	62 0f       	add	r22, r18
    4d98:	60 93 11 01 	sts	0x0111, r22
    4d9c:	03 c0       	rjmp	.+6      	; 0x4da4 <mousekey_param_inc+0x122>
            else
                mk_time_to_max = UINT8_MAX;
    4d9e:	8f ef       	ldi	r24, 0xFF	; 255
    4da0:	80 93 11 01 	sts	0x0111, r24
            PRINT_SET_VAL(mk_time_to_max);
    4da4:	80 e8       	ldi	r24, 0x80	; 128
    4da6:	96 e0       	ldi	r25, 0x06	; 6
    4da8:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    4dac:	80 91 11 01 	lds	r24, 0x0111
    4db0:	1f 92       	push	r1
    4db2:	8f 93       	push	r24
    4db4:	8d e7       	ldi	r24, 0x7D	; 125
    4db6:	96 e0       	ldi	r25, 0x06	; 6
    4db8:	9f 93       	push	r25
    4dba:	8f 93       	push	r24
    4dbc:	0e 94 1e 09 	call	0x123c	; 0x123c <__xprintf>
    4dc0:	0f 90       	pop	r0
    4dc2:	0f 90       	pop	r0
    4dc4:	0f 90       	pop	r0
    4dc6:	0f 90       	pop	r0
    4dc8:	8b e7       	ldi	r24, 0x7B	; 123
    4dca:	96 e0       	ldi	r25, 0x06	; 6
    4dcc:	49 c0       	rjmp	.+146    	; 0x4e60 <mousekey_param_inc+0x1de>
            break;
        case 5:
            if (mk_wheel_max_speed + inc < UINT8_MAX)
    4dce:	20 91 10 01 	lds	r18, 0x0110
    4dd2:	86 2f       	mov	r24, r22
    4dd4:	90 e0       	ldi	r25, 0x00	; 0
    4dd6:	82 0f       	add	r24, r18
    4dd8:	91 1d       	adc	r25, r1
    4dda:	8f 3f       	cpi	r24, 0xFF	; 255
    4ddc:	91 05       	cpc	r25, r1
    4dde:	20 f4       	brcc	.+8      	; 0x4de8 <mousekey_param_inc+0x166>
                mk_wheel_max_speed += inc;
    4de0:	62 0f       	add	r22, r18
    4de2:	60 93 10 01 	sts	0x0110, r22
    4de6:	03 c0       	rjmp	.+6      	; 0x4dee <mousekey_param_inc+0x16c>
            else
                mk_wheel_max_speed = UINT8_MAX;
    4de8:	8f ef       	ldi	r24, 0xFF	; 255
    4dea:	80 93 10 01 	sts	0x0110, r24
            PRINT_SET_VAL(mk_wheel_max_speed);
    4dee:	85 e6       	ldi	r24, 0x65	; 101
    4df0:	96 e0       	ldi	r25, 0x06	; 6
    4df2:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    4df6:	80 91 10 01 	lds	r24, 0x0110
    4dfa:	1f 92       	push	r1
    4dfc:	8f 93       	push	r24
    4dfe:	82 e6       	ldi	r24, 0x62	; 98
    4e00:	96 e0       	ldi	r25, 0x06	; 6
    4e02:	9f 93       	push	r25
    4e04:	8f 93       	push	r24
    4e06:	0e 94 1e 09 	call	0x123c	; 0x123c <__xprintf>
    4e0a:	0f 90       	pop	r0
    4e0c:	0f 90       	pop	r0
    4e0e:	0f 90       	pop	r0
    4e10:	0f 90       	pop	r0
    4e12:	80 e6       	ldi	r24, 0x60	; 96
    4e14:	96 e0       	ldi	r25, 0x06	; 6
    4e16:	24 c0       	rjmp	.+72     	; 0x4e60 <mousekey_param_inc+0x1de>
            break;
        case 6:
            if (mk_wheel_time_to_max + inc < UINT8_MAX)
    4e18:	20 91 0f 01 	lds	r18, 0x010F
    4e1c:	86 2f       	mov	r24, r22
    4e1e:	90 e0       	ldi	r25, 0x00	; 0
    4e20:	82 0f       	add	r24, r18
    4e22:	91 1d       	adc	r25, r1
    4e24:	8f 3f       	cpi	r24, 0xFF	; 255
    4e26:	91 05       	cpc	r25, r1
    4e28:	20 f4       	brcc	.+8      	; 0x4e32 <mousekey_param_inc+0x1b0>
                mk_wheel_time_to_max += inc;
    4e2a:	62 0f       	add	r22, r18
    4e2c:	60 93 0f 01 	sts	0x010F, r22
    4e30:	03 c0       	rjmp	.+6      	; 0x4e38 <mousekey_param_inc+0x1b6>
            else
                mk_wheel_time_to_max = UINT8_MAX;
    4e32:	8f ef       	ldi	r24, 0xFF	; 255
    4e34:	80 93 0f 01 	sts	0x010F, r24
            PRINT_SET_VAL(mk_wheel_time_to_max);
    4e38:	88 e4       	ldi	r24, 0x48	; 72
    4e3a:	96 e0       	ldi	r25, 0x06	; 6
    4e3c:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    4e40:	80 91 0f 01 	lds	r24, 0x010F
    4e44:	1f 92       	push	r1
    4e46:	8f 93       	push	r24
    4e48:	85 e4       	ldi	r24, 0x45	; 69
    4e4a:	96 e0       	ldi	r25, 0x06	; 6
    4e4c:	9f 93       	push	r25
    4e4e:	8f 93       	push	r24
    4e50:	0e 94 1e 09 	call	0x123c	; 0x123c <__xprintf>
    4e54:	0f 90       	pop	r0
    4e56:	0f 90       	pop	r0
    4e58:	0f 90       	pop	r0
    4e5a:	0f 90       	pop	r0
    4e5c:	83 e4       	ldi	r24, 0x43	; 67
    4e5e:	96 e0       	ldi	r25, 0x06	; 6
    4e60:	0c 94 85 08 	jmp	0x110a	; 0x110a <xputs>

00004e64 <mousekey_param_dec>:
    }
}

static void mousekey_param_dec(uint8_t param, uint8_t dec)
{
    switch (param) {
    4e64:	83 30       	cpi	r24, 0x03	; 3
    4e66:	09 f4       	brne	.+2      	; 0x4e6a <mousekey_param_dec+0x6>
    4e68:	4d c0       	rjmp	.+154    	; 0x4f04 <mousekey_param_dec+0xa0>
    4e6a:	28 f4       	brcc	.+10     	; 0x4e76 <mousekey_param_dec+0x12>
    4e6c:	81 30       	cpi	r24, 0x01	; 1
    4e6e:	61 f0       	breq	.+24     	; 0x4e88 <mousekey_param_dec+0x24>
    4e70:	82 30       	cpi	r24, 0x02	; 2
    4e72:	49 f1       	breq	.+82     	; 0x4ec6 <mousekey_param_dec+0x62>
    4e74:	08 95       	ret
    4e76:	85 30       	cpi	r24, 0x05	; 5
    4e78:	09 f4       	brne	.+2      	; 0x4e7c <mousekey_param_dec+0x18>
    4e7a:	82 c0       	rjmp	.+260    	; 0x4f80 <mousekey_param_dec+0x11c>
    4e7c:	08 f4       	brcc	.+2      	; 0x4e80 <mousekey_param_dec+0x1c>
    4e7e:	61 c0       	rjmp	.+194    	; 0x4f42 <mousekey_param_dec+0xde>
    4e80:	86 30       	cpi	r24, 0x06	; 6
    4e82:	09 f4       	brne	.+2      	; 0x4e86 <mousekey_param_dec+0x22>
    4e84:	9c c0       	rjmp	.+312    	; 0x4fbe <mousekey_param_dec+0x15a>
    4e86:	08 95       	ret
        case 1:
            if (mk_delay > dec)
    4e88:	80 91 14 01 	lds	r24, 0x0114
    4e8c:	68 17       	cp	r22, r24
    4e8e:	20 f4       	brcc	.+8      	; 0x4e98 <mousekey_param_dec+0x34>
                mk_delay -= dec;
    4e90:	86 1b       	sub	r24, r22
    4e92:	80 93 14 01 	sts	0x0114, r24
    4e96:	02 c0       	rjmp	.+4      	; 0x4e9c <mousekey_param_dec+0x38>
            else
                mk_delay = 0;
    4e98:	10 92 14 01 	sts	0x0114, r1
            PRINT_SET_VAL(mk_delay);
    4e9c:	87 e3       	ldi	r24, 0x37	; 55
    4e9e:	96 e0       	ldi	r25, 0x06	; 6
    4ea0:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    4ea4:	80 91 14 01 	lds	r24, 0x0114
    4ea8:	1f 92       	push	r1
    4eaa:	8f 93       	push	r24
    4eac:	84 e3       	ldi	r24, 0x34	; 52
    4eae:	96 e0       	ldi	r25, 0x06	; 6
    4eb0:	9f 93       	push	r25
    4eb2:	8f 93       	push	r24
    4eb4:	0e 94 1e 09 	call	0x123c	; 0x123c <__xprintf>
    4eb8:	0f 90       	pop	r0
    4eba:	0f 90       	pop	r0
    4ebc:	0f 90       	pop	r0
    4ebe:	0f 90       	pop	r0
    4ec0:	82 e3       	ldi	r24, 0x32	; 50
    4ec2:	96 e0       	ldi	r25, 0x06	; 6
    4ec4:	9a c0       	rjmp	.+308    	; 0x4ffa <mousekey_param_dec+0x196>
            break;
        case 2:
            if (mk_interval > dec)
    4ec6:	80 91 13 01 	lds	r24, 0x0113
    4eca:	68 17       	cp	r22, r24
    4ecc:	20 f4       	brcc	.+8      	; 0x4ed6 <mousekey_param_dec+0x72>
                mk_interval -= dec;
    4ece:	86 1b       	sub	r24, r22
    4ed0:	80 93 13 01 	sts	0x0113, r24
    4ed4:	02 c0       	rjmp	.+4      	; 0x4eda <mousekey_param_dec+0x76>
            else
                mk_interval = 0;
    4ed6:	10 92 13 01 	sts	0x0113, r1
            PRINT_SET_VAL(mk_interval);
    4eda:	83 e2       	ldi	r24, 0x23	; 35
    4edc:	96 e0       	ldi	r25, 0x06	; 6
    4ede:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    4ee2:	80 91 13 01 	lds	r24, 0x0113
    4ee6:	1f 92       	push	r1
    4ee8:	8f 93       	push	r24
    4eea:	80 e2       	ldi	r24, 0x20	; 32
    4eec:	96 e0       	ldi	r25, 0x06	; 6
    4eee:	9f 93       	push	r25
    4ef0:	8f 93       	push	r24
    4ef2:	0e 94 1e 09 	call	0x123c	; 0x123c <__xprintf>
    4ef6:	0f 90       	pop	r0
    4ef8:	0f 90       	pop	r0
    4efa:	0f 90       	pop	r0
    4efc:	0f 90       	pop	r0
    4efe:	8e e1       	ldi	r24, 0x1E	; 30
    4f00:	96 e0       	ldi	r25, 0x06	; 6
    4f02:	7b c0       	rjmp	.+246    	; 0x4ffa <mousekey_param_dec+0x196>
            break;
        case 3:
            if (mk_max_speed > dec)
    4f04:	80 91 12 01 	lds	r24, 0x0112
    4f08:	68 17       	cp	r22, r24
    4f0a:	20 f4       	brcc	.+8      	; 0x4f14 <mousekey_param_dec+0xb0>
                mk_max_speed -= dec;
    4f0c:	86 1b       	sub	r24, r22
    4f0e:	80 93 12 01 	sts	0x0112, r24
    4f12:	02 c0       	rjmp	.+4      	; 0x4f18 <mousekey_param_dec+0xb4>
            else
                mk_max_speed = 0;
    4f14:	10 92 12 01 	sts	0x0112, r1
            PRINT_SET_VAL(mk_max_speed);
    4f18:	8e e0       	ldi	r24, 0x0E	; 14
    4f1a:	96 e0       	ldi	r25, 0x06	; 6
    4f1c:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    4f20:	80 91 12 01 	lds	r24, 0x0112
    4f24:	1f 92       	push	r1
    4f26:	8f 93       	push	r24
    4f28:	8b e0       	ldi	r24, 0x0B	; 11
    4f2a:	96 e0       	ldi	r25, 0x06	; 6
    4f2c:	9f 93       	push	r25
    4f2e:	8f 93       	push	r24
    4f30:	0e 94 1e 09 	call	0x123c	; 0x123c <__xprintf>
    4f34:	0f 90       	pop	r0
    4f36:	0f 90       	pop	r0
    4f38:	0f 90       	pop	r0
    4f3a:	0f 90       	pop	r0
    4f3c:	89 e0       	ldi	r24, 0x09	; 9
    4f3e:	96 e0       	ldi	r25, 0x06	; 6
    4f40:	5c c0       	rjmp	.+184    	; 0x4ffa <mousekey_param_dec+0x196>
            break;
        case 4:
            if (mk_time_to_max > dec)
    4f42:	80 91 11 01 	lds	r24, 0x0111
    4f46:	68 17       	cp	r22, r24
    4f48:	20 f4       	brcc	.+8      	; 0x4f52 <mousekey_param_dec+0xee>
                mk_time_to_max -= dec;
    4f4a:	86 1b       	sub	r24, r22
    4f4c:	80 93 11 01 	sts	0x0111, r24
    4f50:	02 c0       	rjmp	.+4      	; 0x4f56 <mousekey_param_dec+0xf2>
            else
                mk_time_to_max = 0;
    4f52:	10 92 11 01 	sts	0x0111, r1
            PRINT_SET_VAL(mk_time_to_max);
    4f56:	87 ef       	ldi	r24, 0xF7	; 247
    4f58:	95 e0       	ldi	r25, 0x05	; 5
    4f5a:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    4f5e:	80 91 11 01 	lds	r24, 0x0111
    4f62:	1f 92       	push	r1
    4f64:	8f 93       	push	r24
    4f66:	84 ef       	ldi	r24, 0xF4	; 244
    4f68:	95 e0       	ldi	r25, 0x05	; 5
    4f6a:	9f 93       	push	r25
    4f6c:	8f 93       	push	r24
    4f6e:	0e 94 1e 09 	call	0x123c	; 0x123c <__xprintf>
    4f72:	0f 90       	pop	r0
    4f74:	0f 90       	pop	r0
    4f76:	0f 90       	pop	r0
    4f78:	0f 90       	pop	r0
    4f7a:	82 ef       	ldi	r24, 0xF2	; 242
    4f7c:	95 e0       	ldi	r25, 0x05	; 5
    4f7e:	3d c0       	rjmp	.+122    	; 0x4ffa <mousekey_param_dec+0x196>
            break;
        case 5:
            if (mk_wheel_max_speed > dec)
    4f80:	80 91 10 01 	lds	r24, 0x0110
    4f84:	68 17       	cp	r22, r24
    4f86:	20 f4       	brcc	.+8      	; 0x4f90 <mousekey_param_dec+0x12c>
                mk_wheel_max_speed -= dec;
    4f88:	86 1b       	sub	r24, r22
    4f8a:	80 93 10 01 	sts	0x0110, r24
    4f8e:	02 c0       	rjmp	.+4      	; 0x4f94 <mousekey_param_dec+0x130>
            else
                mk_wheel_max_speed = 0;
    4f90:	10 92 10 01 	sts	0x0110, r1
            PRINT_SET_VAL(mk_wheel_max_speed);
    4f94:	8c ed       	ldi	r24, 0xDC	; 220
    4f96:	95 e0       	ldi	r25, 0x05	; 5
    4f98:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    4f9c:	80 91 10 01 	lds	r24, 0x0110
    4fa0:	1f 92       	push	r1
    4fa2:	8f 93       	push	r24
    4fa4:	89 ed       	ldi	r24, 0xD9	; 217
    4fa6:	95 e0       	ldi	r25, 0x05	; 5
    4fa8:	9f 93       	push	r25
    4faa:	8f 93       	push	r24
    4fac:	0e 94 1e 09 	call	0x123c	; 0x123c <__xprintf>
    4fb0:	0f 90       	pop	r0
    4fb2:	0f 90       	pop	r0
    4fb4:	0f 90       	pop	r0
    4fb6:	0f 90       	pop	r0
    4fb8:	87 ed       	ldi	r24, 0xD7	; 215
    4fba:	95 e0       	ldi	r25, 0x05	; 5
    4fbc:	1e c0       	rjmp	.+60     	; 0x4ffa <mousekey_param_dec+0x196>
            break;
        case 6:
            if (mk_wheel_time_to_max > dec)
    4fbe:	80 91 0f 01 	lds	r24, 0x010F
    4fc2:	68 17       	cp	r22, r24
    4fc4:	20 f4       	brcc	.+8      	; 0x4fce <mousekey_param_dec+0x16a>
                mk_wheel_time_to_max -= dec;
    4fc6:	86 1b       	sub	r24, r22
    4fc8:	80 93 0f 01 	sts	0x010F, r24
    4fcc:	02 c0       	rjmp	.+4      	; 0x4fd2 <mousekey_param_dec+0x16e>
            else
                mk_wheel_time_to_max = 0;
    4fce:	10 92 0f 01 	sts	0x010F, r1
            PRINT_SET_VAL(mk_wheel_time_to_max);
    4fd2:	8f eb       	ldi	r24, 0xBF	; 191
    4fd4:	95 e0       	ldi	r25, 0x05	; 5
    4fd6:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    4fda:	80 91 0f 01 	lds	r24, 0x010F
    4fde:	1f 92       	push	r1
    4fe0:	8f 93       	push	r24
    4fe2:	8c eb       	ldi	r24, 0xBC	; 188
    4fe4:	95 e0       	ldi	r25, 0x05	; 5
    4fe6:	9f 93       	push	r25
    4fe8:	8f 93       	push	r24
    4fea:	0e 94 1e 09 	call	0x123c	; 0x123c <__xprintf>
    4fee:	0f 90       	pop	r0
    4ff0:	0f 90       	pop	r0
    4ff2:	0f 90       	pop	r0
    4ff4:	0f 90       	pop	r0
    4ff6:	8a eb       	ldi	r24, 0xBA	; 186
    4ff8:	95 e0       	ldi	r25, 0x05	; 5
    4ffa:	0c 94 85 08 	jmp	0x110a	; 0x110a <xputs>

00004ffe <switch_default_layer>:
    }
    return 0;
}

static void switch_default_layer(uint8_t layer)
{
    4ffe:	cf 93       	push	r28
    5000:	c8 2f       	mov	r28, r24
    print("switch_default_layer: "); print_dec(biton32(default_layer_state));
    5002:	85 e3       	ldi	r24, 0x35	; 53
    5004:	9a e0       	ldi	r25, 0x0A	; 10
    5006:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    500a:	60 91 ac 01 	lds	r22, 0x01AC
    500e:	70 91 ad 01 	lds	r23, 0x01AD
    5012:	80 91 ae 01 	lds	r24, 0x01AE
    5016:	90 91 af 01 	lds	r25, 0x01AF
    501a:	0e 94 02 20 	call	0x4004	; 0x4004 <biton32>
    501e:	1f 92       	push	r1
    5020:	8f 93       	push	r24
    5022:	22 e3       	ldi	r18, 0x32	; 50
    5024:	3a e0       	ldi	r19, 0x0A	; 10
    5026:	3f 93       	push	r19
    5028:	2f 93       	push	r18
    502a:	0e 94 1e 09 	call	0x123c	; 0x123c <__xprintf>
    print(" to "); print_dec(layer); print("\n");
    502e:	8d e2       	ldi	r24, 0x2D	; 45
    5030:	9a e0       	ldi	r25, 0x0A	; 10
    5032:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    5036:	1f 92       	push	r1
    5038:	cf 93       	push	r28
    503a:	2a e2       	ldi	r18, 0x2A	; 42
    503c:	3a e0       	ldi	r19, 0x0A	; 10
    503e:	3f 93       	push	r19
    5040:	2f 93       	push	r18
    5042:	0e 94 1e 09 	call	0x123c	; 0x123c <__xprintf>
    5046:	88 e2       	ldi	r24, 0x28	; 40
    5048:	9a e0       	ldi	r25, 0x0A	; 10
    504a:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    default_layer_set(1UL<<layer);
    504e:	61 e0       	ldi	r22, 0x01	; 1
    5050:	70 e0       	ldi	r23, 0x00	; 0
    5052:	80 e0       	ldi	r24, 0x00	; 0
    5054:	90 e0       	ldi	r25, 0x00	; 0
    5056:	04 c0       	rjmp	.+8      	; 0x5060 <switch_default_layer+0x62>
    5058:	66 0f       	add	r22, r22
    505a:	77 1f       	adc	r23, r23
    505c:	88 1f       	adc	r24, r24
    505e:	99 1f       	adc	r25, r25
    5060:	ca 95       	dec	r28
    5062:	d2 f7       	brpl	.-12     	; 0x5058 <switch_default_layer+0x5a>
    5064:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <default_layer_set>
    clear_keyboard();
    5068:	8d b7       	in	r24, 0x3d	; 61
    506a:	9e b7       	in	r25, 0x3e	; 62
    506c:	08 96       	adiw	r24, 0x08	; 8
    506e:	0f b6       	in	r0, 0x3f	; 63
    5070:	f8 94       	cli
    5072:	9e bf       	out	0x3e, r25	; 62
    5074:	0f be       	out	0x3f, r0	; 63
    5076:	8d bf       	out	0x3d, r24	; 61
}
    5078:	cf 91       	pop	r28
static void switch_default_layer(uint8_t layer)
{
    print("switch_default_layer: "); print_dec(biton32(default_layer_state));
    print(" to "); print_dec(layer); print("\n");
    default_layer_set(1UL<<layer);
    clear_keyboard();
    507a:	0c 94 85 18 	jmp	0x310a	; 0x310a <clear_keyboard>

0000507e <command_common>:
#endif
}
#endif

static bool command_common(uint8_t code)
{
    507e:	cf 93       	push	r28
    static host_driver_t *host_driver = 0;
    switch (code) {
    5080:	48 2f       	mov	r20, r24
    5082:	50 e0       	ldi	r21, 0x00	; 0
    5084:	fa 01       	movw	r30, r20
    5086:	36 97       	sbiw	r30, 0x06	; 6
    5088:	e3 34       	cpi	r30, 0x43	; 67
    508a:	f1 05       	cpc	r31, r1
    508c:	08 f0       	brcs	.+2      	; 0x5090 <command_common+0x12>
    508e:	ae c2       	rjmp	.+1372   	; 0x55ec <command_common+0x56e>
    5090:	e0 59       	subi	r30, 0x90	; 144
    5092:	ff 4f       	sbci	r31, 0xFF	; 255
    5094:	0c 94 a8 2d 	jmp	0x5b50	; 0x5b50 <__tablejump2__>
            led_set(host_keyboard_leds());
            break;
#endif
#ifdef BOOTMAGIC_ENABLE
        case KC_E:
            print("eeconfig:\n");
    5098:	8a e5       	ldi	r24, 0x5A	; 90
    509a:	90 e1       	ldi	r25, 0x10	; 16
    509c:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
}

#ifdef BOOTMAGIC_ENABLE
static void print_eeconfig(void)
{
    print("default_layer: "); print_dec(eeconfig_read_default_layer()); print("\n");
    50a0:	83 e9       	ldi	r24, 0x93	; 147
    50a2:	9d e0       	ldi	r25, 0x0D	; 13
    50a4:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    50a8:	0e 94 15 23 	call	0x462a	; 0x462a <eeconfig_read_default_layer>
    50ac:	1f 92       	push	r1
    50ae:	8f 93       	push	r24
    50b0:	80 e9       	ldi	r24, 0x90	; 144
    50b2:	9d e0       	ldi	r25, 0x0D	; 13
    50b4:	9f 93       	push	r25
    50b6:	8f 93       	push	r24
    50b8:	0e 94 1e 09 	call	0x123c	; 0x123c <__xprintf>
    50bc:	8e e8       	ldi	r24, 0x8E	; 142
    50be:	9d e0       	ldi	r25, 0x0D	; 13
    50c0:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>

    debug_config_t dc;
    dc.raw = eeconfig_read_debug();
    50c4:	0e 94 0c 23 	call	0x4618	; 0x4618 <eeconfig_read_debug>
    50c8:	c8 2f       	mov	r28, r24
    print("debug_config.raw: "); print_hex8(dc.raw); print("\n");
    50ca:	8b e7       	ldi	r24, 0x7B	; 123
    50cc:	9d e0       	ldi	r25, 0x0D	; 13
    50ce:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    50d2:	1f 92       	push	r1
    50d4:	cf 93       	push	r28
    50d6:	26 e7       	ldi	r18, 0x76	; 118
    50d8:	3d e0       	ldi	r19, 0x0D	; 13
    50da:	3f 93       	push	r19
    50dc:	2f 93       	push	r18
    50de:	0e 94 1e 09 	call	0x123c	; 0x123c <__xprintf>
    50e2:	84 e7       	ldi	r24, 0x74	; 116
    50e4:	9d e0       	ldi	r25, 0x0D	; 13
    50e6:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    print(".enable: "); print_dec(dc.enable); print("\n");
    50ea:	8a e6       	ldi	r24, 0x6A	; 106
    50ec:	9d e0       	ldi	r25, 0x0D	; 13
    50ee:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    50f2:	8c 2f       	mov	r24, r28
    50f4:	81 70       	andi	r24, 0x01	; 1
    50f6:	1f 92       	push	r1
    50f8:	8f 93       	push	r24
    50fa:	27 e6       	ldi	r18, 0x67	; 103
    50fc:	3d e0       	ldi	r19, 0x0D	; 13
    50fe:	3f 93       	push	r19
    5100:	2f 93       	push	r18
    5102:	0e 94 1e 09 	call	0x123c	; 0x123c <__xprintf>
    5106:	85 e6       	ldi	r24, 0x65	; 101
    5108:	9d e0       	ldi	r25, 0x0D	; 13
    510a:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    print(".matrix: "); print_dec(dc.matrix); print("\n");
    510e:	8b e5       	ldi	r24, 0x5B	; 91
    5110:	9d e0       	ldi	r25, 0x0D	; 13
    5112:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    5116:	c1 fb       	bst	r28, 1
    5118:	88 27       	eor	r24, r24
    511a:	80 f9       	bld	r24, 0
    511c:	1f 92       	push	r1
    511e:	8f 93       	push	r24
    5120:	28 e5       	ldi	r18, 0x58	; 88
    5122:	3d e0       	ldi	r19, 0x0D	; 13
    5124:	3f 93       	push	r19
    5126:	2f 93       	push	r18
    5128:	0e 94 1e 09 	call	0x123c	; 0x123c <__xprintf>
    512c:	86 e5       	ldi	r24, 0x56	; 86
    512e:	9d e0       	ldi	r25, 0x0D	; 13
    5130:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    print(".keyboard: "); print_dec(dc.keyboard); print("\n");
    5134:	8a e4       	ldi	r24, 0x4A	; 74
    5136:	9d e0       	ldi	r25, 0x0D	; 13
    5138:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    513c:	c2 fb       	bst	r28, 2
    513e:	88 27       	eor	r24, r24
    5140:	80 f9       	bld	r24, 0
    5142:	1f 92       	push	r1
    5144:	8f 93       	push	r24
    5146:	27 e4       	ldi	r18, 0x47	; 71
    5148:	3d e0       	ldi	r19, 0x0D	; 13
    514a:	3f 93       	push	r19
    514c:	2f 93       	push	r18
    514e:	0e 94 1e 09 	call	0x123c	; 0x123c <__xprintf>
    5152:	85 e4       	ldi	r24, 0x45	; 69
    5154:	9d e0       	ldi	r25, 0x0D	; 13
    5156:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    print(".mouse: "); print_dec(dc.mouse); print("\n");
    515a:	8c e3       	ldi	r24, 0x3C	; 60
    515c:	9d e0       	ldi	r25, 0x0D	; 13
    515e:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    5162:	c3 fb       	bst	r28, 3
    5164:	cc 27       	eor	r28, r28
    5166:	c0 f9       	bld	r28, 0
    5168:	1f 92       	push	r1
    516a:	cf 93       	push	r28
    516c:	89 e3       	ldi	r24, 0x39	; 57
    516e:	9d e0       	ldi	r25, 0x0D	; 13
    5170:	9f 93       	push	r25
    5172:	8f 93       	push	r24
    5174:	0e 94 1e 09 	call	0x123c	; 0x123c <__xprintf>
    5178:	87 e3       	ldi	r24, 0x37	; 55
    517a:	9d e0       	ldi	r25, 0x0D	; 13
    517c:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>

    keymap_config_t kc;
    kc.raw = eeconfig_read_keymap();
    5180:	0e 94 1e 23 	call	0x463c	; 0x463c <eeconfig_read_keymap>
    5184:	c8 2f       	mov	r28, r24
    print("keymap_config.raw: "); print_hex8(kc.raw); print("\n");
    5186:	83 e2       	ldi	r24, 0x23	; 35
    5188:	9d e0       	ldi	r25, 0x0D	; 13
    518a:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    518e:	1f 92       	push	r1
    5190:	cf 93       	push	r28
    5192:	2e e1       	ldi	r18, 0x1E	; 30
    5194:	3d e0       	ldi	r19, 0x0D	; 13
    5196:	3f 93       	push	r19
    5198:	2f 93       	push	r18
    519a:	0e 94 1e 09 	call	0x123c	; 0x123c <__xprintf>
    519e:	8c e1       	ldi	r24, 0x1C	; 28
    51a0:	9d e0       	ldi	r25, 0x0D	; 13
    51a2:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    print(".swap_control_capslock: "); print_dec(kc.swap_control_capslock); print("\n");
    51a6:	83 e0       	ldi	r24, 0x03	; 3
    51a8:	9d e0       	ldi	r25, 0x0D	; 13
    51aa:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    51ae:	8c 2f       	mov	r24, r28
    51b0:	81 70       	andi	r24, 0x01	; 1
    51b2:	1f 92       	push	r1
    51b4:	8f 93       	push	r24
    51b6:	20 e0       	ldi	r18, 0x00	; 0
    51b8:	3d e0       	ldi	r19, 0x0D	; 13
    51ba:	3f 93       	push	r19
    51bc:	2f 93       	push	r18
    51be:	0e 94 1e 09 	call	0x123c	; 0x123c <__xprintf>
    51c2:	8d b7       	in	r24, 0x3d	; 61
    51c4:	9e b7       	in	r25, 0x3e	; 62
    51c6:	80 96       	adiw	r24, 0x20	; 32
    51c8:	0f b6       	in	r0, 0x3f	; 63
    51ca:	f8 94       	cli
    51cc:	9e bf       	out	0x3e, r25	; 62
    51ce:	0f be       	out	0x3f, r0	; 63
    51d0:	8d bf       	out	0x3d, r24	; 61
    51d2:	8e ef       	ldi	r24, 0xFE	; 254
    51d4:	9c e0       	ldi	r25, 0x0C	; 12
    51d6:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    print(".capslock_to_control: "); print_dec(kc.capslock_to_control); print("\n");
    51da:	87 ee       	ldi	r24, 0xE7	; 231
    51dc:	9c e0       	ldi	r25, 0x0C	; 12
    51de:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    51e2:	c1 fb       	bst	r28, 1
    51e4:	88 27       	eor	r24, r24
    51e6:	80 f9       	bld	r24, 0
    51e8:	1f 92       	push	r1
    51ea:	8f 93       	push	r24
    51ec:	24 ee       	ldi	r18, 0xE4	; 228
    51ee:	3c e0       	ldi	r19, 0x0C	; 12
    51f0:	3f 93       	push	r19
    51f2:	2f 93       	push	r18
    51f4:	0e 94 1e 09 	call	0x123c	; 0x123c <__xprintf>
    51f8:	82 ee       	ldi	r24, 0xE2	; 226
    51fa:	9c e0       	ldi	r25, 0x0C	; 12
    51fc:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    print(".swap_lalt_lgui: "); print_dec(kc.swap_lalt_lgui); print("\n");
    5200:	80 ed       	ldi	r24, 0xD0	; 208
    5202:	9c e0       	ldi	r25, 0x0C	; 12
    5204:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    5208:	c2 fb       	bst	r28, 2
    520a:	88 27       	eor	r24, r24
    520c:	80 f9       	bld	r24, 0
    520e:	1f 92       	push	r1
    5210:	8f 93       	push	r24
    5212:	2d ec       	ldi	r18, 0xCD	; 205
    5214:	3c e0       	ldi	r19, 0x0C	; 12
    5216:	3f 93       	push	r19
    5218:	2f 93       	push	r18
    521a:	0e 94 1e 09 	call	0x123c	; 0x123c <__xprintf>
    521e:	8b ec       	ldi	r24, 0xCB	; 203
    5220:	9c e0       	ldi	r25, 0x0C	; 12
    5222:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    print(".swap_ralt_rgui: "); print_dec(kc.swap_ralt_rgui); print("\n");
    5226:	89 eb       	ldi	r24, 0xB9	; 185
    5228:	9c e0       	ldi	r25, 0x0C	; 12
    522a:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    522e:	c3 fb       	bst	r28, 3
    5230:	88 27       	eor	r24, r24
    5232:	80 f9       	bld	r24, 0
    5234:	1f 92       	push	r1
    5236:	8f 93       	push	r24
    5238:	26 eb       	ldi	r18, 0xB6	; 182
    523a:	3c e0       	ldi	r19, 0x0C	; 12
    523c:	3f 93       	push	r19
    523e:	2f 93       	push	r18
    5240:	0e 94 1e 09 	call	0x123c	; 0x123c <__xprintf>
    5244:	84 eb       	ldi	r24, 0xB4	; 180
    5246:	9c e0       	ldi	r25, 0x0C	; 12
    5248:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    print(".no_gui: "); print_dec(kc.no_gui); print("\n");
    524c:	8a ea       	ldi	r24, 0xAA	; 170
    524e:	9c e0       	ldi	r25, 0x0C	; 12
    5250:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    5254:	c4 fb       	bst	r28, 4
    5256:	88 27       	eor	r24, r24
    5258:	80 f9       	bld	r24, 0
    525a:	1f 92       	push	r1
    525c:	8f 93       	push	r24
    525e:	27 ea       	ldi	r18, 0xA7	; 167
    5260:	3c e0       	ldi	r19, 0x0C	; 12
    5262:	3f 93       	push	r19
    5264:	2f 93       	push	r18
    5266:	0e 94 1e 09 	call	0x123c	; 0x123c <__xprintf>
    526a:	85 ea       	ldi	r24, 0xA5	; 165
    526c:	9c e0       	ldi	r25, 0x0C	; 12
    526e:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    print(".swap_grave_esc: "); print_dec(kc.swap_grave_esc); print("\n");
    5272:	83 e9       	ldi	r24, 0x93	; 147
    5274:	9c e0       	ldi	r25, 0x0C	; 12
    5276:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    527a:	c5 fb       	bst	r28, 5
    527c:	88 27       	eor	r24, r24
    527e:	80 f9       	bld	r24, 0
    5280:	1f 92       	push	r1
    5282:	8f 93       	push	r24
    5284:	20 e9       	ldi	r18, 0x90	; 144
    5286:	3c e0       	ldi	r19, 0x0C	; 12
    5288:	3f 93       	push	r19
    528a:	2f 93       	push	r18
    528c:	0e 94 1e 09 	call	0x123c	; 0x123c <__xprintf>
    5290:	8e e8       	ldi	r24, 0x8E	; 142
    5292:	9c e0       	ldi	r25, 0x0C	; 12
    5294:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    print(".swap_backslash_backspace: "); print_dec(kc.swap_backslash_backspace); print("\n");
    5298:	82 e7       	ldi	r24, 0x72	; 114
    529a:	9c e0       	ldi	r25, 0x0C	; 12
    529c:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    52a0:	c6 fb       	bst	r28, 6
    52a2:	88 27       	eor	r24, r24
    52a4:	80 f9       	bld	r24, 0
    52a6:	1f 92       	push	r1
    52a8:	8f 93       	push	r24
    52aa:	2f e6       	ldi	r18, 0x6F	; 111
    52ac:	3c e0       	ldi	r19, 0x0C	; 12
    52ae:	3f 93       	push	r19
    52b0:	2f 93       	push	r18
    52b2:	0e 94 1e 09 	call	0x123c	; 0x123c <__xprintf>
    52b6:	8d e6       	ldi	r24, 0x6D	; 109
    52b8:	9c e0       	ldi	r25, 0x0C	; 12
    52ba:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    print(".nkro: "); print_dec(kc.nkro); print("\n");
    52be:	85 e6       	ldi	r24, 0x65	; 101
    52c0:	9c e0       	ldi	r25, 0x0C	; 12
    52c2:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    52c6:	c7 fb       	bst	r28, 7
    52c8:	cc 27       	eor	r28, r28
    52ca:	c0 f9       	bld	r28, 0
    52cc:	1f 92       	push	r1
    52ce:	cf 93       	push	r28
    52d0:	82 e6       	ldi	r24, 0x62	; 98
    52d2:	9c e0       	ldi	r25, 0x0C	; 12
    52d4:	9f 93       	push	r25
    52d6:	8f 93       	push	r24
    52d8:	0e 94 1e 09 	call	0x123c	; 0x123c <__xprintf>
    52dc:	80 e6       	ldi	r24, 0x60	; 96
    52de:	9c e0       	ldi	r25, 0x0C	; 12
    52e0:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    52e4:	8d b7       	in	r24, 0x3d	; 61
    52e6:	9e b7       	in	r25, 0x3e	; 62
    52e8:	4c 96       	adiw	r24, 0x1c	; 28
    52ea:	0f b6       	in	r0, 0x3f	; 63
    52ec:	f8 94       	cli
    52ee:	9e bf       	out	0x3e, r25	; 62
    52f0:	0f be       	out	0x3f, r0	; 63
    52f2:	8d bf       	out	0x3d, r24	; 61
    52f4:	1d c0       	rjmp	.+58     	; 0x5330 <command_common+0x2b2>
            print("eeconfig:\n");
            print_eeconfig();
            break;
#endif
        case KC_CAPSLOCK:
            if (host_get_driver()) {
    52f6:	0e 94 a6 12 	call	0x254c	; 0x254c <host_get_driver>
    52fa:	89 2b       	or	r24, r25
    52fc:	79 f0       	breq	.+30     	; 0x531c <command_common+0x29e>
                host_driver = host_get_driver();
    52fe:	0e 94 a6 12 	call	0x254c	; 0x254c <host_get_driver>
    5302:	90 93 d6 01 	sts	0x01D6, r25
    5306:	80 93 d5 01 	sts	0x01D5, r24
                clear_keyboard();
    530a:	0e 94 85 18 	call	0x310a	; 0x310a <clear_keyboard>
                host_set_driver(0);
    530e:	80 e0       	ldi	r24, 0x00	; 0
    5310:	90 e0       	ldi	r25, 0x00	; 0
    5312:	0e 94 a1 12 	call	0x2542	; 0x2542 <host_set_driver>
                print("Locked.\n");
    5316:	81 e5       	ldi	r24, 0x51	; 81
    5318:	90 e1       	ldi	r25, 0x10	; 16
    531a:	08 c0       	rjmp	.+16     	; 0x532c <command_common+0x2ae>
            } else {
                host_set_driver(host_driver);
    531c:	80 91 d5 01 	lds	r24, 0x01D5
    5320:	90 91 d6 01 	lds	r25, 0x01D6
    5324:	0e 94 a1 12 	call	0x2542	; 0x2542 <host_set_driver>
                print("Unlocked.\n");
    5328:	86 e4       	ldi	r24, 0x46	; 70
    532a:	90 e1       	ldi	r25, 0x10	; 16
    532c:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
            break;
        default:
            print("?");
            return false;
    }
    return true;
    5330:	c1 e0       	ldi	r28, 0x01	; 1
    5332:	61 c1       	rjmp	.+706    	; 0x55f6 <command_common+0x578>
/***********************************************************
 * Command common
 ***********************************************************/
static void command_common_help(void)
{
    print("\n\n----- Command Help -----\n");
    5334:	84 e4       	ldi	r24, 0x44	; 68
    5336:	9c e0       	ldi	r25, 0x0C	; 12
    5338:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    print("c:	enter console mode\n");
    533c:	8d e2       	ldi	r24, 0x2D	; 45
    533e:	9c e0       	ldi	r25, 0x0C	; 12
    5340:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    print("d:	toggle debug enable\n");
    5344:	85 e1       	ldi	r24, 0x15	; 21
    5346:	9c e0       	ldi	r25, 0x0C	; 12
    5348:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    print("x:	toggle matrix debug\n");
    534c:	8d ef       	ldi	r24, 0xFD	; 253
    534e:	9b e0       	ldi	r25, 0x0B	; 11
    5350:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    print("k:	toggle keyboard debug\n");
    5354:	83 ee       	ldi	r24, 0xE3	; 227
    5356:	9b e0       	ldi	r25, 0x0B	; 11
    5358:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    print("m:	toggle mouse debug\n");
    535c:	8c ec       	ldi	r24, 0xCC	; 204
    535e:	9b e0       	ldi	r25, 0x0B	; 11
    5360:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
#ifdef SLEEP_LED_ENABLE
    print("z:	toggle sleep LED test\n");
#endif
    print("v:	print device version & info\n");
    5364:	8c ea       	ldi	r24, 0xAC	; 172
    5366:	9b e0       	ldi	r25, 0x0B	; 11
    5368:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    print("t:	print timer count\n");
    536c:	86 e9       	ldi	r24, 0x96	; 150
    536e:	9b e0       	ldi	r25, 0x0B	; 11
    5370:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    print("s:	print status\n");
    5374:	85 e8       	ldi	r24, 0x85	; 133
    5376:	9b e0       	ldi	r25, 0x0B	; 11
    5378:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    print("e:	print eeprom config\n");
    537c:	8d e6       	ldi	r24, 0x6D	; 109
    537e:	9b e0       	ldi	r25, 0x0B	; 11
    5380:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
#ifdef NKRO_ENABLE
    print("n:	toggle NKRO\n");
    5384:	8d e5       	ldi	r24, 0x5D	; 93
    5386:	9b e0       	ldi	r25, 0x0B	; 11
    5388:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
#endif
    print("0/F10:	switch to Layer0 \n");
    538c:	83 e4       	ldi	r24, 0x43	; 67
    538e:	9b e0       	ldi	r25, 0x0B	; 11
    5390:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    print("1/F1:	switch to Layer1 \n");
    5394:	8a e2       	ldi	r24, 0x2A	; 42
    5396:	9b e0       	ldi	r25, 0x0B	; 11
    5398:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    print("2/F2:	switch to Layer2 \n");
    539c:	81 e1       	ldi	r24, 0x11	; 17
    539e:	9b e0       	ldi	r25, 0x0B	; 11
    53a0:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    print("3/F3:	switch to Layer3 \n");
    53a4:	88 ef       	ldi	r24, 0xF8	; 248
    53a6:	9a e0       	ldi	r25, 0x0A	; 10
    53a8:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    print("4/F4:	switch to Layer4 \n");
    53ac:	8f ed       	ldi	r24, 0xDF	; 223
    53ae:	9a e0       	ldi	r25, 0x0A	; 10
    53b0:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    print("PScr:	power down/remote wake-up\n");
    53b4:	8e eb       	ldi	r24, 0xBE	; 190
    53b6:	9a e0       	ldi	r25, 0x0A	; 10
    53b8:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    print("Caps:	Lock Keyboard(Child Proof)\n");
    53bc:	8c e9       	ldi	r24, 0x9C	; 156
    53be:	9a e0       	ldi	r25, 0x0A	; 10
    53c0:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    print("Paus:	jump to bootloader\n");
    53c4:	82 e8       	ldi	r24, 0x82	; 130
    53c6:	9a e0       	ldi	r25, 0x0A	; 10
    53c8:	b1 cf       	rjmp	.-158    	; 0x532c <command_common+0x2ae>
        case KC_H:
        case KC_SLASH: /* ? */
            command_common_help();
            break;
        case KC_C:
            debug_matrix   = false;
    53ca:	80 91 c3 01 	lds	r24, 0x01C3
            debug_keyboard = false;
            debug_mouse    = false;
            debug_enable   = false;
    53ce:	81 7f       	andi	r24, 0xF1	; 241
    53d0:	8e 7f       	andi	r24, 0xFE	; 254
    53d2:	80 93 c3 01 	sts	0x01C3, r24
            command_console_help();
    53d6:	0e 94 cf 25 	call	0x4b9e	; 0x4b9e <command_console_help>
            print("\nEnter Console Mode\n");
    53da:	81 e3       	ldi	r24, 0x31	; 49
    53dc:	90 e1       	ldi	r25, 0x10	; 16
    53de:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
            print("C> ");
    53e2:	8d e2       	ldi	r24, 0x2D	; 45
    53e4:	90 e1       	ldi	r25, 0x10	; 16
    53e6:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
            command_state = CONSOLE;
    53ea:	81 e0       	ldi	r24, 0x01	; 1
    53ec:	80 93 d4 01 	sts	0x01D4, r24
    53f0:	9f cf       	rjmp	.-194    	; 0x5330 <command_common+0x2b2>
            break;
        case KC_PAUSE:
            clear_keyboard();
    53f2:	0e 94 85 18 	call	0x310a	; 0x310a <clear_keyboard>
            print("\n\nJump to bootloader... ");
    53f6:	84 e1       	ldi	r24, 0x14	; 20
    53f8:	90 e1       	ldi	r25, 0x10	; 16
    53fa:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    53fe:	9f ef       	ldi	r25, 0xFF	; 255
    5400:	23 ed       	ldi	r18, 0xD3	; 211
    5402:	80 e3       	ldi	r24, 0x30	; 48
    5404:	91 50       	subi	r25, 0x01	; 1
    5406:	20 40       	sbci	r18, 0x00	; 0
    5408:	80 40       	sbci	r24, 0x00	; 0
    540a:	e1 f7       	brne	.-8      	; 0x5404 <command_common+0x386>
    540c:	00 c0       	rjmp	.+0      	; 0x540e <command_common+0x390>
    540e:	00 00       	nop
            _delay_ms(1000);
            bootloader_jump(); // not return
    5410:	0e 94 4a 21 	call	0x4294	; 0x4294 <bootloader_jump>
            print("not supported.\n");
    5414:	84 e0       	ldi	r24, 0x04	; 4
    5416:	90 e1       	ldi	r25, 0x10	; 16
    5418:	89 cf       	rjmp	.-238    	; 0x532c <command_common+0x2ae>
            break;
        case KC_D:
            if (debug_enable) {
    541a:	80 91 c3 01 	lds	r24, 0x01C3
    541e:	c8 2f       	mov	r28, r24
    5420:	c1 70       	andi	r28, 0x01	; 1
    5422:	80 ff       	sbrs	r24, 0
    5424:	09 c0       	rjmp	.+18     	; 0x5438 <command_common+0x3ba>
                print("\nDEBUG: disabled.\n");
    5426:	81 ef       	ldi	r24, 0xF1	; 241
    5428:	9f e0       	ldi	r25, 0x0F	; 15
    542a:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
                debug_matrix   = false;
    542e:	80 91 c3 01 	lds	r24, 0x01C3
                debug_keyboard = false;
                debug_mouse    = false;
                debug_enable   = false;
    5432:	81 7f       	andi	r24, 0xF1	; 241
    5434:	8e 7f       	andi	r24, 0xFE	; 254
    5436:	44 c0       	rjmp	.+136    	; 0x54c0 <command_common+0x442>
            } else {
                print("\nDEBUG: enabled.\n");
    5438:	8f ed       	ldi	r24, 0xDF	; 223
    543a:	9f e0       	ldi	r25, 0x0F	; 15
    543c:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
                debug_enable   = true;
    5440:	80 91 c3 01 	lds	r24, 0x01C3
    5444:	81 60       	ori	r24, 0x01	; 1
    5446:	80 93 c3 01 	sts	0x01C3, r24
    544a:	72 cf       	rjmp	.-284    	; 0x5330 <command_common+0x2b2>
            }
            break;
        case KC_X: // debug matrix toggle
            debug_matrix = !debug_matrix;
    544c:	80 91 c3 01 	lds	r24, 0x01C3
    5450:	81 fb       	bst	r24, 1
    5452:	cc 27       	eor	r28, r28
    5454:	c0 f9       	bld	r28, 0
    5456:	91 e0       	ldi	r25, 0x01	; 1
    5458:	c9 27       	eor	r28, r25
    545a:	c0 fb       	bst	r28, 0
    545c:	81 f9       	bld	r24, 1
    545e:	80 93 c3 01 	sts	0x01C3, r24
            if (debug_matrix) {
    5462:	cc 23       	and	r28, r28
    5464:	19 f0       	breq	.+6      	; 0x546c <command_common+0x3ee>
                print("\nDEBUG: matrix enabled.\n");
    5466:	86 ec       	ldi	r24, 0xC6	; 198
    5468:	9f e0       	ldi	r25, 0x0F	; 15
    546a:	25 c0       	rjmp	.+74     	; 0x54b6 <command_common+0x438>
                debug_enable = true;
            } else {
                print("\nDEBUG: matrix disabled.\n");
    546c:	8c ea       	ldi	r24, 0xAC	; 172
    546e:	9f e0       	ldi	r25, 0x0F	; 15
    5470:	5d cf       	rjmp	.-326    	; 0x532c <command_common+0x2ae>
            }
            break;
        case KC_K: // debug keyboard toggle
            debug_keyboard = !debug_keyboard;
    5472:	80 91 c3 01 	lds	r24, 0x01C3
    5476:	82 fb       	bst	r24, 2
    5478:	cc 27       	eor	r28, r28
    547a:	c0 f9       	bld	r28, 0
    547c:	91 e0       	ldi	r25, 0x01	; 1
    547e:	c9 27       	eor	r28, r25
    5480:	c0 fb       	bst	r28, 0
    5482:	82 f9       	bld	r24, 2
    5484:	80 93 c3 01 	sts	0x01C3, r24
            if (debug_keyboard) {
    5488:	cc 23       	and	r28, r28
    548a:	19 f0       	breq	.+6      	; 0x5492 <command_common+0x414>
                print("\nDEBUG: keyboard enabled.\n");
    548c:	81 e9       	ldi	r24, 0x91	; 145
    548e:	9f e0       	ldi	r25, 0x0F	; 15
    5490:	12 c0       	rjmp	.+36     	; 0x54b6 <command_common+0x438>
                debug_enable = true;
            } else {
                print("\nDEBUG: keyboard disabled.\n");
    5492:	85 e7       	ldi	r24, 0x75	; 117
    5494:	9f e0       	ldi	r25, 0x0F	; 15
    5496:	4a cf       	rjmp	.-364    	; 0x532c <command_common+0x2ae>
            }
            break;
        case KC_M: // debug mouse toggle
            debug_mouse = !debug_mouse;
    5498:	80 91 c3 01 	lds	r24, 0x01C3
    549c:	83 fb       	bst	r24, 3
    549e:	cc 27       	eor	r28, r28
    54a0:	c0 f9       	bld	r28, 0
    54a2:	91 e0       	ldi	r25, 0x01	; 1
    54a4:	c9 27       	eor	r28, r25
    54a6:	c0 fb       	bst	r28, 0
    54a8:	83 f9       	bld	r24, 3
    54aa:	80 93 c3 01 	sts	0x01C3, r24
            if (debug_mouse) {
    54ae:	cc 23       	and	r28, r28
    54b0:	51 f0       	breq	.+20     	; 0x54c6 <command_common+0x448>
                print("\nDEBUG: mouse enabled.\n");
    54b2:	8d e5       	ldi	r24, 0x5D	; 93
    54b4:	9f e0       	ldi	r25, 0x0F	; 15
    54b6:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
                debug_enable = true;
    54ba:	80 91 c3 01 	lds	r24, 0x01C3
    54be:	81 60       	ori	r24, 0x01	; 1
    54c0:	80 93 c3 01 	sts	0x01C3, r24
    54c4:	98 c0       	rjmp	.+304    	; 0x55f6 <command_common+0x578>
            } else {
                print("\nDEBUG: mouse disabled.\n");
    54c6:	84 e4       	ldi	r24, 0x44	; 68
    54c8:	9f e0       	ldi	r25, 0x0F	; 15
    54ca:	30 cf       	rjmp	.-416    	; 0x532c <command_common+0x2ae>
            }
            break;
        case KC_V: // print version & information
            print("\n\n----- Version -----\n");
    54cc:	8d e2       	ldi	r24, 0x2D	; 45
    54ce:	9f e0       	ldi	r25, 0x0F	; 15
    54d0:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
            print("DESC: " STR(DESCRIPTION) "\n");
    54d4:	84 e0       	ldi	r24, 0x04	; 4
    54d6:	9f e0       	ldi	r25, 0x0F	; 15
    54d8:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
            print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
    54dc:	8f ec       	ldi	r24, 0xCF	; 207
    54de:	9e e0       	ldi	r25, 0x0E	; 14
    54e0:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
                  "PID: " STR(PRODUCT_ID) "(" STR(PRODUCT) ") "
                  "VER: " STR(DEVICE_VER) "\n");
            print("BUILD: " STR(VERSION) " (" __TIME__ " " __DATE__ ")\n");
    54e4:	82 ea       	ldi	r24, 0xA2	; 162
    54e6:	9e e0       	ldi	r25, 0x0E	; 14
    54e8:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
            /* build options */
            print("OPTIONS:"
    54ec:	8d e5       	ldi	r24, 0x5D	; 93
    54ee:	9e e0       	ldi	r25, 0x0E	; 14
    54f0:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
#ifdef KEYMAP_SECTION_ENABLE
            " KEYMAP_SECTION"
#endif
            " " STR(BOOTLOADER_SIZE) "\n");

            print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
    54f4:	82 e3       	ldi	r24, 0x32	; 50
    54f6:	9e e0       	ldi	r25, 0x0E	; 14
    54f8:	19 cf       	rjmp	.-462    	; 0x532c <command_common+0x2ae>
                  " AVR-LIBC: " __AVR_LIBC_VERSION_STRING__
                  " AVR_ARCH: avr" STR(__AVR_ARCH__) "\n");
            break;
        case KC_T: // print timer
            print_val_hex32(timer_count);
    54fa:	80 91 c7 01 	lds	r24, 0x01C7
    54fe:	90 91 c8 01 	lds	r25, 0x01C8
    5502:	a0 91 c9 01 	lds	r26, 0x01C9
    5506:	b0 91 ca 01 	lds	r27, 0x01CA
    550a:	bf 93       	push	r27
    550c:	af 93       	push	r26
    550e:	9f 93       	push	r25
    5510:	8f 93       	push	r24
    5512:	8e e1       	ldi	r24, 0x1E	; 30
    5514:	9e e0       	ldi	r25, 0x0E	; 14
    5516:	9f 93       	push	r25
    5518:	8f 93       	push	r24
    551a:	0e 94 1e 09 	call	0x123c	; 0x123c <__xprintf>
            break;
    551e:	0f 90       	pop	r0
    5520:	0f 90       	pop	r0
    5522:	0f 90       	pop	r0
    5524:	0f 90       	pop	r0
    5526:	0f 90       	pop	r0
    5528:	0f 90       	pop	r0
    552a:	02 cf       	rjmp	.-508    	; 0x5330 <command_common+0x2b2>
        case KC_S:
            print("\n\n----- Status -----\n");
    552c:	88 e0       	ldi	r24, 0x08	; 8
    552e:	9e e0       	ldi	r25, 0x0E	; 14
    5530:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
            print_val_hex8(host_keyboard_leds());
    5534:	0e 94 ab 12 	call	0x2556	; 0x2556 <host_keyboard_leds>
    5538:	1f 92       	push	r1
    553a:	8f 93       	push	r24
    553c:	8e ee       	ldi	r24, 0xEE	; 238
    553e:	9d e0       	ldi	r25, 0x0D	; 13
    5540:	9f 93       	push	r25
    5542:	8f 93       	push	r24
    5544:	0e 94 1e 09 	call	0x123c	; 0x123c <__xprintf>
            print_val_hex8(keyboard_protocol);
    5548:	80 91 0b 01 	lds	r24, 0x010B
    554c:	1f 92       	push	r1
    554e:	8f 93       	push	r24
    5550:	87 ed       	ldi	r24, 0xD7	; 215
    5552:	9d e0       	ldi	r25, 0x0D	; 13
    5554:	9f 93       	push	r25
    5556:	8f 93       	push	r24
    5558:	0e 94 1e 09 	call	0x123c	; 0x123c <__xprintf>
            print_val_hex8(keyboard_idle);
    555c:	80 91 4c 01 	lds	r24, 0x014C
    5560:	1f 92       	push	r1
    5562:	8f 93       	push	r24
    5564:	84 ec       	ldi	r24, 0xC4	; 196
    5566:	9d e0       	ldi	r25, 0x0D	; 13
    5568:	9f 93       	push	r25
    556a:	8f 93       	push	r24
    556c:	0e 94 1e 09 	call	0x123c	; 0x123c <__xprintf>
#ifdef PROTOCOL_PJRC
#   if USB_COUNT_SOF
            print_val_hex8(usbSofCount);
#   endif
#endif
            break;
    5570:	8d b7       	in	r24, 0x3d	; 61
    5572:	9e b7       	in	r25, 0x3e	; 62
    5574:	0c 96       	adiw	r24, 0x0c	; 12
    5576:	0f b6       	in	r0, 0x3f	; 63
    5578:	f8 94       	cli
    557a:	9e bf       	out	0x3e, r25	; 62
    557c:	0f be       	out	0x3f, r0	; 63
    557e:	8d bf       	out	0x3d, r24	; 61
    5580:	d7 ce       	rjmp	.-594    	; 0x5330 <command_common+0x2b2>
#ifdef NKRO_ENABLE
        case KC_N:
            clear_keyboard(); //Prevents stuck keys.
    5582:	0e 94 85 18 	call	0x310a	; 0x310a <clear_keyboard>
            keyboard_nkro = !keyboard_nkro;
    5586:	c0 91 0c 01 	lds	r28, 0x010C
    558a:	81 e0       	ldi	r24, 0x01	; 1
    558c:	c8 27       	eor	r28, r24
    558e:	c0 93 0c 01 	sts	0x010C, r28
            if (keyboard_nkro)
    5592:	cc 23       	and	r28, r28
    5594:	29 f0       	breq	.+10     	; 0x55a0 <command_common+0x522>
                print("NKRO: enabled\n");
    5596:	85 eb       	ldi	r24, 0xB5	; 181
    5598:	9d e0       	ldi	r25, 0x0D	; 13
    559a:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    559e:	2b c0       	rjmp	.+86     	; 0x55f6 <command_common+0x578>
            else
                print("NKRO: disabled\n");
    55a0:	85 ea       	ldi	r24, 0xA5	; 165
    55a2:	9d e0       	ldi	r25, 0x0D	; 13
    55a4:	c3 ce       	rjmp	.-634    	; 0x532c <command_common+0x2ae>
                host_system_send(SYSTEM_POWER_DOWN);
                host_system_send(0);
                _delay_ms(500);
            }
#else
            host_system_send(SYSTEM_POWER_DOWN);
    55a6:	81 e8       	ldi	r24, 0x81	; 129
    55a8:	90 e0       	ldi	r25, 0x00	; 0
    55aa:	0e 94 07 13 	call	0x260e	; 0x260e <host_system_send>
    55ae:	9f ef       	ldi	r25, 0xFF	; 255
    55b0:	21 ee       	ldi	r18, 0xE1	; 225
    55b2:	84 e0       	ldi	r24, 0x04	; 4
    55b4:	91 50       	subi	r25, 0x01	; 1
    55b6:	20 40       	sbci	r18, 0x00	; 0
    55b8:	80 40       	sbci	r24, 0x00	; 0
    55ba:	e1 f7       	brne	.-8      	; 0x55b4 <command_common+0x536>
    55bc:	00 c0       	rjmp	.+0      	; 0x55be <command_common+0x540>
    55be:	00 00       	nop
            _delay_ms(100);
            host_system_send(0);
    55c0:	80 e0       	ldi	r24, 0x00	; 0
    55c2:	90 e0       	ldi	r25, 0x00	; 0
    55c4:	0e 94 07 13 	call	0x260e	; 0x260e <host_system_send>
    55c8:	9f ef       	ldi	r25, 0xFF	; 255
    55ca:	29 e6       	ldi	r18, 0x69	; 105
    55cc:	88 e1       	ldi	r24, 0x18	; 24
    55ce:	91 50       	subi	r25, 0x01	; 1
    55d0:	20 40       	sbci	r18, 0x00	; 0
    55d2:	80 40       	sbci	r24, 0x00	; 0
    55d4:	e1 f7       	brne	.-8      	; 0x55ce <command_common+0x550>
    55d6:	00 c0       	rjmp	.+0      	; 0x55d8 <command_common+0x55a>
    55d8:	00 00       	nop
    55da:	aa ce       	rjmp	.-684    	; 0x5330 <command_common+0x2b2>
            break;
#endif
        case KC_ESC:
        case KC_GRV:
        case KC_0:
            switch_default_layer(0);
    55dc:	80 e0       	ldi	r24, 0x00	; 0
    55de:	03 c0       	rjmp	.+6      	; 0x55e6 <command_common+0x568>
            break;
        case KC_1 ... KC_9:
            switch_default_layer((code - KC_1) + 1);
    55e0:	8d 51       	subi	r24, 0x1D	; 29
    55e2:	01 c0       	rjmp	.+2      	; 0x55e6 <command_common+0x568>
            break;
        case KC_F1 ... KC_F12:
            switch_default_layer((code - KC_F1) + 1);
    55e4:	89 53       	subi	r24, 0x39	; 57
    55e6:	0e 94 ff 27 	call	0x4ffe	; 0x4ffe <switch_default_layer>
    55ea:	a2 ce       	rjmp	.-700    	; 0x5330 <command_common+0x2b2>
            break;
        default:
            print("?");
    55ec:	83 ea       	ldi	r24, 0xA3	; 163
    55ee:	9d e0       	ldi	r25, 0x0D	; 13
    55f0:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
            return false;
    55f4:	c0 e0       	ldi	r28, 0x00	; 0
    }
    return true;
}
    55f6:	8c 2f       	mov	r24, r28
    55f8:	cf 91       	pop	r28
    55fa:	08 95       	ret

000055fc <command_extra>:
/* This allows to define extra commands. return false when not processed. */
bool command_extra(uint8_t code) __attribute__ ((weak));
bool command_extra(uint8_t code)
{
    return false;
}
    55fc:	80 e0       	ldi	r24, 0x00	; 0
    55fe:	08 95       	ret

00005600 <command_console_extra>:

bool command_console_extra(uint8_t code) __attribute__ ((weak));
bool command_console_extra(uint8_t code)
{
    return false;
}
    5600:	80 e0       	ldi	r24, 0x00	; 0
    5602:	08 95       	ret

00005604 <command_proc>:

command_state_t command_state = ONESHOT;


bool command_proc(uint8_t code)
{
    5604:	cf 93       	push	r28
    5606:	c8 2f       	mov	r28, r24
    switch (command_state) {
    5608:	80 91 d4 01 	lds	r24, 0x01D4
    560c:	81 30       	cpi	r24, 0x01	; 1
    560e:	71 f0       	breq	.+28     	; 0x562c <command_proc+0x28>
    5610:	20 f0       	brcs	.+8      	; 0x561a <command_proc+0x16>
    5612:	82 30       	cpi	r24, 0x02	; 2
    5614:	09 f4       	brne	.+2      	; 0x5618 <command_proc+0x14>
    5616:	4e c0       	rjmp	.+156    	; 0x56b4 <command_proc+0xb0>
    5618:	5d c1       	rjmp	.+698    	; 0x58d4 <command_proc+0x2d0>
        case ONESHOT:
            if (!IS_COMMAND())
    561a:	a0 91 0d 01 	lds	r26, 0x010D
    561e:	b0 91 0e 01 	lds	r27, 0x010E
    5622:	8c 91       	ld	r24, X
    5624:	82 32       	cpi	r24, 0x22	; 34
    5626:	09 f0       	breq	.+2      	; 0x562a <command_proc+0x26>
    5628:	57 c1       	rjmp	.+686    	; 0x58d8 <command_proc+0x2d4>
    562a:	07 c0       	rjmp	.+14     	; 0x563a <command_proc+0x36>
                return false;
            return (command_extra(code) || command_common(code));
            break;
        case CONSOLE:
            if (IS_COMMAND())
    562c:	a0 91 0d 01 	lds	r26, 0x010D
    5630:	b0 91 0e 01 	lds	r27, 0x010E
    5634:	8c 91       	ld	r24, X
    5636:	82 32       	cpi	r24, 0x22	; 34
    5638:	49 f4       	brne	.+18     	; 0x564c <command_proc+0x48>
                return (command_extra(code) || command_common(code));
    563a:	8c 2f       	mov	r24, r28
    563c:	0e 94 fe 2a 	call	0x55fc	; 0x55fc <command_extra>
    5640:	81 11       	cpse	r24, r1
    5642:	35 c0       	rjmp	.+106    	; 0x56ae <command_proc+0xaa>
    5644:	8c 2f       	mov	r24, r28
    5646:	0e 94 3f 28 	call	0x507e	; 0x507e <command_common>
    564a:	32 c0       	rjmp	.+100    	; 0x56b0 <command_proc+0xac>
            else
                return (command_console_extra(code) || command_console(code));
    564c:	8c 2f       	mov	r24, r28
    564e:	0e 94 00 2b 	call	0x5600	; 0x5600 <command_console_extra>
    5652:	81 11       	cpse	r24, r1
    5654:	2c c0       	rjmp	.+88     	; 0x56ae <command_proc+0xaa>
#endif
}

static bool command_console(uint8_t code)
{
    switch (code) {
    5656:	c4 31       	cpi	r28, 0x14	; 20
    5658:	f1 f0       	breq	.+60     	; 0x5696 <command_proc+0x92>
    565a:	90 f4       	brcc	.+36     	; 0x5680 <command_proc+0x7c>
    565c:	cb 30       	cpi	r28, 0x0B	; 11
    565e:	a1 f0       	breq	.+40     	; 0x5688 <command_proc+0x84>
    5660:	c0 31       	cpi	r28, 0x10	; 16
    5662:	01 f5       	brne	.+64     	; 0x56a4 <command_proc+0xa0>
            print("\nQuit Console Mode\n");
            command_state = ONESHOT;
            return false;
#ifdef MOUSEKEY_ENABLE
        case KC_M:
            mousekey_console_help();
    5664:	0e 94 db 25 	call	0x4bb6	; 0x4bb6 <mousekey_console_help>
            print("\nEnter Mousekey Console\n");
    5668:	87 ef       	ldi	r24, 0xF7	; 247
    566a:	99 e0       	ldi	r25, 0x09	; 9
    566c:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
            print("M0>");
    5670:	83 ef       	ldi	r24, 0xF3	; 243
    5672:	99 e0       	ldi	r25, 0x09	; 9
    5674:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
            command_state = MOUSEKEY;
    5678:	82 e0       	ldi	r24, 0x02	; 2
    567a:	80 93 d4 01 	sts	0x01D4, r24
    567e:	17 c0       	rjmp	.+46     	; 0x56ae <command_proc+0xaa>
#endif
}

static bool command_console(uint8_t code)
{
    switch (code) {
    5680:	c9 32       	cpi	r28, 0x29	; 41
    5682:	49 f0       	breq	.+18     	; 0x5696 <command_proc+0x92>
    5684:	c8 33       	cpi	r28, 0x38	; 56
    5686:	71 f4       	brne	.+28     	; 0x56a4 <command_proc+0xa0>
        case KC_H:
        case KC_SLASH: /* ? */
            command_console_help();
    5688:	0e 94 cf 25 	call	0x4b9e	; 0x4b9e <command_console_help>
#endif
        default:
            print("?");
            return false;
    }
    print("C> ");
    568c:	84 e2       	ldi	r24, 0x24	; 36
    568e:	9a e0       	ldi	r25, 0x0A	; 10
    5690:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    5694:	0c c0       	rjmp	.+24     	; 0x56ae <command_proc+0xaa>
        case KC_SLASH: /* ? */
            command_console_help();
            break;
        case KC_Q:
        case KC_ESC:
            print("\nQuit Console Mode\n");
    5696:	80 e1       	ldi	r24, 0x10	; 16
    5698:	9a e0       	ldi	r25, 0x0A	; 10
    569a:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
            command_state = ONESHOT;
    569e:	10 92 d4 01 	sts	0x01D4, r1
    56a2:	1c c1       	rjmp	.+568    	; 0x58dc <command_proc+0x2d8>
            print("M0>");
            command_state = MOUSEKEY;
            return true;
#endif
        default:
            print("?");
    56a4:	81 ef       	ldi	r24, 0xF1	; 241
    56a6:	99 e0       	ldi	r25, 0x09	; 9
    56a8:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    56ac:	17 c1       	rjmp	.+558    	; 0x58dc <command_proc+0x2d8>
            break;
        case CONSOLE:
            if (IS_COMMAND())
                return (command_extra(code) || command_common(code));
            else
                return (command_console_extra(code) || command_console(code));
    56ae:	81 e0       	ldi	r24, 0x01	; 1
    56b0:	81 70       	andi	r24, 0x01	; 1
    56b2:	16 c1       	rjmp	.+556    	; 0x58e0 <command_proc+0x2dc>
    print("See http://en.wikipedia.org/wiki/Mouse_keys\n");
}

static bool mousekey_console(uint8_t code)
{
    switch (code) {
    56b4:	c8 32       	cpi	r28, 0x28	; 40
    56b6:	28 f5       	brcc	.+74     	; 0x5702 <command_proc+0xfe>
    56b8:	ce 31       	cpi	r28, 0x1E	; 30
    56ba:	08 f0       	brcs	.+2      	; 0x56be <command_proc+0xba>
    56bc:	c0 c0       	rjmp	.+384    	; 0x583e <command_proc+0x23a>
    56be:	cb 30       	cpi	r28, 0x0B	; 11
    56c0:	a1 f1       	breq	.+104    	; 0x572a <command_proc+0x126>
    56c2:	d0 f4       	brcc	.+52     	; 0x56f8 <command_proc+0xf4>
    56c4:	c7 30       	cpi	r28, 0x07	; 7
    56c6:	09 f0       	breq	.+2      	; 0x56ca <command_proc+0xc6>
    56c8:	e8 c0       	rjmp	.+464    	; 0x589a <command_proc+0x296>
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
            break;
        case KC_D:
            mk_delay = MOUSEKEY_DELAY/10;
    56ca:	8e e1       	ldi	r24, 0x1E	; 30
    56cc:	80 93 14 01 	sts	0x0114, r24
            mk_interval = MOUSEKEY_INTERVAL;
    56d0:	82 e3       	ldi	r24, 0x32	; 50
    56d2:	80 93 13 01 	sts	0x0113, r24
            mk_max_speed = MOUSEKEY_MAX_SPEED;
    56d6:	8a e0       	ldi	r24, 0x0A	; 10
    56d8:	80 93 12 01 	sts	0x0112, r24
            mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
    56dc:	84 e1       	ldi	r24, 0x14	; 20
    56de:	80 93 11 01 	sts	0x0111, r24
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
    56e2:	88 e0       	ldi	r24, 0x08	; 8
    56e4:	80 93 10 01 	sts	0x0110, r24
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
    56e8:	88 e2       	ldi	r24, 0x28	; 40
    56ea:	80 93 0f 01 	sts	0x010F, r24
            print("set default values.\n");
    56ee:	89 e9       	ldi	r24, 0x99	; 153
    56f0:	97 e0       	ldi	r25, 0x07	; 7
    56f2:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    56f6:	d6 c0       	rjmp	.+428    	; 0x58a4 <command_proc+0x2a0>
    print("See http://en.wikipedia.org/wiki/Mouse_keys\n");
}

static bool mousekey_console(uint8_t code)
{
    switch (code) {
    56f8:	c3 31       	cpi	r28, 0x13	; 19
    56fa:	41 f1       	breq	.+80     	; 0x574c <command_proc+0x148>
    56fc:	c4 31       	cpi	r28, 0x14	; 20
    56fe:	c1 f0       	breq	.+48     	; 0x5730 <command_proc+0x12c>
    5700:	cc c0       	rjmp	.+408    	; 0x589a <command_proc+0x296>
    5702:	cb 34       	cpi	r28, 0x4B	; 75
    5704:	09 f4       	brne	.+2      	; 0x5708 <command_proc+0x104>
    5706:	be c0       	rjmp	.+380    	; 0x5884 <command_proc+0x280>
    5708:	28 f4       	brcc	.+10     	; 0x5714 <command_proc+0x110>
    570a:	c9 32       	cpi	r28, 0x29	; 41
    570c:	89 f0       	breq	.+34     	; 0x5730 <command_proc+0x12c>
    570e:	c8 33       	cpi	r28, 0x38	; 56
    5710:	61 f0       	breq	.+24     	; 0x572a <command_proc+0x126>
    5712:	c3 c0       	rjmp	.+390    	; 0x589a <command_proc+0x296>
    5714:	c1 35       	cpi	r28, 0x51	; 81
    5716:	09 f4       	brne	.+2      	; 0x571a <command_proc+0x116>
    5718:	b3 c0       	rjmp	.+358    	; 0x5880 <command_proc+0x27c>
    571a:	c2 35       	cpi	r28, 0x52	; 82
    571c:	09 f4       	brne	.+2      	; 0x5720 <command_proc+0x11c>
    571e:	ae c0       	rjmp	.+348    	; 0x587c <command_proc+0x278>
    5720:	ce 34       	cpi	r28, 0x4E	; 78
    5722:	09 f0       	breq	.+2      	; 0x5726 <command_proc+0x122>
    5724:	ba c0       	rjmp	.+372    	; 0x589a <command_proc+0x296>
            break;
        case KC_PGUP:
            mousekey_param_inc(mousekey_param, 10);
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
    5726:	6a e0       	ldi	r22, 0x0A	; 10
    5728:	b3 c0       	rjmp	.+358    	; 0x5890 <command_proc+0x28c>
static bool mousekey_console(uint8_t code)
{
    switch (code) {
        case KC_H:
        case KC_SLASH: /* ? */
            mousekey_console_help();
    572a:	0e 94 db 25 	call	0x4bb6	; 0x4bb6 <mousekey_console_help>
    572e:	ba c0       	rjmp	.+372    	; 0x58a4 <command_proc+0x2a0>
            break;
        case KC_Q:
        case KC_ESC:
            mousekey_param = 0;
    5730:	10 92 d7 01 	sts	0x01D7, r1
            print("\nQuit Mousekey Console\n");
    5734:	8c ec       	ldi	r24, 0xCC	; 204
    5736:	97 e0       	ldi	r25, 0x07	; 7
    5738:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
            print("C> ");
    573c:	88 ec       	ldi	r24, 0xC8	; 200
    573e:	97 e0       	ldi	r25, 0x07	; 7
    5740:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
            command_state = CONSOLE;
    5744:	81 e0       	ldi	r24, 0x01	; 1
    5746:	80 93 d4 01 	sts	0x01D4, r24
    574a:	ca c0       	rjmp	.+404    	; 0x58e0 <command_proc+0x2dc>
 ***********************************************************/
static uint8_t mousekey_param = 0;

static void mousekey_param_print(void)
{
    print("\n\n----- Mousekey Parameters -----\n");
    574c:	8c e6       	ldi	r24, 0x6C	; 108
    574e:	97 e0       	ldi	r25, 0x07	; 7
    5750:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    print("1: mk_delay(*10ms): "); pdec(mk_delay); print("\n");
    5754:	87 e5       	ldi	r24, 0x57	; 87
    5756:	97 e0       	ldi	r25, 0x07	; 7
    5758:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    575c:	80 91 14 01 	lds	r24, 0x0114
    5760:	1f 92       	push	r1
    5762:	8f 93       	push	r24
    5764:	84 e5       	ldi	r24, 0x54	; 84
    5766:	97 e0       	ldi	r25, 0x07	; 7
    5768:	9f 93       	push	r25
    576a:	8f 93       	push	r24
    576c:	0e 94 1e 09 	call	0x123c	; 0x123c <__xprintf>
    5770:	82 e5       	ldi	r24, 0x52	; 82
    5772:	97 e0       	ldi	r25, 0x07	; 7
    5774:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    print("2: mk_interval(ms): "); pdec(mk_interval); print("\n");
    5778:	8d e3       	ldi	r24, 0x3D	; 61
    577a:	97 e0       	ldi	r25, 0x07	; 7
    577c:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    5780:	80 91 13 01 	lds	r24, 0x0113
    5784:	1f 92       	push	r1
    5786:	8f 93       	push	r24
    5788:	8a e3       	ldi	r24, 0x3A	; 58
    578a:	97 e0       	ldi	r25, 0x07	; 7
    578c:	9f 93       	push	r25
    578e:	8f 93       	push	r24
    5790:	0e 94 1e 09 	call	0x123c	; 0x123c <__xprintf>
    5794:	88 e3       	ldi	r24, 0x38	; 56
    5796:	97 e0       	ldi	r25, 0x07	; 7
    5798:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    print("3: mk_max_speed: "); pdec(mk_max_speed); print("\n");
    579c:	86 e2       	ldi	r24, 0x26	; 38
    579e:	97 e0       	ldi	r25, 0x07	; 7
    57a0:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    57a4:	80 91 12 01 	lds	r24, 0x0112
    57a8:	1f 92       	push	r1
    57aa:	8f 93       	push	r24
    57ac:	83 e2       	ldi	r24, 0x23	; 35
    57ae:	97 e0       	ldi	r25, 0x07	; 7
    57b0:	9f 93       	push	r25
    57b2:	8f 93       	push	r24
    57b4:	0e 94 1e 09 	call	0x123c	; 0x123c <__xprintf>
    57b8:	81 e2       	ldi	r24, 0x21	; 33
    57ba:	97 e0       	ldi	r25, 0x07	; 7
    57bc:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    print("4: mk_time_to_max: "); pdec(mk_time_to_max); print("\n");
    57c0:	8d e0       	ldi	r24, 0x0D	; 13
    57c2:	97 e0       	ldi	r25, 0x07	; 7
    57c4:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    57c8:	80 91 11 01 	lds	r24, 0x0111
    57cc:	1f 92       	push	r1
    57ce:	8f 93       	push	r24
    57d0:	8a e0       	ldi	r24, 0x0A	; 10
    57d2:	97 e0       	ldi	r25, 0x07	; 7
    57d4:	9f 93       	push	r25
    57d6:	8f 93       	push	r24
    57d8:	0e 94 1e 09 	call	0x123c	; 0x123c <__xprintf>
    57dc:	88 e0       	ldi	r24, 0x08	; 8
    57de:	97 e0       	ldi	r25, 0x07	; 7
    57e0:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    print("5: mk_wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
    57e4:	80 ef       	ldi	r24, 0xF0	; 240
    57e6:	96 e0       	ldi	r25, 0x06	; 6
    57e8:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    57ec:	80 91 10 01 	lds	r24, 0x0110
    57f0:	1f 92       	push	r1
    57f2:	8f 93       	push	r24
    57f4:	8d ee       	ldi	r24, 0xED	; 237
    57f6:	96 e0       	ldi	r25, 0x06	; 6
    57f8:	9f 93       	push	r25
    57fa:	8f 93       	push	r24
    57fc:	0e 94 1e 09 	call	0x123c	; 0x123c <__xprintf>
    5800:	8b ee       	ldi	r24, 0xEB	; 235
    5802:	96 e0       	ldi	r25, 0x06	; 6
    5804:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    print("6: mk_wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
    5808:	81 ed       	ldi	r24, 0xD1	; 209
    580a:	96 e0       	ldi	r25, 0x06	; 6
    580c:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    5810:	80 91 0f 01 	lds	r24, 0x010F
    5814:	1f 92       	push	r1
    5816:	8f 93       	push	r24
    5818:	8e ec       	ldi	r24, 0xCE	; 206
    581a:	96 e0       	ldi	r25, 0x06	; 6
    581c:	9f 93       	push	r25
    581e:	8f 93       	push	r24
    5820:	0e 94 1e 09 	call	0x123c	; 0x123c <__xprintf>
    5824:	8c ec       	ldi	r24, 0xCC	; 204
    5826:	96 e0       	ldi	r25, 0x06	; 6
    5828:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    582c:	8d b7       	in	r24, 0x3d	; 61
    582e:	9e b7       	in	r25, 0x3e	; 62
    5830:	48 96       	adiw	r24, 0x18	; 24
    5832:	0f b6       	in	r0, 0x3f	; 63
    5834:	f8 94       	cli
    5836:	9e bf       	out	0x3e, r25	; 62
    5838:	0f be       	out	0x3f, r0	; 63
    583a:	8d bf       	out	0x3d, r24	; 61
    583c:	33 c0       	rjmp	.+102    	; 0x58a4 <command_proc+0x2a0>
    583e:	ce 51       	subi	r28, 0x1E	; 30
    5840:	ec 2f       	mov	r30, r28
    5842:	f0 e0       	ldi	r31, 0x00	; 0
    5844:	e2 5d       	subi	r30, 0xD2	; 210
    5846:	fe 4f       	sbci	r31, 0xFE	; 254
        case KC_6:
        case KC_7:
        case KC_8:
        case KC_9:
        case KC_0:
            mousekey_param = numkey2num(code);
    5848:	80 81       	ld	r24, Z
    584a:	80 93 d7 01 	sts	0x01D7, r24
            print("selected parameter: "); pdec(mousekey_param); print("\n");
    584e:	83 eb       	ldi	r24, 0xB3	; 179
    5850:	97 e0       	ldi	r25, 0x07	; 7
    5852:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    5856:	80 91 d7 01 	lds	r24, 0x01D7
    585a:	1f 92       	push	r1
    585c:	8f 93       	push	r24
    585e:	80 eb       	ldi	r24, 0xB0	; 176
    5860:	97 e0       	ldi	r25, 0x07	; 7
    5862:	9f 93       	push	r25
    5864:	8f 93       	push	r24
    5866:	0e 94 1e 09 	call	0x123c	; 0x123c <__xprintf>
    586a:	8e ea       	ldi	r24, 0xAE	; 174
    586c:	97 e0       	ldi	r25, 0x07	; 7
    586e:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    5872:	0f 90       	pop	r0
    5874:	0f 90       	pop	r0
    5876:	0f 90       	pop	r0
    5878:	0f 90       	pop	r0
    587a:	14 c0       	rjmp	.+40     	; 0x58a4 <command_proc+0x2a0>
            break;
        case KC_UP:
            mousekey_param_inc(mousekey_param, 1);
    587c:	61 e0       	ldi	r22, 0x01	; 1
    587e:	03 c0       	rjmp	.+6      	; 0x5886 <command_proc+0x282>
            break;
        case KC_DOWN:
            mousekey_param_dec(mousekey_param, 1);
    5880:	61 e0       	ldi	r22, 0x01	; 1
    5882:	06 c0       	rjmp	.+12     	; 0x5890 <command_proc+0x28c>
            break;
        case KC_PGUP:
            mousekey_param_inc(mousekey_param, 10);
    5884:	6a e0       	ldi	r22, 0x0A	; 10
    5886:	80 91 d7 01 	lds	r24, 0x01D7
    588a:	0e 94 41 26 	call	0x4c82	; 0x4c82 <mousekey_param_inc>
    588e:	0a c0       	rjmp	.+20     	; 0x58a4 <command_proc+0x2a0>
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
    5890:	80 91 d7 01 	lds	r24, 0x01D7
    5894:	0e 94 32 27 	call	0x4e64	; 0x4e64 <mousekey_param_dec>
    5898:	05 c0       	rjmp	.+10     	; 0x58a4 <command_proc+0x2a0>
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
            print("set default values.\n");
            break;
        default:
            print("?");
    589a:	87 e9       	ldi	r24, 0x97	; 151
    589c:	97 e0       	ldi	r25, 0x07	; 7
    589e:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    58a2:	16 c0       	rjmp	.+44     	; 0x58d0 <command_proc+0x2cc>
            return false;
    }
    print("M"); pdec(mousekey_param); print("> ");
    58a4:	85 e9       	ldi	r24, 0x95	; 149
    58a6:	97 e0       	ldi	r25, 0x07	; 7
    58a8:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    58ac:	80 91 d7 01 	lds	r24, 0x01D7
    58b0:	1f 92       	push	r1
    58b2:	8f 93       	push	r24
    58b4:	82 e9       	ldi	r24, 0x92	; 146
    58b6:	97 e0       	ldi	r25, 0x07	; 7
    58b8:	9f 93       	push	r25
    58ba:	8f 93       	push	r24
    58bc:	0e 94 1e 09 	call	0x123c	; 0x123c <__xprintf>
    58c0:	8f e8       	ldi	r24, 0x8F	; 143
    58c2:	97 e0       	ldi	r25, 0x07	; 7
    58c4:	0e 94 85 08 	call	0x110a	; 0x110a <xputs>
    58c8:	0f 90       	pop	r0
    58ca:	0f 90       	pop	r0
    58cc:	0f 90       	pop	r0
    58ce:	0f 90       	pop	r0
#endif
        default:
            command_state = ONESHOT;
            return false;
    }
    return true;
    58d0:	81 e0       	ldi	r24, 0x01	; 1
    58d2:	06 c0       	rjmp	.+12     	; 0x58e0 <command_proc+0x2dc>
        case MOUSEKEY:
            mousekey_console(code);
            break;
#endif
        default:
            command_state = ONESHOT;
    58d4:	10 92 d4 01 	sts	0x01D4, r1
bool command_proc(uint8_t code)
{
    switch (command_state) {
        case ONESHOT:
            if (!IS_COMMAND())
                return false;
    58d8:	80 e0       	ldi	r24, 0x00	; 0
    58da:	02 c0       	rjmp	.+4      	; 0x58e0 <command_proc+0x2dc>
            break;
        case CONSOLE:
            if (IS_COMMAND())
                return (command_extra(code) || command_common(code));
            else
                return (command_console_extra(code) || command_console(code));
    58dc:	80 e0       	ldi	r24, 0x00	; 0
    58de:	e8 ce       	rjmp	.-560    	; 0x56b0 <command_proc+0xac>
        default:
            command_state = ONESHOT;
            return false;
    }
    return true;
}
    58e0:	cf 91       	pop	r28
    58e2:	08 95       	ret

000058e4 <__fixsfsi>:
    58e4:	04 d0       	rcall	.+8      	; 0x58ee <__fixunssfsi>
    58e6:	68 94       	set
    58e8:	b1 11       	cpse	r27, r1
    58ea:	8d c0       	rjmp	.+282    	; 0x5a06 <__fp_szero>
    58ec:	08 95       	ret

000058ee <__fixunssfsi>:
    58ee:	70 d0       	rcall	.+224    	; 0x59d0 <__fp_splitA>
    58f0:	88 f0       	brcs	.+34     	; 0x5914 <__fixunssfsi+0x26>
    58f2:	9f 57       	subi	r25, 0x7F	; 127
    58f4:	90 f0       	brcs	.+36     	; 0x591a <__fixunssfsi+0x2c>
    58f6:	b9 2f       	mov	r27, r25
    58f8:	99 27       	eor	r25, r25
    58fa:	b7 51       	subi	r27, 0x17	; 23
    58fc:	a0 f0       	brcs	.+40     	; 0x5926 <__fixunssfsi+0x38>
    58fe:	d1 f0       	breq	.+52     	; 0x5934 <__fixunssfsi+0x46>
    5900:	66 0f       	add	r22, r22
    5902:	77 1f       	adc	r23, r23
    5904:	88 1f       	adc	r24, r24
    5906:	99 1f       	adc	r25, r25
    5908:	1a f0       	brmi	.+6      	; 0x5910 <__fixunssfsi+0x22>
    590a:	ba 95       	dec	r27
    590c:	c9 f7       	brne	.-14     	; 0x5900 <__fixunssfsi+0x12>
    590e:	12 c0       	rjmp	.+36     	; 0x5934 <__fixunssfsi+0x46>
    5910:	b1 30       	cpi	r27, 0x01	; 1
    5912:	81 f0       	breq	.+32     	; 0x5934 <__fixunssfsi+0x46>
    5914:	77 d0       	rcall	.+238    	; 0x5a04 <__fp_zero>
    5916:	b1 e0       	ldi	r27, 0x01	; 1
    5918:	08 95       	ret
    591a:	74 c0       	rjmp	.+232    	; 0x5a04 <__fp_zero>
    591c:	67 2f       	mov	r22, r23
    591e:	78 2f       	mov	r23, r24
    5920:	88 27       	eor	r24, r24
    5922:	b8 5f       	subi	r27, 0xF8	; 248
    5924:	39 f0       	breq	.+14     	; 0x5934 <__fixunssfsi+0x46>
    5926:	b9 3f       	cpi	r27, 0xF9	; 249
    5928:	cc f3       	brlt	.-14     	; 0x591c <__fixunssfsi+0x2e>
    592a:	86 95       	lsr	r24
    592c:	77 95       	ror	r23
    592e:	67 95       	ror	r22
    5930:	b3 95       	inc	r27
    5932:	d9 f7       	brne	.-10     	; 0x592a <__fixunssfsi+0x3c>
    5934:	3e f4       	brtc	.+14     	; 0x5944 <__fixunssfsi+0x56>
    5936:	90 95       	com	r25
    5938:	80 95       	com	r24
    593a:	70 95       	com	r23
    593c:	61 95       	neg	r22
    593e:	7f 4f       	sbci	r23, 0xFF	; 255
    5940:	8f 4f       	sbci	r24, 0xFF	; 255
    5942:	9f 4f       	sbci	r25, 0xFF	; 255
    5944:	08 95       	ret

00005946 <__floatunsisf>:
    5946:	e8 94       	clt
    5948:	09 c0       	rjmp	.+18     	; 0x595c <__floatsisf+0x12>

0000594a <__floatsisf>:
    594a:	97 fb       	bst	r25, 7
    594c:	3e f4       	brtc	.+14     	; 0x595c <__floatsisf+0x12>
    594e:	90 95       	com	r25
    5950:	80 95       	com	r24
    5952:	70 95       	com	r23
    5954:	61 95       	neg	r22
    5956:	7f 4f       	sbci	r23, 0xFF	; 255
    5958:	8f 4f       	sbci	r24, 0xFF	; 255
    595a:	9f 4f       	sbci	r25, 0xFF	; 255
    595c:	99 23       	and	r25, r25
    595e:	a9 f0       	breq	.+42     	; 0x598a <__floatsisf+0x40>
    5960:	f9 2f       	mov	r31, r25
    5962:	96 e9       	ldi	r25, 0x96	; 150
    5964:	bb 27       	eor	r27, r27
    5966:	93 95       	inc	r25
    5968:	f6 95       	lsr	r31
    596a:	87 95       	ror	r24
    596c:	77 95       	ror	r23
    596e:	67 95       	ror	r22
    5970:	b7 95       	ror	r27
    5972:	f1 11       	cpse	r31, r1
    5974:	f8 cf       	rjmp	.-16     	; 0x5966 <__floatsisf+0x1c>
    5976:	fa f4       	brpl	.+62     	; 0x59b6 <__floatsisf+0x6c>
    5978:	bb 0f       	add	r27, r27
    597a:	11 f4       	brne	.+4      	; 0x5980 <__floatsisf+0x36>
    597c:	60 ff       	sbrs	r22, 0
    597e:	1b c0       	rjmp	.+54     	; 0x59b6 <__floatsisf+0x6c>
    5980:	6f 5f       	subi	r22, 0xFF	; 255
    5982:	7f 4f       	sbci	r23, 0xFF	; 255
    5984:	8f 4f       	sbci	r24, 0xFF	; 255
    5986:	9f 4f       	sbci	r25, 0xFF	; 255
    5988:	16 c0       	rjmp	.+44     	; 0x59b6 <__floatsisf+0x6c>
    598a:	88 23       	and	r24, r24
    598c:	11 f0       	breq	.+4      	; 0x5992 <__floatsisf+0x48>
    598e:	96 e9       	ldi	r25, 0x96	; 150
    5990:	11 c0       	rjmp	.+34     	; 0x59b4 <__floatsisf+0x6a>
    5992:	77 23       	and	r23, r23
    5994:	21 f0       	breq	.+8      	; 0x599e <__floatsisf+0x54>
    5996:	9e e8       	ldi	r25, 0x8E	; 142
    5998:	87 2f       	mov	r24, r23
    599a:	76 2f       	mov	r23, r22
    599c:	05 c0       	rjmp	.+10     	; 0x59a8 <__floatsisf+0x5e>
    599e:	66 23       	and	r22, r22
    59a0:	71 f0       	breq	.+28     	; 0x59be <__floatsisf+0x74>
    59a2:	96 e8       	ldi	r25, 0x86	; 134
    59a4:	86 2f       	mov	r24, r22
    59a6:	70 e0       	ldi	r23, 0x00	; 0
    59a8:	60 e0       	ldi	r22, 0x00	; 0
    59aa:	2a f0       	brmi	.+10     	; 0x59b6 <__floatsisf+0x6c>
    59ac:	9a 95       	dec	r25
    59ae:	66 0f       	add	r22, r22
    59b0:	77 1f       	adc	r23, r23
    59b2:	88 1f       	adc	r24, r24
    59b4:	da f7       	brpl	.-10     	; 0x59ac <__floatsisf+0x62>
    59b6:	88 0f       	add	r24, r24
    59b8:	96 95       	lsr	r25
    59ba:	87 95       	ror	r24
    59bc:	97 f9       	bld	r25, 7
    59be:	08 95       	ret

000059c0 <__fp_split3>:
    59c0:	57 fd       	sbrc	r21, 7
    59c2:	90 58       	subi	r25, 0x80	; 128
    59c4:	44 0f       	add	r20, r20
    59c6:	55 1f       	adc	r21, r21
    59c8:	59 f0       	breq	.+22     	; 0x59e0 <__fp_splitA+0x10>
    59ca:	5f 3f       	cpi	r21, 0xFF	; 255
    59cc:	71 f0       	breq	.+28     	; 0x59ea <__fp_splitA+0x1a>
    59ce:	47 95       	ror	r20

000059d0 <__fp_splitA>:
    59d0:	88 0f       	add	r24, r24
    59d2:	97 fb       	bst	r25, 7
    59d4:	99 1f       	adc	r25, r25
    59d6:	61 f0       	breq	.+24     	; 0x59f0 <__fp_splitA+0x20>
    59d8:	9f 3f       	cpi	r25, 0xFF	; 255
    59da:	79 f0       	breq	.+30     	; 0x59fa <__fp_splitA+0x2a>
    59dc:	87 95       	ror	r24
    59de:	08 95       	ret
    59e0:	12 16       	cp	r1, r18
    59e2:	13 06       	cpc	r1, r19
    59e4:	14 06       	cpc	r1, r20
    59e6:	55 1f       	adc	r21, r21
    59e8:	f2 cf       	rjmp	.-28     	; 0x59ce <__fp_split3+0xe>
    59ea:	46 95       	lsr	r20
    59ec:	f1 df       	rcall	.-30     	; 0x59d0 <__fp_splitA>
    59ee:	08 c0       	rjmp	.+16     	; 0x5a00 <__fp_splitA+0x30>
    59f0:	16 16       	cp	r1, r22
    59f2:	17 06       	cpc	r1, r23
    59f4:	18 06       	cpc	r1, r24
    59f6:	99 1f       	adc	r25, r25
    59f8:	f1 cf       	rjmp	.-30     	; 0x59dc <__fp_splitA+0xc>
    59fa:	86 95       	lsr	r24
    59fc:	71 05       	cpc	r23, r1
    59fe:	61 05       	cpc	r22, r1
    5a00:	08 94       	sec
    5a02:	08 95       	ret

00005a04 <__fp_zero>:
    5a04:	e8 94       	clt

00005a06 <__fp_szero>:
    5a06:	bb 27       	eor	r27, r27
    5a08:	66 27       	eor	r22, r22
    5a0a:	77 27       	eor	r23, r23
    5a0c:	cb 01       	movw	r24, r22
    5a0e:	97 f9       	bld	r25, 7
    5a10:	08 95       	ret

00005a12 <__mulsf3>:
    5a12:	0b d0       	rcall	.+22     	; 0x5a2a <__mulsf3x>
    5a14:	78 c0       	rjmp	.+240    	; 0x5b06 <__fp_round>
    5a16:	69 d0       	rcall	.+210    	; 0x5aea <__fp_pscA>
    5a18:	28 f0       	brcs	.+10     	; 0x5a24 <__mulsf3+0x12>
    5a1a:	6e d0       	rcall	.+220    	; 0x5af8 <__fp_pscB>
    5a1c:	18 f0       	brcs	.+6      	; 0x5a24 <__mulsf3+0x12>
    5a1e:	95 23       	and	r25, r21
    5a20:	09 f0       	breq	.+2      	; 0x5a24 <__mulsf3+0x12>
    5a22:	5a c0       	rjmp	.+180    	; 0x5ad8 <__fp_inf>
    5a24:	5f c0       	rjmp	.+190    	; 0x5ae4 <__fp_nan>
    5a26:	11 24       	eor	r1, r1
    5a28:	ee cf       	rjmp	.-36     	; 0x5a06 <__fp_szero>

00005a2a <__mulsf3x>:
    5a2a:	ca df       	rcall	.-108    	; 0x59c0 <__fp_split3>
    5a2c:	a0 f3       	brcs	.-24     	; 0x5a16 <__mulsf3+0x4>

00005a2e <__mulsf3_pse>:
    5a2e:	95 9f       	mul	r25, r21
    5a30:	d1 f3       	breq	.-12     	; 0x5a26 <__mulsf3+0x14>
    5a32:	95 0f       	add	r25, r21
    5a34:	50 e0       	ldi	r21, 0x00	; 0
    5a36:	55 1f       	adc	r21, r21
    5a38:	62 9f       	mul	r22, r18
    5a3a:	f0 01       	movw	r30, r0
    5a3c:	72 9f       	mul	r23, r18
    5a3e:	bb 27       	eor	r27, r27
    5a40:	f0 0d       	add	r31, r0
    5a42:	b1 1d       	adc	r27, r1
    5a44:	63 9f       	mul	r22, r19
    5a46:	aa 27       	eor	r26, r26
    5a48:	f0 0d       	add	r31, r0
    5a4a:	b1 1d       	adc	r27, r1
    5a4c:	aa 1f       	adc	r26, r26
    5a4e:	64 9f       	mul	r22, r20
    5a50:	66 27       	eor	r22, r22
    5a52:	b0 0d       	add	r27, r0
    5a54:	a1 1d       	adc	r26, r1
    5a56:	66 1f       	adc	r22, r22
    5a58:	82 9f       	mul	r24, r18
    5a5a:	22 27       	eor	r18, r18
    5a5c:	b0 0d       	add	r27, r0
    5a5e:	a1 1d       	adc	r26, r1
    5a60:	62 1f       	adc	r22, r18
    5a62:	73 9f       	mul	r23, r19
    5a64:	b0 0d       	add	r27, r0
    5a66:	a1 1d       	adc	r26, r1
    5a68:	62 1f       	adc	r22, r18
    5a6a:	83 9f       	mul	r24, r19
    5a6c:	a0 0d       	add	r26, r0
    5a6e:	61 1d       	adc	r22, r1
    5a70:	22 1f       	adc	r18, r18
    5a72:	74 9f       	mul	r23, r20
    5a74:	33 27       	eor	r19, r19
    5a76:	a0 0d       	add	r26, r0
    5a78:	61 1d       	adc	r22, r1
    5a7a:	23 1f       	adc	r18, r19
    5a7c:	84 9f       	mul	r24, r20
    5a7e:	60 0d       	add	r22, r0
    5a80:	21 1d       	adc	r18, r1
    5a82:	82 2f       	mov	r24, r18
    5a84:	76 2f       	mov	r23, r22
    5a86:	6a 2f       	mov	r22, r26
    5a88:	11 24       	eor	r1, r1
    5a8a:	9f 57       	subi	r25, 0x7F	; 127
    5a8c:	50 40       	sbci	r21, 0x00	; 0
    5a8e:	8a f0       	brmi	.+34     	; 0x5ab2 <__mulsf3_pse+0x84>
    5a90:	e1 f0       	breq	.+56     	; 0x5aca <__mulsf3_pse+0x9c>
    5a92:	88 23       	and	r24, r24
    5a94:	4a f0       	brmi	.+18     	; 0x5aa8 <__mulsf3_pse+0x7a>
    5a96:	ee 0f       	add	r30, r30
    5a98:	ff 1f       	adc	r31, r31
    5a9a:	bb 1f       	adc	r27, r27
    5a9c:	66 1f       	adc	r22, r22
    5a9e:	77 1f       	adc	r23, r23
    5aa0:	88 1f       	adc	r24, r24
    5aa2:	91 50       	subi	r25, 0x01	; 1
    5aa4:	50 40       	sbci	r21, 0x00	; 0
    5aa6:	a9 f7       	brne	.-22     	; 0x5a92 <__mulsf3_pse+0x64>
    5aa8:	9e 3f       	cpi	r25, 0xFE	; 254
    5aaa:	51 05       	cpc	r21, r1
    5aac:	70 f0       	brcs	.+28     	; 0x5aca <__mulsf3_pse+0x9c>
    5aae:	14 c0       	rjmp	.+40     	; 0x5ad8 <__fp_inf>
    5ab0:	aa cf       	rjmp	.-172    	; 0x5a06 <__fp_szero>
    5ab2:	5f 3f       	cpi	r21, 0xFF	; 255
    5ab4:	ec f3       	brlt	.-6      	; 0x5ab0 <__mulsf3_pse+0x82>
    5ab6:	98 3e       	cpi	r25, 0xE8	; 232
    5ab8:	dc f3       	brlt	.-10     	; 0x5ab0 <__mulsf3_pse+0x82>
    5aba:	86 95       	lsr	r24
    5abc:	77 95       	ror	r23
    5abe:	67 95       	ror	r22
    5ac0:	b7 95       	ror	r27
    5ac2:	f7 95       	ror	r31
    5ac4:	e7 95       	ror	r30
    5ac6:	9f 5f       	subi	r25, 0xFF	; 255
    5ac8:	c1 f7       	brne	.-16     	; 0x5aba <__mulsf3_pse+0x8c>
    5aca:	fe 2b       	or	r31, r30
    5acc:	88 0f       	add	r24, r24
    5ace:	91 1d       	adc	r25, r1
    5ad0:	96 95       	lsr	r25
    5ad2:	87 95       	ror	r24
    5ad4:	97 f9       	bld	r25, 7
    5ad6:	08 95       	ret

00005ad8 <__fp_inf>:
    5ad8:	97 f9       	bld	r25, 7
    5ada:	9f 67       	ori	r25, 0x7F	; 127
    5adc:	80 e8       	ldi	r24, 0x80	; 128
    5ade:	70 e0       	ldi	r23, 0x00	; 0
    5ae0:	60 e0       	ldi	r22, 0x00	; 0
    5ae2:	08 95       	ret

00005ae4 <__fp_nan>:
    5ae4:	9f ef       	ldi	r25, 0xFF	; 255
    5ae6:	80 ec       	ldi	r24, 0xC0	; 192
    5ae8:	08 95       	ret

00005aea <__fp_pscA>:
    5aea:	00 24       	eor	r0, r0
    5aec:	0a 94       	dec	r0
    5aee:	16 16       	cp	r1, r22
    5af0:	17 06       	cpc	r1, r23
    5af2:	18 06       	cpc	r1, r24
    5af4:	09 06       	cpc	r0, r25
    5af6:	08 95       	ret

00005af8 <__fp_pscB>:
    5af8:	00 24       	eor	r0, r0
    5afa:	0a 94       	dec	r0
    5afc:	12 16       	cp	r1, r18
    5afe:	13 06       	cpc	r1, r19
    5b00:	14 06       	cpc	r1, r20
    5b02:	05 06       	cpc	r0, r21
    5b04:	08 95       	ret

00005b06 <__fp_round>:
    5b06:	09 2e       	mov	r0, r25
    5b08:	03 94       	inc	r0
    5b0a:	00 0c       	add	r0, r0
    5b0c:	11 f4       	brne	.+4      	; 0x5b12 <__fp_round+0xc>
    5b0e:	88 23       	and	r24, r24
    5b10:	52 f0       	brmi	.+20     	; 0x5b26 <__fp_round+0x20>
    5b12:	bb 0f       	add	r27, r27
    5b14:	40 f4       	brcc	.+16     	; 0x5b26 <__fp_round+0x20>
    5b16:	bf 2b       	or	r27, r31
    5b18:	11 f4       	brne	.+4      	; 0x5b1e <__fp_round+0x18>
    5b1a:	60 ff       	sbrs	r22, 0
    5b1c:	04 c0       	rjmp	.+8      	; 0x5b26 <__fp_round+0x20>
    5b1e:	6f 5f       	subi	r22, 0xFF	; 255
    5b20:	7f 4f       	sbci	r23, 0xFF	; 255
    5b22:	8f 4f       	sbci	r24, 0xFF	; 255
    5b24:	9f 4f       	sbci	r25, 0xFF	; 255
    5b26:	08 95       	ret

00005b28 <__divmodhi4>:
    5b28:	97 fb       	bst	r25, 7
    5b2a:	07 2e       	mov	r0, r23
    5b2c:	16 f4       	brtc	.+4      	; 0x5b32 <__divmodhi4+0xa>
    5b2e:	00 94       	com	r0
    5b30:	07 d0       	rcall	.+14     	; 0x5b40 <__divmodhi4_neg1>
    5b32:	77 fd       	sbrc	r23, 7
    5b34:	09 d0       	rcall	.+18     	; 0x5b48 <__divmodhi4_neg2>
    5b36:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__udivmodhi4>
    5b3a:	07 fc       	sbrc	r0, 7
    5b3c:	05 d0       	rcall	.+10     	; 0x5b48 <__divmodhi4_neg2>
    5b3e:	3e f4       	brtc	.+14     	; 0x5b4e <__divmodhi4_exit>

00005b40 <__divmodhi4_neg1>:
    5b40:	90 95       	com	r25
    5b42:	81 95       	neg	r24
    5b44:	9f 4f       	sbci	r25, 0xFF	; 255
    5b46:	08 95       	ret

00005b48 <__divmodhi4_neg2>:
    5b48:	70 95       	com	r23
    5b4a:	61 95       	neg	r22
    5b4c:	7f 4f       	sbci	r23, 0xFF	; 255

00005b4e <__divmodhi4_exit>:
    5b4e:	08 95       	ret

00005b50 <__tablejump2__>:
    5b50:	ee 0f       	add	r30, r30
    5b52:	ff 1f       	adc	r31, r31

00005b54 <__tablejump__>:
    5b54:	05 90       	lpm	r0, Z+
    5b56:	f4 91       	lpm	r31, Z
    5b58:	e0 2d       	mov	r30, r0
    5b5a:	09 94       	ijmp

00005b5c <__udivmodhi4>:
    5b5c:	aa 1b       	sub	r26, r26
    5b5e:	bb 1b       	sub	r27, r27
    5b60:	51 e1       	ldi	r21, 0x11	; 17
    5b62:	07 c0       	rjmp	.+14     	; 0x5b72 <__udivmodhi4_ep>

00005b64 <__udivmodhi4_loop>:
    5b64:	aa 1f       	adc	r26, r26
    5b66:	bb 1f       	adc	r27, r27
    5b68:	a6 17       	cp	r26, r22
    5b6a:	b7 07       	cpc	r27, r23
    5b6c:	10 f0       	brcs	.+4      	; 0x5b72 <__udivmodhi4_ep>
    5b6e:	a6 1b       	sub	r26, r22
    5b70:	b7 0b       	sbc	r27, r23

00005b72 <__udivmodhi4_ep>:
    5b72:	88 1f       	adc	r24, r24
    5b74:	99 1f       	adc	r25, r25
    5b76:	5a 95       	dec	r21
    5b78:	a9 f7       	brne	.-22     	; 0x5b64 <__udivmodhi4_loop>
    5b7a:	80 95       	com	r24
    5b7c:	90 95       	com	r25
    5b7e:	bc 01       	movw	r22, r24
    5b80:	cd 01       	movw	r24, r26
    5b82:	08 95       	ret

00005b84 <__eerd_byte_m32u4>:
    5b84:	f9 99       	sbic	0x1f, 1	; 31
    5b86:	fe cf       	rjmp	.-4      	; 0x5b84 <__eerd_byte_m32u4>
    5b88:	92 bd       	out	0x22, r25	; 34
    5b8a:	81 bd       	out	0x21, r24	; 33
    5b8c:	f8 9a       	sbi	0x1f, 0	; 31
    5b8e:	99 27       	eor	r25, r25
    5b90:	80 b5       	in	r24, 0x20	; 32
    5b92:	08 95       	ret

00005b94 <__eerd_word_m32u4>:
    5b94:	a8 e1       	ldi	r26, 0x18	; 24
    5b96:	b0 e0       	ldi	r27, 0x00	; 0
    5b98:	42 e0       	ldi	r20, 0x02	; 2
    5b9a:	50 e0       	ldi	r21, 0x00	; 0
    5b9c:	0c 94 e5 2d 	jmp	0x5bca	; 0x5bca <__eerd_blraw_m32u4>

00005ba0 <__eewr_byte_m32u4>:
    5ba0:	26 2f       	mov	r18, r22

00005ba2 <__eewr_r18_m32u4>:
    5ba2:	f9 99       	sbic	0x1f, 1	; 31
    5ba4:	fe cf       	rjmp	.-4      	; 0x5ba2 <__eewr_r18_m32u4>
    5ba6:	1f ba       	out	0x1f, r1	; 31
    5ba8:	92 bd       	out	0x22, r25	; 34
    5baa:	81 bd       	out	0x21, r24	; 33
    5bac:	20 bd       	out	0x20, r18	; 32
    5bae:	0f b6       	in	r0, 0x3f	; 63
    5bb0:	f8 94       	cli
    5bb2:	fa 9a       	sbi	0x1f, 2	; 31
    5bb4:	f9 9a       	sbi	0x1f, 1	; 31
    5bb6:	0f be       	out	0x3f, r0	; 63
    5bb8:	01 96       	adiw	r24, 0x01	; 1
    5bba:	08 95       	ret

00005bbc <__eewr_word_m32u4>:
    5bbc:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <__eewr_byte_m32u4>
    5bc0:	27 2f       	mov	r18, r23
    5bc2:	0c 94 d1 2d 	jmp	0x5ba2	; 0x5ba2 <__eewr_r18_m32u4>

00005bc6 <__eerd_block_m32u4>:
    5bc6:	dc 01       	movw	r26, r24
    5bc8:	cb 01       	movw	r24, r22

00005bca <__eerd_blraw_m32u4>:
    5bca:	fc 01       	movw	r30, r24
    5bcc:	f9 99       	sbic	0x1f, 1	; 31
    5bce:	fe cf       	rjmp	.-4      	; 0x5bcc <__eerd_blraw_m32u4+0x2>
    5bd0:	06 c0       	rjmp	.+12     	; 0x5bde <__eerd_blraw_m32u4+0x14>
    5bd2:	f2 bd       	out	0x22, r31	; 34
    5bd4:	e1 bd       	out	0x21, r30	; 33
    5bd6:	f8 9a       	sbi	0x1f, 0	; 31
    5bd8:	31 96       	adiw	r30, 0x01	; 1
    5bda:	00 b4       	in	r0, 0x20	; 32
    5bdc:	0d 92       	st	X+, r0
    5bde:	41 50       	subi	r20, 0x01	; 1
    5be0:	50 40       	sbci	r21, 0x00	; 0
    5be2:	b8 f7       	brcc	.-18     	; 0x5bd2 <__eerd_blraw_m32u4+0x8>
    5be4:	08 95       	ret

00005be6 <_exit>:
    5be6:	f8 94       	cli

00005be8 <__stop_program>:
    5be8:	ff cf       	rjmp	.-2      	; 0x5be8 <__stop_program>
